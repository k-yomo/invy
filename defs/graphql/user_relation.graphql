
extend type Mutation {
    requestFriendship(friendUserId: UUID!): RequestFriendshipPayload! @authRequired
    cancelFriendshipRequest(friendshipRequestId: UUID!): CancelFriendshipRequestPayload! @authRequired
    acceptFriendshipRequest(friendshipRequestId: UUID!): AcceptFriendshipRequestPayload! @authRequired
    denyFriendshipRequest(friendshipRequestId: UUID!): DenyFriendshipRequestPayload! @authRequired

    muteUser(userId: UUID!): MuteUserPayload! @authRequired
    unmuteUser(userId: UUID!): UnmuteUserPayload! @authRequired

    blockUser(userId: UUID!): BlockUserPayload! @authRequired
    unblockUser(userId: UUID!): UnblockUserPayload! @authRequired
}

type FriendshipRequest implements Node {
    id: UUID!
    fromUserId: UUID!
    fromUser: User! @goField(forceResolver: true)
    toUserId: UUID!
    toUser: User! @goField(forceResolver: true)
    createdAt: Time!
}

type RequestFriendshipPayload {
    friendShipRequest: FriendshipRequest!
}

type CancelFriendshipRequestPayload {
    canceledFriendshipRequestId: UUID!
}

type AcceptFriendshipRequestPayload {
    acceptedFriendshipRequestId: UUID!
}

type DenyFriendshipRequestPayload {
    deniedFriendshipRequestId: UUID!
}

type MuteUserPayload {
    mutedUserId: UUID!
}

type UnmuteUserPayload {
    unmutedUserId: UUID!
}

type BlockUserPayload {
    blockedUserId: UUID!
}

type UnblockUserPayload {
    unblockedUserId: UUID!
}

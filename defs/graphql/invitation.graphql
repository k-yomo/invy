extend type Query {
    invitation(id: UUID!): Invitation! @authRequired
}

extend type Mutation {
    sendInvitation(input: SendInvitationInput): SendInvitationPayload! @authRequired
    closeInvitation(invitationId: UUID!): CloseInvitationPayload! @authRequired
    activateInvitation(invitationId: UUID!): ActivateInvitationPayload! @authRequired
    deleteInvitation(invitationId: UUID!): DeleteInvitationPayload! @authRequired

    acceptInvitation(invitationId: UUID!): AcceptInvitationPayload! @authRequired
    denyInvitation(invitationId: UUID!): DenyInvitationPayload! @authRequired

    registerInvitationAwaiting(input: RegisterInvitationAwaitingInput!): RegisterInvitationAwaitingPayload! @authRequired
    deleteInvitationAwaiting(invitationAwaitingId: UUID!): DeleteInvitationAwaitingPayload! @authRequired
}

type Coordinate {
    latitude: Float!
    longitude: Float!
}

enum InvitationStatus {
    ACTIVE
    CLOSED
}

type Invitation implements Node {
    id: UUID!
    status: InvitationStatus!
    userId: UUID!
    user: User! @goField(forceResolver: true)
    location: String!
    coordinate: Coordinate
    comment: String!
    startsAt: Time!
    expiresAt: Time!

    chatRoomId: UUID

    acceptedUsers: [User!]! @goField(forceResolver: true)
    isAccepted: Boolean! @goField(forceResolver: true)
}

input SendInvitationInput {
    targetFriendGroupIds: [UUID!]!
    targetFriendUserIds: [UUID!]!
    expiresAt: Time!
    startsAt: Time!
    location: String!
    latitude: Float
    longitude: Float
    comment: String!
}
type SendInvitationPayload {
    invitation: Invitation!
}

type CloseInvitationPayload {
    invitation: Invitation!
}

type ActivateInvitationPayload {
    invitation: Invitation!
}

type DeleteInvitationPayload {
    deletedInvitationId: UUID!
}

type AcceptInvitationPayload {
    invitation: Invitation!
}

type DenyInvitationPayload {
    invitation: Invitation!
}

type InvitationAwaiting implements Node {
    id: UUID!
    userId: UUID!
    user: User! @goField(forceResolver: true)
    startsAt: Time!
    endsAt: Time!
    comment: String!
}

input RegisterInvitationAwaitingInput {
    startsAt: Time!
    endsAt: Time!
    comment: String!
}

type RegisterInvitationAwaitingPayload {
    invitationAwaiting: InvitationAwaiting!
}

type DeleteInvitationAwaitingPayload {
    deletedInvitationAwaitingId: UUID!
}


extend type Mutation {
    sendChatMessageText(input: SendChatMessageTextInput): SendChatMessageTextPayload! @authRequired
    sendChatMessageImage(input: SendChatMessageImageInput): SendChatMessageImagePayload! @authRequired

    updateChatLastReadAt(input: UpdateChatLastReadAtInput!): UpdateChatLastReadAtPayload! @authRequired
}


type ChatRoom implements Node {
    id: UUID!
    participantUserIds: [UUID!]!
    participants: [ChatRoomParticipant!]!
    createdAt: Time!
}

type ChatRoomParticipant {
    userId: UUID!
    lastReadAt: Time!
}

type ChatMessageBodyText {
    text: String!
}

type ChatMessageBodyImage {
    url: String!
}

enum ChatMessageKind {
    TEXT
    IMAGE
}

union ChatMessageBody = ChatMessageBodyText | ChatMessageBodyImage

type ChatMessage implements Node {
    id: UUID!
    chatRoomId: UUID!
    userId: UUID!
    kind: ChatMessageKind!
    body: ChatMessageBody!
    createdAt: Time!
}

input SendChatMessageTextInput {
    id: UUID!
    chatRoomId: UUID!
    text: String!
}
type SendChatMessageTextPayload {
    chatMessage: ChatMessage!
}

input SendChatMessageImageInput {
    id: UUID!
    chatRoomId: UUID!
    image: Upload!
}
type SendChatMessageImagePayload {
    chatMessage: ChatMessage!
}

input UpdateChatLastReadAtInput {
    chatRoomId: UUID!,
    lastReadAt: Time!
}
type UpdateChatLastReadAtPayload {
    chatRoomId: UUID!
}

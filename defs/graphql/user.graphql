
extend type Query {
    viewer: Viewer! @authRequired
    user(userId: UUID!): User! @authRequired
    # fetch user by screen id
    userByScreenId(screenId: String!): User! @authRequired
    # It'll be empty when not friend
    userFriends(userId: UUID!, after: Cursor, first: Int, before: Cursor, last: Int): UserConnection!
}

extend type Mutation {
    updateAvatar(avatar: Upload!): UpdateAvatarPayload! @authRequired
    updateNickname(nickname: String!): UpdateNicknamePayload! @authRequired
    updateScreenId(screenId: String!): UpdateScreenIdPayload! @authRequired
}

# Currently logged in user
type Viewer implements Node {
    id: UUID!
    screenId: String!
    nickname: String!
    avatarUrl: String!

    friends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection! @goField(forceResolver: true)
    blockedFriends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection! @goField(forceResolver: true)
    # fetch friend ship requests need to be approved by the logged in user
    pendingFriendshipRequests: [FriendshipRequest!]! @goField(forceResolver: true)
    # fetch friend ship requests sent by the logged in user
    requestingFriendshipRequests: [FriendshipRequest!]! @goField(forceResolver: true)

    # fetch friend group
    # Other user's group can't be fetched
    friendGroup(friendGroupId: UUID!): FriendGroup! @goField(forceResolver: true)
    # fetch friend groups of the logged in user
    friendGroups: [FriendGroup!]! @goField(forceResolver: true)

    sentInvitations: [Invitation!]!  @goField(forceResolver: true)
    pendingInvitations: [Invitation!]!  @goField(forceResolver: true)
    acceptedInvitations: [Invitation!]! @goField(forceResolver: true)
    invitationAwaitings: [InvitationAwaiting!]! @goField(forceResolver: true)
}

# User is a public interface for a user
# User MUST NOT have private information such as email
type User implements Node {
    id: UUID!
    screenId: String!
    nickname: String!
    avatarUrl: String!
    isMuted: Boolean! @goField(forceResolver: true)
    isBlocked: Boolean! @goField(forceResolver: true)
    isFriend: Boolean! @goField(forceResolver: true)
    # This is an approximate distance in kilometer.
    # It'll be null when not friend or the location tracking is not enabled by the user
    distanceKm: Int @goField(forceResolver: true)
    isRequestingFriendship: Boolean! @goField(forceResolver: true)
    # It'll be empty when not friend
    invitationAwaitings: [InvitationAwaiting!]! @goField(forceResolver: true)
}

type UserEdge {
    node: User!
    cursor: Cursor!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type UpdateAvatarPayload {
    viewer: Viewer!
}

type UpdateNicknamePayload {
    viewer: Viewer!
}

type UpdateScreenIdPayload {
    viewer: Viewer!
}

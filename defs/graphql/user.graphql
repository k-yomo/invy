
extend type Query {
    viewer: Viewer! @authRequired
    user(userId: UUID!): User! @authRequired
    # fetch friends of the logged in user
    friends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection! @authRequired
}

extend type Mutation {
    requestFriendship(friendUserId: UUID!): FriendshipRequest! @authRequired
    cancelFriendshipRequest(friendshipRequestId: UUID!): Boolean! @authRequired
    denyFriendshipRequest(friendshipRequestId: UUID!): Boolean! @authRequired
    approveFriendshipRequest(friendshipRequestId: UUID!): Boolean! @authRequired

    createFriendGroup(input: CreateFriendGroupInput!): FriendGroup! @authRequired
    updateFriendGroup(input: UpdateFriendGroupInput!): FriendGroup! @authRequired
    deleteFriendGroup(friendGroupId: UUID!): Boolean! @authRequired

    muteUser(muteUserId: UUID!): Boolean! @authRequired
    unmuteUser(muteUserId: UUID!): Boolean! @authRequired
}

# Currently logged in user
type Viewer implements Node {
    id: UUID!
    screenId: String!
    email: String
    nickname: String!
    avatarUrl: String!

    friends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection! @goField(forceResolver: true)
    # fetch friend ship requests need to be approved by the logged in user
    pendingFriendshipRequests: [FriendshipRequest!]! @goField(forceResolver: true)
    # fetch friend ship requests sent by the logged in user
    requestingFriendshipRequests: [FriendshipRequest!]! @goField(forceResolver: true)

    # fetch friend group
    # Other user's group can't be fetched
    friendGroup(friendGroupId: UUID!): FriendGroup! @goField(forceResolver: true)
    # fetch friend groups of the logged in user
    friendGroups: [FriendGroup!]! @goField(forceResolver: true)
}

# User is a public interface for a user
# User MUST NOT have private information such as email
type User implements Node {
    id: UUID!
    nickname: String!
    avatarUrl: String!
    isMuted: Boolean! @goField(forceResolver: true)
    isFriend: Boolean! @goField(forceResolver: true)
}

type UserEdge {
    node: User!
    cursor: Cursor!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FriendshipRequest implements Node {
    id: UUID!
    fromUserId: UUID!
    fromUser: User! @goField(forceResolver: true)
    toUserId: UUID!
    toUser: User! @goField(forceResolver: true)
    createdAt: Time!
}

type FriendGroup implements Node {
    id: UUID!
    userId: UUID!
    name: String!
    totalCount: Int!
    friendUsers: [User!]! @goField(forceResolver: true)
}

input CreateFriendGroupInput {
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}

input UpdateFriendGroupInput {
    id: UUID!
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}

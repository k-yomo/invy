
extend type Mutation {
    requestFriendship(friendUserId: UUID!): RequestFriendshipPayload! @authRequired
    cancelFriendshipRequest(friendshipRequestId: UUID!): CancelFriendshipRequestPayload! @authRequired
    acceptFriendshipRequest(friendshipRequestId: UUID!): AcceptFriendshipRequestPayload! @authRequired
    denyFriendshipRequest(friendshipRequestId: UUID!): DenyFriendshipRequestPayload! @authRequired

    createFriendGroup(input: CreateFriendGroupInput!): CreateFriendGroupPayload! @authRequired
    updateFriendGroup(input: UpdateFriendGroupInput!): UpdateFriendGroupPayload! @authRequired
    deleteFriendGroup(friendGroupId: UUID!): DeleteFriendGroupPayload! @authRequired
}

type FriendshipRequest implements Node {
    id: UUID!
    fromUserId: UUID!
    fromUser: User! @goField(forceResolver: true)
    toUserId: UUID!
    toUser: User! @goField(forceResolver: true)
    createdAt: Time!
}

type FriendGroup implements Node {
    id: UUID!
    userId: UUID!
    name: String!
    totalCount: Int!
    friendUsers: [User!]! @goField(forceResolver: true)
}

type RequestFriendshipPayload {
    friendShipRequest: FriendshipRequest!
}

type CancelFriendshipRequestPayload {
    canceledFriendshipRequestId: UUID!
}

type AcceptFriendshipRequestPayload {
    acceptedFriendshipRequestId: UUID!
}

type DenyFriendshipRequestPayload {
    deniedFriendshipRequestId: UUID!
}

input CreateFriendGroupInput {
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}
type CreateFriendGroupPayload {
    friendGroup: FriendGroup!
}

input UpdateFriendGroupInput {
    id: UUID!
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}
type UpdateFriendGroupPayload {
    friendGroup: FriendGroup!
}

type DeleteFriendGroupPayload {
    deletedFriendGroupId: UUID!
}

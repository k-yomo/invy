scalar Time
scalar UUID
scalar Cursor

type Query {
    viewer: User! @authRequired
    user(userId: UUID!): User! @authRequired
    # fetch friends of the logged in user
    friends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection! @authRequired
    # fetch friend ship requests need to be approved by the logged in user
    pendingFriendShipRequests: [FriendshipRequest!]! @authRequired
    # fetch friend ship requests sent by the logged in user
    requestingFriendShipRequests: [FriendshipRequest!]! @authRequired

    # fetch friend group
    # Other user's group can't be fetched
    friendGroup(friendGroupId: UUID!): FriendGroup! @authRequired
    # fetch friend groups of the logged in user
    friendGroups: [FriendGroup!]! @authRequired
}

type Mutation {
    signUp(input: SignUpInput): Boolean!

    requestFriendShip(userId: UUID!): FriendshipRequest! @authRequired
    cancelFriendShipRequest(friendshipRequestId: UUID!): Boolean! @authRequired
    denyFriendShipRequest(friendshipRequestId: UUID!): Boolean! @authRequired
    approveFriendShipRequest(friendshipRequestId: UUID!): Boolean! @authRequired

    createFriendGroup(input: CreateFriendGroupInput!): FriendGroup! @authRequired
    updateFriendGroup(input: UpdateFriendGroupInput!): FriendGroup! @authRequired
    deleteFriendGroup(friendGroupId: UUID!): Boolean! @authRequired
}

##############################
# Directives
##############################
directive @authRequired on FIELD_DEFINITION

directive @constraint(
    min: Int
    max: Int
    pattern: String
    format: ConstraintFormat
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

enum ConstraintFormat {
    EMAIL
    URL
}

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

##############################
# Interfaces
##############################
interface Node {
    id: UUID!
}

type PageInfo {
    startCursor: Cursor
    endCursor: Cursor
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

##############################
# Types
##############################
type User implements Node {
    id: UUID!
    nickname: String!
    avatarUrl: String
}

type UserEdge {
    node: User!
    cursor: Cursor!
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type FriendshipRequest implements Node {
    id: UUID!
    fromUserId: UUID!
    fromUser: User! @goField(forceResolver: true)
    toUserId: UUID!
    toUser: User! @goField(forceResolver: true)
    createdAt: Time!
}

type FriendGroup implements Node {
    id: UUID!
    userId: UUID!
    name: String!
    friendUsers: [User!]! @goField(forceResolver: true)
}

input SignUpInput {
    email: String! @constraint(format: EMAIL)
    nickname: String! @constraint(min: 3)
    avatarUrl: String @constraint(format: URL)
}

input CreateFriendGroupInput {
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}

input UpdateFriendGroupInput {
    id: UUID!
    name: String! @constraint(max: 100)
    friendUserIds: [UUID!]!
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/friendshiprequest"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// FriendshipRequest is the model entity for the FriendshipRequest schema.
type FriendshipRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FromUserID holds the value of the "from_user_id" field.
	FromUserID uuid.UUID `json:"from_user_id,omitempty"`
	// ToUserID holds the value of the "to_user_id" field.
	ToUserID uuid.UUID `json:"to_user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendshipRequestQuery when eager-loading is set.
	Edges FriendshipRequestEdges `json:"edges"`
}

// FriendshipRequestEdges holds the relations/edges for other nodes in the graph.
type FriendshipRequestEdges struct {
	// FromUsers holds the value of the from_users edge.
	FromUsers *User `json:"from_users,omitempty"`
	// ToUsers holds the value of the to_users edge.
	ToUsers *User `json:"to_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// FromUsersOrErr returns the FromUsers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendshipRequestEdges) FromUsersOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.FromUsers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.FromUsers, nil
	}
	return nil, &NotLoadedError{edge: "from_users"}
}

// ToUsersOrErr returns the ToUsers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendshipRequestEdges) ToUsersOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ToUsers == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ToUsers, nil
	}
	return nil, &NotLoadedError{edge: "to_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendshipRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendshiprequest.FieldCreatedAt, friendshiprequest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case friendshiprequest.FieldID, friendshiprequest.FieldFromUserID, friendshiprequest.FieldToUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FriendshipRequest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendshipRequest fields.
func (fr *FriendshipRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendshiprequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fr.ID = *value
			}
		case friendshiprequest.FieldFromUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value != nil {
				fr.FromUserID = *value
			}
		case friendshiprequest.FieldToUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value != nil {
				fr.ToUserID = *value
			}
		case friendshiprequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = value.Time
			}
		case friendshiprequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryFromUsers queries the "from_users" edge of the FriendshipRequest entity.
func (fr *FriendshipRequest) QueryFromUsers() *UserQuery {
	return (&FriendshipRequestClient{config: fr.config}).QueryFromUsers(fr)
}

// QueryToUsers queries the "to_users" edge of the FriendshipRequest entity.
func (fr *FriendshipRequest) QueryToUsers() *UserQuery {
	return (&FriendshipRequestClient{config: fr.config}).QueryToUsers(fr)
}

// Update returns a builder for updating this FriendshipRequest.
// Note that you need to call FriendshipRequest.Unwrap() before calling this method if this FriendshipRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FriendshipRequest) Update() *FriendshipRequestUpdateOne {
	return (&FriendshipRequestClient{config: fr.config}).UpdateOne(fr)
}

// Unwrap unwraps the FriendshipRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FriendshipRequest) Unwrap() *FriendshipRequest {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendshipRequest is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FriendshipRequest) String() string {
	var builder strings.Builder
	builder.WriteString("FriendshipRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.ToUserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FriendshipRequests is a parsable slice of FriendshipRequest.
type FriendshipRequests []*FriendshipRequest

func (fr FriendshipRequests) config(cfg config) {
	for _i := range fr {
		fr[_i].config = cfg
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/invitation"
	"github.com/k-yomo/bump/bump_api/ent/invitationacceptance"
	"github.com/k-yomo/bump/bump_api/ent/invitationdenial"
	"github.com/k-yomo/bump/bump_api/ent/invitationfriendgroup"
	"github.com/k-yomo/bump/bump_api/ent/invitationuser"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// InvitationCreate is the builder for creating a Invitation entity.
type InvitationCreate struct {
	config
	mutation *InvitationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (ic *InvitationCreate) SetUserID(u uuid.UUID) *InvitationCreate {
	ic.mutation.SetUserID(u)
	return ic
}

// SetLocation sets the "location" field.
func (ic *InvitationCreate) SetLocation(s string) *InvitationCreate {
	ic.mutation.SetLocation(s)
	return ic
}

// SetComment sets the "comment" field.
func (ic *InvitationCreate) SetComment(s string) *InvitationCreate {
	ic.mutation.SetComment(s)
	return ic
}

// SetStartsAt sets the "starts_at" field.
func (ic *InvitationCreate) SetStartsAt(t time.Time) *InvitationCreate {
	ic.mutation.SetStartsAt(t)
	return ic
}

// SetExpiresAt sets the "expires_at" field.
func (ic *InvitationCreate) SetExpiresAt(t time.Time) *InvitationCreate {
	ic.mutation.SetExpiresAt(t)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InvitationCreate) SetCreatedAt(t time.Time) *InvitationCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableCreatedAt(t *time.Time) *InvitationCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InvitationCreate) SetUpdatedAt(t time.Time) *InvitationCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableUpdatedAt(t *time.Time) *InvitationCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InvitationCreate) SetID(u uuid.UUID) *InvitationCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InvitationCreate) SetNillableID(u *uuid.UUID) *InvitationCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *InvitationCreate) SetUser(u *User) *InvitationCreate {
	return ic.SetUserID(u.ID)
}

// AddInvitationUserIDs adds the "invitation_users" edge to the InvitationUser entity by IDs.
func (ic *InvitationCreate) AddInvitationUserIDs(ids ...uuid.UUID) *InvitationCreate {
	ic.mutation.AddInvitationUserIDs(ids...)
	return ic
}

// AddInvitationUsers adds the "invitation_users" edges to the InvitationUser entity.
func (ic *InvitationCreate) AddInvitationUsers(i ...*InvitationUser) *InvitationCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddInvitationUserIDs(ids...)
}

// AddInvitationFriendGroupIDs adds the "invitation_friend_groups" edge to the InvitationFriendGroup entity by IDs.
func (ic *InvitationCreate) AddInvitationFriendGroupIDs(ids ...uuid.UUID) *InvitationCreate {
	ic.mutation.AddInvitationFriendGroupIDs(ids...)
	return ic
}

// AddInvitationFriendGroups adds the "invitation_friend_groups" edges to the InvitationFriendGroup entity.
func (ic *InvitationCreate) AddInvitationFriendGroups(i ...*InvitationFriendGroup) *InvitationCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddInvitationFriendGroupIDs(ids...)
}

// AddInvitationAcceptanceIDs adds the "invitation_acceptances" edge to the InvitationAcceptance entity by IDs.
func (ic *InvitationCreate) AddInvitationAcceptanceIDs(ids ...uuid.UUID) *InvitationCreate {
	ic.mutation.AddInvitationAcceptanceIDs(ids...)
	return ic
}

// AddInvitationAcceptances adds the "invitation_acceptances" edges to the InvitationAcceptance entity.
func (ic *InvitationCreate) AddInvitationAcceptances(i ...*InvitationAcceptance) *InvitationCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddInvitationAcceptanceIDs(ids...)
}

// AddInvitationDenialIDs adds the "invitation_denials" edge to the InvitationDenial entity by IDs.
func (ic *InvitationCreate) AddInvitationDenialIDs(ids ...uuid.UUID) *InvitationCreate {
	ic.mutation.AddInvitationDenialIDs(ids...)
	return ic
}

// AddInvitationDenials adds the "invitation_denials" edges to the InvitationDenial entity.
func (ic *InvitationCreate) AddInvitationDenials(i ...*InvitationDenial) *InvitationCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddInvitationDenialIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (ic *InvitationCreate) Mutation() *InvitationMutation {
	return ic.mutation
}

// Save creates the Invitation in the database.
func (ic *InvitationCreate) Save(ctx context.Context) (*Invitation, error) {
	var (
		err  error
		node *Invitation
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvitationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Invitation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InvitationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvitationCreate) SaveX(ctx context.Context) *Invitation {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvitationCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvitationCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InvitationCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := invitation.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := invitation.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := invitation.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvitationCreate) check() error {
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Invitation.user_id"`)}
	}
	if _, ok := ic.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Invitation.location"`)}
	}
	if _, ok := ic.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Invitation.comment"`)}
	}
	if _, ok := ic.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "Invitation.starts_at"`)}
	}
	if _, ok := ic.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Invitation.expires_at"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Invitation.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Invitation.updated_at"`)}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Invitation.user"`)}
	}
	return nil
}

func (ic *InvitationCreate) sqlSave(ctx context.Context) (*Invitation, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ic *InvitationCreate) createSpec() (*Invitation, *sqlgraph.CreateSpec) {
	var (
		_node = &Invitation{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invitation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitation.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Location(); ok {
		_spec.SetField(invitation.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ic.mutation.Comment(); ok {
		_spec.SetField(invitation.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := ic.mutation.StartsAt(); ok {
		_spec.SetField(invitation.FieldStartsAt, field.TypeTime, value)
		_node.StartsAt = value
	}
	if value, ok := ic.mutation.ExpiresAt(); ok {
		_spec.SetField(invitation.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(invitation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invitation.UserTable,
			Columns: []string{invitation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InvitationUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invitation.InvitationUsersTable,
			Columns: []string{invitation.InvitationUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InvitationFriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invitation.InvitationFriendGroupsTable,
			Columns: []string{invitation.InvitationFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationfriendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InvitationAcceptancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invitation.InvitationAcceptancesTable,
			Columns: []string{invitation.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.InvitationDenialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invitation.InvitationDenialsTable,
			Columns: []string{invitation.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invitation.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ic *InvitationCreate) OnConflict(opts ...sql.ConflictOption) *InvitationUpsertOne {
	ic.conflict = opts
	return &InvitationUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InvitationCreate) OnConflictColumns(columns ...string) *InvitationUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InvitationUpsertOne{
		create: ic,
	}
}

type (
	// InvitationUpsertOne is the builder for "upsert"-ing
	//  one Invitation node.
	InvitationUpsertOne struct {
		create *InvitationCreate
	}

	// InvitationUpsert is the "OnConflict" setter.
	InvitationUpsert struct {
		*sql.UpdateSet
	}
)

// SetLocation sets the "location" field.
func (u *InvitationUpsert) SetLocation(v string) *InvitationUpsert {
	u.Set(invitation.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateLocation() *InvitationUpsert {
	u.SetExcluded(invitation.FieldLocation)
	return u
}

// SetComment sets the "comment" field.
func (u *InvitationUpsert) SetComment(v string) *InvitationUpsert {
	u.Set(invitation.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateComment() *InvitationUpsert {
	u.SetExcluded(invitation.FieldComment)
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *InvitationUpsert) SetStartsAt(v time.Time) *InvitationUpsert {
	u.Set(invitation.FieldStartsAt, v)
	return u
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateStartsAt() *InvitationUpsert {
	u.SetExcluded(invitation.FieldStartsAt)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *InvitationUpsert) SetExpiresAt(v time.Time) *InvitationUpsert {
	u.Set(invitation.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateExpiresAt() *InvitationUpsert {
	u.SetExcluded(invitation.FieldExpiresAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsert) SetUpdatedAt(v time.Time) *InvitationUpsert {
	u.Set(invitation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsert) UpdateUpdatedAt() *InvitationUpsert {
	u.SetExcluded(invitation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationUpsertOne) UpdateNewValues() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invitation.FieldID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(invitation.FieldUserID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invitation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvitationUpsertOne) Ignore() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationUpsertOne) DoNothing() *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCreate.OnConflict
// documentation for more info.
func (u *InvitationUpsertOne) Update(set func(*InvitationUpsert)) *InvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetLocation sets the "location" field.
func (u *InvitationUpsertOne) SetLocation(v string) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateLocation() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateLocation()
	})
}

// SetComment sets the "comment" field.
func (u *InvitationUpsertOne) SetComment(v string) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateComment() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateComment()
	})
}

// SetStartsAt sets the "starts_at" field.
func (u *InvitationUpsertOne) SetStartsAt(v time.Time) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateStartsAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateStartsAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *InvitationUpsertOne) SetExpiresAt(v time.Time) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateExpiresAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsertOne) SetUpdatedAt(v time.Time) *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsertOne) UpdateUpdatedAt() *InvitationUpsertOne {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InvitationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvitationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InvitationUpsertOne.ID is not supported by MySQL driver. Use InvitationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvitationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvitationCreateBulk is the builder for creating many Invitation entities in bulk.
type InvitationCreateBulk struct {
	config
	builders []*InvitationCreate
	conflict []sql.ConflictOption
}

// Save creates the Invitation entities in the database.
func (icb *InvitationCreateBulk) Save(ctx context.Context) ([]*Invitation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invitation, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvitationCreateBulk) SaveX(ctx context.Context) []*Invitation {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvitationCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvitationCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invitation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (icb *InvitationCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvitationUpsertBulk {
	icb.conflict = opts
	return &InvitationUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InvitationCreateBulk) OnConflictColumns(columns ...string) *InvitationUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InvitationUpsertBulk{
		create: icb,
	}
}

// InvitationUpsertBulk is the builder for "upsert"-ing
// a bulk of Invitation nodes.
type InvitationUpsertBulk struct {
	create *InvitationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationUpsertBulk) UpdateNewValues() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invitation.FieldID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(invitation.FieldUserID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invitation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invitation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvitationUpsertBulk) Ignore() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationUpsertBulk) DoNothing() *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationCreateBulk.OnConflict
// documentation for more info.
func (u *InvitationUpsertBulk) Update(set func(*InvitationUpsert)) *InvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetLocation sets the "location" field.
func (u *InvitationUpsertBulk) SetLocation(v string) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateLocation() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateLocation()
	})
}

// SetComment sets the "comment" field.
func (u *InvitationUpsertBulk) SetComment(v string) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateComment() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateComment()
	})
}

// SetStartsAt sets the "starts_at" field.
func (u *InvitationUpsertBulk) SetStartsAt(v time.Time) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateStartsAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateStartsAt()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *InvitationUpsertBulk) SetExpiresAt(v time.Time) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateExpiresAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationUpsertBulk) SetUpdatedAt(v time.Time) *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationUpsertBulk) UpdateUpdatedAt() *InvitationUpsertBulk {
	return u.Update(func(s *InvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InvitationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvitationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

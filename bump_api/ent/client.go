// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/migrate"

	"github.com/k-yomo/bump/bump_api/ent/friendgroup"
	"github.com/k-yomo/bump/bump_api/ent/friendship"
	"github.com/k-yomo/bump/bump_api/ent/friendshiprequest"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/userfriendgroup"
	"github.com/k-yomo/bump/bump_api/ent/userprofile"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FriendGroup is the client for interacting with the FriendGroup builders.
	FriendGroup *FriendGroupClient
	// Friendship is the client for interacting with the Friendship builders.
	Friendship *FriendshipClient
	// FriendshipRequest is the client for interacting with the FriendshipRequest builders.
	FriendshipRequest *FriendshipRequestClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserFriendGroup is the client for interacting with the UserFriendGroup builders.
	UserFriendGroup *UserFriendGroupClient
	// UserProfile is the client for interacting with the UserProfile builders.
	UserProfile *UserProfileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FriendGroup = NewFriendGroupClient(c.config)
	c.Friendship = NewFriendshipClient(c.config)
	c.FriendshipRequest = NewFriendshipRequestClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserFriendGroup = NewUserFriendGroupClient(c.config)
	c.UserProfile = NewUserProfileClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		FriendGroup:       NewFriendGroupClient(cfg),
		Friendship:        NewFriendshipClient(cfg),
		FriendshipRequest: NewFriendshipRequestClient(cfg),
		User:              NewUserClient(cfg),
		UserFriendGroup:   NewUserFriendGroupClient(cfg),
		UserProfile:       NewUserProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		FriendGroup:       NewFriendGroupClient(cfg),
		Friendship:        NewFriendshipClient(cfg),
		FriendshipRequest: NewFriendshipRequestClient(cfg),
		User:              NewUserClient(cfg),
		UserFriendGroup:   NewUserFriendGroupClient(cfg),
		UserProfile:       NewUserProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FriendGroup.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FriendGroup.Use(hooks...)
	c.Friendship.Use(hooks...)
	c.FriendshipRequest.Use(hooks...)
	c.User.Use(hooks...)
	c.UserFriendGroup.Use(hooks...)
	c.UserProfile.Use(hooks...)
}

// FriendGroupClient is a client for the FriendGroup schema.
type FriendGroupClient struct {
	config
}

// NewFriendGroupClient returns a client for the FriendGroup from the given config.
func NewFriendGroupClient(c config) *FriendGroupClient {
	return &FriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendgroup.Hooks(f(g(h())))`.
func (c *FriendGroupClient) Use(hooks ...Hook) {
	c.hooks.FriendGroup = append(c.hooks.FriendGroup, hooks...)
}

// Create returns a builder for creating a FriendGroup entity.
func (c *FriendGroupClient) Create() *FriendGroupCreate {
	mutation := newFriendGroupMutation(c.config, OpCreate)
	return &FriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendGroup entities.
func (c *FriendGroupClient) CreateBulk(builders ...*FriendGroupCreate) *FriendGroupCreateBulk {
	return &FriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendGroup.
func (c *FriendGroupClient) Update() *FriendGroupUpdate {
	mutation := newFriendGroupMutation(c.config, OpUpdate)
	return &FriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendGroupClient) UpdateOne(fg *FriendGroup) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroup(fg))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendGroupClient) UpdateOneID(id uuid.UUID) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroupID(id))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendGroup.
func (c *FriendGroupClient) Delete() *FriendGroupDelete {
	mutation := newFriendGroupMutation(c.config, OpDelete)
	return &FriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendGroupClient) DeleteOne(fg *FriendGroup) *FriendGroupDeleteOne {
	return c.DeleteOneID(fg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendGroupClient) DeleteOneID(id uuid.UUID) *FriendGroupDeleteOne {
	builder := c.Delete().Where(friendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendGroupDeleteOne{builder}
}

// Query returns a query builder for FriendGroup.
func (c *FriendGroupClient) Query() *FriendGroupQuery {
	return &FriendGroupQuery{
		config: c.config,
	}
}

// Get returns a FriendGroup entity by its id.
func (c *FriendGroupClient) Get(ctx context.Context, id uuid.UUID) (*FriendGroup, error) {
	return c.Query().Where(friendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendGroupClient) GetX(ctx context.Context, id uuid.UUID) *FriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a FriendGroup.
func (c *FriendGroupClient) QueryUser(fg *FriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendgroup.UserTable, friendgroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUsers queries the friend_users edge of a FriendGroup.
func (c *FriendGroupClient) QueryFriendUsers(fg *FriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, friendgroup.FriendUsersTable, friendgroup.FriendUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFriendGroups queries the user_friend_groups edge of a FriendGroup.
func (c *FriendGroupClient) QueryUserFriendGroups(fg *FriendGroup) *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, friendgroup.UserFriendGroupsTable, friendgroup.UserFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendGroupClient) Hooks() []Hook {
	return c.hooks.FriendGroup
}

// FriendshipClient is a client for the Friendship schema.
type FriendshipClient struct {
	config
}

// NewFriendshipClient returns a client for the Friendship from the given config.
func NewFriendshipClient(c config) *FriendshipClient {
	return &FriendshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendship.Hooks(f(g(h())))`.
func (c *FriendshipClient) Use(hooks ...Hook) {
	c.hooks.Friendship = append(c.hooks.Friendship, hooks...)
}

// Create returns a builder for creating a Friendship entity.
func (c *FriendshipClient) Create() *FriendshipCreate {
	mutation := newFriendshipMutation(c.config, OpCreate)
	return &FriendshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Friendship entities.
func (c *FriendshipClient) CreateBulk(builders ...*FriendshipCreate) *FriendshipCreateBulk {
	return &FriendshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Friendship.
func (c *FriendshipClient) Update() *FriendshipUpdate {
	mutation := newFriendshipMutation(c.config, OpUpdate)
	return &FriendshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipClient) UpdateOne(f *Friendship) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendship(f))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipClient) UpdateOneID(id uuid.UUID) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendshipID(id))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Friendship.
func (c *FriendshipClient) Delete() *FriendshipDelete {
	mutation := newFriendshipMutation(c.config, OpDelete)
	return &FriendshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipClient) DeleteOne(f *Friendship) *FriendshipDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipClient) DeleteOneID(id uuid.UUID) *FriendshipDeleteOne {
	builder := c.Delete().Where(friendship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipDeleteOne{builder}
}

// Query returns a query builder for Friendship.
func (c *FriendshipClient) Query() *FriendshipQuery {
	return &FriendshipQuery{
		config: c.config,
	}
}

// Get returns a Friendship entity by its id.
func (c *FriendshipClient) Get(ctx context.Context, id uuid.UUID) (*Friendship, error) {
	return c.Query().Where(friendship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipClient) GetX(ctx context.Context, id uuid.UUID) *Friendship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Friendship.
func (c *FriendshipClient) QueryUser(f *Friendship) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendship.UserTable, friendship.UserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUser queries the friend_user edge of a Friendship.
func (c *FriendshipClient) QueryFriendUser(f *Friendship) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendship.FriendUserTable, friendship.FriendUserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipClient) Hooks() []Hook {
	return c.hooks.Friendship
}

// FriendshipRequestClient is a client for the FriendshipRequest schema.
type FriendshipRequestClient struct {
	config
}

// NewFriendshipRequestClient returns a client for the FriendshipRequest from the given config.
func NewFriendshipRequestClient(c config) *FriendshipRequestClient {
	return &FriendshipRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendshiprequest.Hooks(f(g(h())))`.
func (c *FriendshipRequestClient) Use(hooks ...Hook) {
	c.hooks.FriendshipRequest = append(c.hooks.FriendshipRequest, hooks...)
}

// Create returns a builder for creating a FriendshipRequest entity.
func (c *FriendshipRequestClient) Create() *FriendshipRequestCreate {
	mutation := newFriendshipRequestMutation(c.config, OpCreate)
	return &FriendshipRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendshipRequest entities.
func (c *FriendshipRequestClient) CreateBulk(builders ...*FriendshipRequestCreate) *FriendshipRequestCreateBulk {
	return &FriendshipRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendshipRequest.
func (c *FriendshipRequestClient) Update() *FriendshipRequestUpdate {
	mutation := newFriendshipRequestMutation(c.config, OpUpdate)
	return &FriendshipRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipRequestClient) UpdateOne(fr *FriendshipRequest) *FriendshipRequestUpdateOne {
	mutation := newFriendshipRequestMutation(c.config, OpUpdateOne, withFriendshipRequest(fr))
	return &FriendshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipRequestClient) UpdateOneID(id uuid.UUID) *FriendshipRequestUpdateOne {
	mutation := newFriendshipRequestMutation(c.config, OpUpdateOne, withFriendshipRequestID(id))
	return &FriendshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendshipRequest.
func (c *FriendshipRequestClient) Delete() *FriendshipRequestDelete {
	mutation := newFriendshipRequestMutation(c.config, OpDelete)
	return &FriendshipRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipRequestClient) DeleteOne(fr *FriendshipRequest) *FriendshipRequestDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipRequestClient) DeleteOneID(id uuid.UUID) *FriendshipRequestDeleteOne {
	builder := c.Delete().Where(friendshiprequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipRequestDeleteOne{builder}
}

// Query returns a query builder for FriendshipRequest.
func (c *FriendshipRequestClient) Query() *FriendshipRequestQuery {
	return &FriendshipRequestQuery{
		config: c.config,
	}
}

// Get returns a FriendshipRequest entity by its id.
func (c *FriendshipRequestClient) Get(ctx context.Context, id uuid.UUID) (*FriendshipRequest, error) {
	return c.Query().Where(friendshiprequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipRequestClient) GetX(ctx context.Context, id uuid.UUID) *FriendshipRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromUsers queries the from_users edge of a FriendshipRequest.
func (c *FriendshipRequestClient) QueryFromUsers(fr *FriendshipRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendshiprequest.Table, friendshiprequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendshiprequest.FromUsersTable, friendshiprequest.FromUsersColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUsers queries the to_users edge of a FriendshipRequest.
func (c *FriendshipRequestClient) QueryToUsers(fr *FriendshipRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendshiprequest.Table, friendshiprequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendshiprequest.ToUsersTable, friendshiprequest.ToUsersColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipRequestClient) Hooks() []Hook {
	return c.hooks.FriendshipRequest
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserProfile queries the user_profile edge of a User.
func (c *UserClient) QueryUserProfile(u *User) *UserProfileQuery {
	query := &UserProfileQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.UserProfileTable, user.UserProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUsers queries the friend_users edge of a User.
func (c *UserClient) QueryFriendUsers(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FriendUsersTable, user.FriendUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroups queries the friend_groups edge of a User.
func (c *UserClient) QueryFriendGroups(u *User) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendGroupsTable, user.FriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongingFriendGroups queries the belonging_friend_groups edge of a User.
func (c *UserClient) QueryBelongingFriendGroups(u *User) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.BelongingFriendGroupsTable, user.BelongingFriendGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendships queries the friendships edge of a User.
func (c *UserClient) QueryFriendships(u *User) *FriendshipQuery {
	query := &FriendshipQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendshipsTable, user.FriendshipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFriendGroups queries the user_friend_groups edge of a User.
func (c *UserClient) QueryUserFriendGroups(u *User) *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserFriendGroupsTable, user.UserFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserFriendGroupClient is a client for the UserFriendGroup schema.
type UserFriendGroupClient struct {
	config
}

// NewUserFriendGroupClient returns a client for the UserFriendGroup from the given config.
func NewUserFriendGroupClient(c config) *UserFriendGroupClient {
	return &UserFriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfriendgroup.Hooks(f(g(h())))`.
func (c *UserFriendGroupClient) Use(hooks ...Hook) {
	c.hooks.UserFriendGroup = append(c.hooks.UserFriendGroup, hooks...)
}

// Create returns a builder for creating a UserFriendGroup entity.
func (c *UserFriendGroupClient) Create() *UserFriendGroupCreate {
	mutation := newUserFriendGroupMutation(c.config, OpCreate)
	return &UserFriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFriendGroup entities.
func (c *UserFriendGroupClient) CreateBulk(builders ...*UserFriendGroupCreate) *UserFriendGroupCreateBulk {
	return &UserFriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFriendGroup.
func (c *UserFriendGroupClient) Update() *UserFriendGroupUpdate {
	mutation := newUserFriendGroupMutation(c.config, OpUpdate)
	return &UserFriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFriendGroupClient) UpdateOne(ufg *UserFriendGroup) *UserFriendGroupUpdateOne {
	mutation := newUserFriendGroupMutation(c.config, OpUpdateOne, withUserFriendGroup(ufg))
	return &UserFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFriendGroupClient) UpdateOneID(id uuid.UUID) *UserFriendGroupUpdateOne {
	mutation := newUserFriendGroupMutation(c.config, OpUpdateOne, withUserFriendGroupID(id))
	return &UserFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFriendGroup.
func (c *UserFriendGroupClient) Delete() *UserFriendGroupDelete {
	mutation := newUserFriendGroupMutation(c.config, OpDelete)
	return &UserFriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFriendGroupClient) DeleteOne(ufg *UserFriendGroup) *UserFriendGroupDeleteOne {
	return c.DeleteOneID(ufg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFriendGroupClient) DeleteOneID(id uuid.UUID) *UserFriendGroupDeleteOne {
	builder := c.Delete().Where(userfriendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFriendGroupDeleteOne{builder}
}

// Query returns a query builder for UserFriendGroup.
func (c *UserFriendGroupClient) Query() *UserFriendGroupQuery {
	return &UserFriendGroupQuery{
		config: c.config,
	}
}

// Get returns a UserFriendGroup entity by its id.
func (c *UserFriendGroupClient) Get(ctx context.Context, id uuid.UUID) (*UserFriendGroup, error) {
	return c.Query().Where(userfriendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFriendGroupClient) GetX(ctx context.Context, id uuid.UUID) *UserFriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFriendGroup queries the friend_group edge of a UserFriendGroup.
func (c *UserFriendGroupClient) QueryFriendGroup(ufg *UserFriendGroup) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfriendgroup.Table, userfriendgroup.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfriendgroup.FriendGroupTable, userfriendgroup.FriendGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ufg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserFriendGroup.
func (c *UserFriendGroupClient) QueryUser(ufg *UserFriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfriendgroup.Table, userfriendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfriendgroup.UserTable, userfriendgroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ufg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserFriendGroupClient) Hooks() []Hook {
	return c.hooks.UserFriendGroup
}

// UserProfileClient is a client for the UserProfile schema.
type UserProfileClient struct {
	config
}

// NewUserProfileClient returns a client for the UserProfile from the given config.
func NewUserProfileClient(c config) *UserProfileClient {
	return &UserProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprofile.Hooks(f(g(h())))`.
func (c *UserProfileClient) Use(hooks ...Hook) {
	c.hooks.UserProfile = append(c.hooks.UserProfile, hooks...)
}

// Create returns a builder for creating a UserProfile entity.
func (c *UserProfileClient) Create() *UserProfileCreate {
	mutation := newUserProfileMutation(c.config, OpCreate)
	return &UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProfile entities.
func (c *UserProfileClient) CreateBulk(builders ...*UserProfileCreate) *UserProfileCreateBulk {
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProfile.
func (c *UserProfileClient) Update() *UserProfileUpdate {
	mutation := newUserProfileMutation(c.config, OpUpdate)
	return &UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProfileClient) UpdateOne(up *UserProfile) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfile(up))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProfileClient) UpdateOneID(id uuid.UUID) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfileID(id))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProfile.
func (c *UserProfileClient) Delete() *UserProfileDelete {
	mutation := newUserProfileMutation(c.config, OpDelete)
	return &UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProfileClient) DeleteOne(up *UserProfile) *UserProfileDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProfileClient) DeleteOneID(id uuid.UUID) *UserProfileDeleteOne {
	builder := c.Delete().Where(userprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProfileDeleteOne{builder}
}

// Query returns a query builder for UserProfile.
func (c *UserProfileClient) Query() *UserProfileQuery {
	return &UserProfileQuery{
		config: c.config,
	}
}

// Get returns a UserProfile entity by its id.
func (c *UserProfileClient) Get(ctx context.Context, id uuid.UUID) (*UserProfile, error) {
	return c.Query().Where(userprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProfileClient) GetX(ctx context.Context, id uuid.UUID) *UserProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserProfile.
func (c *UserProfileClient) QueryUser(up *UserProfile) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userprofile.UserTable, userprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserProfileClient) Hooks() []Hook {
	return c.hooks.UserProfile
}

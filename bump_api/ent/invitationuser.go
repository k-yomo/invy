// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/invitation"
	"github.com/k-yomo/bump/bump_api/ent/invitationuser"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// InvitationUser is the model entity for the InvitationUser schema.
type InvitationUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// InvitationID holds the value of the "invitation_id" field.
	InvitationID uuid.UUID `json:"invitation_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvitationUserQuery when eager-loading is set.
	Edges InvitationUserEdges `json:"edges"`
}

// InvitationUserEdges holds the relations/edges for other nodes in the graph.
type InvitationUserEdges struct {
	// Invitation holds the value of the invitation edge.
	Invitation *Invitation `json:"invitation,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// InvitationOrErr returns the Invitation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationUserEdges) InvitationOrErr() (*Invitation, error) {
	if e.loadedTypes[0] {
		if e.Invitation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invitation.Label}
		}
		return e.Invitation, nil
	}
	return nil, &NotLoadedError{edge: "invitation"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationUserEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvitationUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invitationuser.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case invitationuser.FieldID, invitationuser.FieldInvitationID, invitationuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvitationUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvitationUser fields.
func (iu *InvitationUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invitationuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				iu.ID = *value
			}
		case invitationuser.FieldInvitationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_id", values[i])
			} else if value != nil {
				iu.InvitationID = *value
			}
		case invitationuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				iu.UserID = *value
			}
		case invitationuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iu.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryInvitation queries the "invitation" edge of the InvitationUser entity.
func (iu *InvitationUser) QueryInvitation() *InvitationQuery {
	return (&InvitationUserClient{config: iu.config}).QueryInvitation(iu)
}

// QueryUser queries the "user" edge of the InvitationUser entity.
func (iu *InvitationUser) QueryUser() *UserQuery {
	return (&InvitationUserClient{config: iu.config}).QueryUser(iu)
}

// Update returns a builder for updating this InvitationUser.
// Note that you need to call InvitationUser.Unwrap() before calling this method if this InvitationUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (iu *InvitationUser) Update() *InvitationUserUpdateOne {
	return (&InvitationUserClient{config: iu.config}).UpdateOne(iu)
}

// Unwrap unwraps the InvitationUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iu *InvitationUser) Unwrap() *InvitationUser {
	_tx, ok := iu.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvitationUser is not a transactional entity")
	}
	iu.config.driver = _tx.drv
	return iu
}

// String implements the fmt.Stringer.
func (iu *InvitationUser) String() string {
	var builder strings.Builder
	builder.WriteString("InvitationUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iu.ID))
	builder.WriteString("invitation_id=")
	builder.WriteString(fmt.Sprintf("%v", iu.InvitationID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", iu.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(iu.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InvitationUsers is a parsable slice of InvitationUser.
type InvitationUsers []*InvitationUser

func (iu InvitationUsers) config(cfg config) {
	for _i := range iu {
		iu[_i].config = cfg
	}
}

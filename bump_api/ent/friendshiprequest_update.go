// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/bump/bump_api/ent/friendshiprequest"
	"github.com/k-yomo/bump/bump_api/ent/predicate"
)

// FriendshipRequestUpdate is the builder for updating FriendshipRequest entities.
type FriendshipRequestUpdate struct {
	config
	hooks    []Hook
	mutation *FriendshipRequestMutation
}

// Where appends a list predicates to the FriendshipRequestUpdate builder.
func (fru *FriendshipRequestUpdate) Where(ps ...predicate.FriendshipRequest) *FriendshipRequestUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// Mutation returns the FriendshipRequestMutation object of the builder.
func (fru *FriendshipRequestUpdate) Mutation() *FriendshipRequestMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FriendshipRequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fru.hooks) == 0 {
		if err = fru.check(); err != nil {
			return 0, err
		}
		affected, err = fru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fru.check(); err != nil {
				return 0, err
			}
			fru.mutation = mutation
			affected, err = fru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fru.hooks) - 1; i >= 0; i-- {
			if fru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FriendshipRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FriendshipRequestUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FriendshipRequestUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FriendshipRequestUpdate) check() error {
	if _, ok := fru.mutation.FromUsersID(); fru.mutation.FromUsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendshipRequest.from_users"`)
	}
	if _, ok := fru.mutation.ToUsersID(); fru.mutation.ToUsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendshipRequest.to_users"`)
	}
	return nil
}

func (fru *FriendshipRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friendshiprequest.Table,
			Columns: friendshiprequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: friendshiprequest.FieldID,
			},
		},
	}
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendshiprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FriendshipRequestUpdateOne is the builder for updating a single FriendshipRequest entity.
type FriendshipRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendshipRequestMutation
}

// Mutation returns the FriendshipRequestMutation object of the builder.
func (fruo *FriendshipRequestUpdateOne) Mutation() *FriendshipRequestMutation {
	return fruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FriendshipRequestUpdateOne) Select(field string, fields ...string) *FriendshipRequestUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FriendshipRequest entity.
func (fruo *FriendshipRequestUpdateOne) Save(ctx context.Context) (*FriendshipRequest, error) {
	var (
		err  error
		node *FriendshipRequest
	)
	if len(fruo.hooks) == 0 {
		if err = fruo.check(); err != nil {
			return nil, err
		}
		node, err = fruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fruo.check(); err != nil {
				return nil, err
			}
			fruo.mutation = mutation
			node, err = fruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fruo.hooks) - 1; i >= 0; i-- {
			if fruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FriendshipRequest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FriendshipRequestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FriendshipRequestUpdateOne) SaveX(ctx context.Context) *FriendshipRequest {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FriendshipRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FriendshipRequestUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FriendshipRequestUpdateOne) check() error {
	if _, ok := fruo.mutation.FromUsersID(); fruo.mutation.FromUsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendshipRequest.from_users"`)
	}
	if _, ok := fruo.mutation.ToUsersID(); fruo.mutation.ToUsersCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendshipRequest.to_users"`)
	}
	return nil
}

func (fruo *FriendshipRequestUpdateOne) sqlSave(ctx context.Context) (_node *FriendshipRequest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friendshiprequest.Table,
			Columns: friendshiprequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: friendshiprequest.FieldID,
			},
		},
	}
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FriendshipRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendshiprequest.FieldID)
		for _, f := range fields {
			if !friendshiprequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friendshiprequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &FriendshipRequest{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendshiprequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

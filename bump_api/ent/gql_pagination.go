// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/friendship"
	"github.com/k-yomo/bump/bump_api/ent/friendshiprequest"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/userprofile"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// FriendshipEdge is the edge representation of Friendship.
type FriendshipEdge struct {
	Node   *Friendship `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// FriendshipConnection is the connection containing edges to Friendship.
type FriendshipConnection struct {
	Edges      []*FriendshipEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *FriendshipConnection) build(nodes []*Friendship, pager *friendshipPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Friendship
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Friendship {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Friendship {
			return nodes[i]
		}
	}
	c.Edges = make([]*FriendshipEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FriendshipEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FriendshipPaginateOption enables pagination customization.
type FriendshipPaginateOption func(*friendshipPager) error

// WithFriendshipOrder configures pagination ordering.
func WithFriendshipOrder(order *FriendshipOrder) FriendshipPaginateOption {
	if order == nil {
		order = DefaultFriendshipOrder
	}
	o := *order
	return func(pager *friendshipPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFriendshipOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFriendshipFilter configures pagination filter.
func WithFriendshipFilter(filter func(*FriendshipQuery) (*FriendshipQuery, error)) FriendshipPaginateOption {
	return func(pager *friendshipPager) error {
		if filter == nil {
			return errors.New("FriendshipQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type friendshipPager struct {
	order  *FriendshipOrder
	filter func(*FriendshipQuery) (*FriendshipQuery, error)
}

func newFriendshipPager(opts []FriendshipPaginateOption) (*friendshipPager, error) {
	pager := &friendshipPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFriendshipOrder
	}
	return pager, nil
}

func (p *friendshipPager) applyFilter(query *FriendshipQuery) (*FriendshipQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *friendshipPager) toCursor(f *Friendship) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *friendshipPager) applyCursors(query *FriendshipQuery, after, before *Cursor) *FriendshipQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFriendshipOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *friendshipPager) applyOrder(query *FriendshipQuery, reverse bool) *FriendshipQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFriendshipOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFriendshipOrder.Field.field))
	}
	return query
}

func (p *friendshipPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFriendshipOrder.Field {
			b.Comma().Ident(DefaultFriendshipOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Friendship.
func (f *FriendshipQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FriendshipPaginateOption,
) (*FriendshipConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFriendshipPager(opts)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FriendshipConnection{Edges: []*FriendshipEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	f = pager.applyCursors(f, after, before)
	f = pager.applyOrder(f, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FriendshipOrderFieldCreatedAt orders Friendship by created_at.
	FriendshipOrderFieldCreatedAt = &FriendshipOrderField{
		field: friendship.FieldCreatedAt,
		toCursor: func(f *Friendship) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FriendshipOrderField) String() string {
	var str string
	switch f.field {
	case friendship.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FriendshipOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FriendshipOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FriendshipOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *FriendshipOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid FriendshipOrderField", str)
	}
	return nil
}

// FriendshipOrderField defines the ordering field of Friendship.
type FriendshipOrderField struct {
	field    string
	toCursor func(*Friendship) Cursor
}

// FriendshipOrder defines the ordering of Friendship.
type FriendshipOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *FriendshipOrderField `json:"field"`
}

// DefaultFriendshipOrder is the default ordering of Friendship.
var DefaultFriendshipOrder = &FriendshipOrder{
	Direction: OrderDirectionAsc,
	Field: &FriendshipOrderField{
		field: friendship.FieldID,
		toCursor: func(f *Friendship) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Friendship into FriendshipEdge.
func (f *Friendship) ToEdge(order *FriendshipOrder) *FriendshipEdge {
	if order == nil {
		order = DefaultFriendshipOrder
	}
	return &FriendshipEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// FriendshipRequestEdge is the edge representation of FriendshipRequest.
type FriendshipRequestEdge struct {
	Node   *FriendshipRequest `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// FriendshipRequestConnection is the connection containing edges to FriendshipRequest.
type FriendshipRequestConnection struct {
	Edges      []*FriendshipRequestEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *FriendshipRequestConnection) build(nodes []*FriendshipRequest, pager *friendshiprequestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *FriendshipRequest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FriendshipRequest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FriendshipRequest {
			return nodes[i]
		}
	}
	c.Edges = make([]*FriendshipRequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FriendshipRequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FriendshipRequestPaginateOption enables pagination customization.
type FriendshipRequestPaginateOption func(*friendshiprequestPager) error

// WithFriendshipRequestOrder configures pagination ordering.
func WithFriendshipRequestOrder(order *FriendshipRequestOrder) FriendshipRequestPaginateOption {
	if order == nil {
		order = DefaultFriendshipRequestOrder
	}
	o := *order
	return func(pager *friendshiprequestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFriendshipRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFriendshipRequestFilter configures pagination filter.
func WithFriendshipRequestFilter(filter func(*FriendshipRequestQuery) (*FriendshipRequestQuery, error)) FriendshipRequestPaginateOption {
	return func(pager *friendshiprequestPager) error {
		if filter == nil {
			return errors.New("FriendshipRequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type friendshiprequestPager struct {
	order  *FriendshipRequestOrder
	filter func(*FriendshipRequestQuery) (*FriendshipRequestQuery, error)
}

func newFriendshipRequestPager(opts []FriendshipRequestPaginateOption) (*friendshiprequestPager, error) {
	pager := &friendshiprequestPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFriendshipRequestOrder
	}
	return pager, nil
}

func (p *friendshiprequestPager) applyFilter(query *FriendshipRequestQuery) (*FriendshipRequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *friendshiprequestPager) toCursor(fr *FriendshipRequest) Cursor {
	return p.order.Field.toCursor(fr)
}

func (p *friendshiprequestPager) applyCursors(query *FriendshipRequestQuery, after, before *Cursor) *FriendshipRequestQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFriendshipRequestOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *friendshiprequestPager) applyOrder(query *FriendshipRequestQuery, reverse bool) *FriendshipRequestQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFriendshipRequestOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFriendshipRequestOrder.Field.field))
	}
	return query
}

func (p *friendshiprequestPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFriendshipRequestOrder.Field {
			b.Comma().Ident(DefaultFriendshipRequestOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to FriendshipRequest.
func (fr *FriendshipRequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FriendshipRequestPaginateOption,
) (*FriendshipRequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFriendshipRequestPager(opts)
	if err != nil {
		return nil, err
	}
	if fr, err = pager.applyFilter(fr); err != nil {
		return nil, err
	}
	conn := &FriendshipRequestConnection{Edges: []*FriendshipRequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = fr.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	fr = pager.applyCursors(fr, after, before)
	fr = pager.applyOrder(fr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		fr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := fr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := fr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FriendshipRequestOrderField defines the ordering field of FriendshipRequest.
type FriendshipRequestOrderField struct {
	field    string
	toCursor func(*FriendshipRequest) Cursor
}

// FriendshipRequestOrder defines the ordering of FriendshipRequest.
type FriendshipRequestOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *FriendshipRequestOrderField `json:"field"`
}

// DefaultFriendshipRequestOrder is the default ordering of FriendshipRequest.
var DefaultFriendshipRequestOrder = &FriendshipRequestOrder{
	Direction: OrderDirectionAsc,
	Field: &FriendshipRequestOrderField{
		field: friendshiprequest.FieldID,
		toCursor: func(fr *FriendshipRequest) Cursor {
			return Cursor{ID: fr.ID}
		},
	},
}

// ToEdge converts FriendshipRequest into FriendshipRequestEdge.
func (fr *FriendshipRequest) ToEdge(order *FriendshipRequestOrder) *FriendshipRequestEdge {
	if order == nil {
		order = DefaultFriendshipRequestOrder
	}
	return &FriendshipRequestEdge{
		Node:   fr,
		Cursor: order.Field.toCursor(fr),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserProfileEdge is the edge representation of UserProfile.
type UserProfileEdge struct {
	Node   *UserProfile `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// UserProfileConnection is the connection containing edges to UserProfile.
type UserProfileConnection struct {
	Edges      []*UserProfileEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *UserProfileConnection) build(nodes []*UserProfile, pager *userprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserProfilePaginateOption enables pagination customization.
type UserProfilePaginateOption func(*userprofilePager) error

// WithUserProfileOrder configures pagination ordering.
func WithUserProfileOrder(order *UserProfileOrder) UserProfilePaginateOption {
	if order == nil {
		order = DefaultUserProfileOrder
	}
	o := *order
	return func(pager *userprofilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserProfileFilter configures pagination filter.
func WithUserProfileFilter(filter func(*UserProfileQuery) (*UserProfileQuery, error)) UserProfilePaginateOption {
	return func(pager *userprofilePager) error {
		if filter == nil {
			return errors.New("UserProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userprofilePager struct {
	order  *UserProfileOrder
	filter func(*UserProfileQuery) (*UserProfileQuery, error)
}

func newUserProfilePager(opts []UserProfilePaginateOption) (*userprofilePager, error) {
	pager := &userprofilePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserProfileOrder
	}
	return pager, nil
}

func (p *userprofilePager) applyFilter(query *UserProfileQuery) (*UserProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userprofilePager) toCursor(up *UserProfile) Cursor {
	return p.order.Field.toCursor(up)
}

func (p *userprofilePager) applyCursors(query *UserProfileQuery, after, before *Cursor) *UserProfileQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserProfileOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userprofilePager) applyOrder(query *UserProfileQuery, reverse bool) *UserProfileQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserProfileOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserProfileOrder.Field.field))
	}
	return query
}

func (p *userprofilePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserProfileOrder.Field {
			b.Comma().Ident(DefaultUserProfileOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserProfile.
func (up *UserProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserProfilePaginateOption,
) (*UserProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserProfilePager(opts)
	if err != nil {
		return nil, err
	}
	if up, err = pager.applyFilter(up); err != nil {
		return nil, err
	}
	conn := &UserProfileConnection{Edges: []*UserProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = up.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	up = pager.applyCursors(up, after, before)
	up = pager.applyOrder(up, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		up.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := up.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := up.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserProfileOrderField defines the ordering field of UserProfile.
type UserProfileOrderField struct {
	field    string
	toCursor func(*UserProfile) Cursor
}

// UserProfileOrder defines the ordering of UserProfile.
type UserProfileOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *UserProfileOrderField `json:"field"`
}

// DefaultUserProfileOrder is the default ordering of UserProfile.
var DefaultUserProfileOrder = &UserProfileOrder{
	Direction: OrderDirectionAsc,
	Field: &UserProfileOrderField{
		field: userprofile.FieldID,
		toCursor: func(up *UserProfile) Cursor {
			return Cursor{ID: up.ID}
		},
	},
}

// ToEdge converts UserProfile into UserProfileEdge.
func (up *UserProfile) ToEdge(order *UserProfileOrder) *UserProfileEdge {
	if order == nil {
		order = DefaultUserProfileOrder
	}
	return &UserProfileEdge{
		Node:   up,
		Cursor: order.Field.toCursor(up),
	}
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/lineauth"
	"github.com/k-yomo/bump/bump_api/ent/predicate"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// LineAuthUpdate is the builder for updating LineAuth entities.
type LineAuthUpdate struct {
	config
	hooks    []Hook
	mutation *LineAuthMutation
}

// Where appends a list predicates to the LineAuthUpdate builder.
func (lau *LineAuthUpdate) Where(ps ...predicate.LineAuth) *LineAuthUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lau *LineAuthUpdate) SetUserID(id uuid.UUID) *LineAuthUpdate {
	lau.mutation.SetUserID(id)
	return lau
}

// SetUser sets the "user" edge to the User entity.
func (lau *LineAuthUpdate) SetUser(u *User) *LineAuthUpdate {
	return lau.SetUserID(u.ID)
}

// Mutation returns the LineAuthMutation object of the builder.
func (lau *LineAuthUpdate) Mutation() *LineAuthMutation {
	return lau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lau *LineAuthUpdate) ClearUser() *LineAuthUpdate {
	lau.mutation.ClearUser()
	return lau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LineAuthUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lau.hooks) == 0 {
		if err = lau.check(); err != nil {
			return 0, err
		}
		affected, err = lau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LineAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lau.check(); err != nil {
				return 0, err
			}
			lau.mutation = mutation
			affected, err = lau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lau.hooks) - 1; i >= 0; i-- {
			if lau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LineAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LineAuthUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LineAuthUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LineAuthUpdate) check() error {
	if _, ok := lau.mutation.UserID(); lau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LineAuth.user"`)
	}
	return nil
}

func (lau *LineAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lineauth.Table,
			Columns: lineauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineauth.FieldID,
			},
		},
	}
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lineauth.UserTable,
			Columns: []string{lineauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lineauth.UserTable,
			Columns: []string{lineauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LineAuthUpdateOne is the builder for updating a single LineAuth entity.
type LineAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LineAuthMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lauo *LineAuthUpdateOne) SetUserID(id uuid.UUID) *LineAuthUpdateOne {
	lauo.mutation.SetUserID(id)
	return lauo
}

// SetUser sets the "user" edge to the User entity.
func (lauo *LineAuthUpdateOne) SetUser(u *User) *LineAuthUpdateOne {
	return lauo.SetUserID(u.ID)
}

// Mutation returns the LineAuthMutation object of the builder.
func (lauo *LineAuthUpdateOne) Mutation() *LineAuthMutation {
	return lauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lauo *LineAuthUpdateOne) ClearUser() *LineAuthUpdateOne {
	lauo.mutation.ClearUser()
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LineAuthUpdateOne) Select(field string, fields ...string) *LineAuthUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LineAuth entity.
func (lauo *LineAuthUpdateOne) Save(ctx context.Context) (*LineAuth, error) {
	var (
		err  error
		node *LineAuth
	)
	if len(lauo.hooks) == 0 {
		if err = lauo.check(); err != nil {
			return nil, err
		}
		node, err = lauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LineAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lauo.check(); err != nil {
				return nil, err
			}
			lauo.mutation = mutation
			node, err = lauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lauo.hooks) - 1; i >= 0; i-- {
			if lauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LineAuthUpdateOne) SaveX(ctx context.Context) *LineAuth {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LineAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LineAuthUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LineAuthUpdateOne) check() error {
	if _, ok := lauo.mutation.UserID(); lauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LineAuth.user"`)
	}
	return nil
}

func (lauo *LineAuthUpdateOne) sqlSave(ctx context.Context) (_node *LineAuth, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lineauth.Table,
			Columns: lineauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineauth.FieldID,
			},
		},
	}
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LineAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lineauth.FieldID)
		for _, f := range fields {
			if !lineauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lineauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lineauth.UserTable,
			Columns: []string{lineauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lineauth.UserTable,
			Columns: []string{lineauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LineAuth{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lineauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

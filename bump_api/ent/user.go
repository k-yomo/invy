// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/lineauth"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/userprofile"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserProfile holds the value of the user_profile edge.
	UserProfile *UserProfile `json:"user_profile,omitempty"`
	// LineAuth holds the value of the line_auth edge.
	LineAuth *LineAuth `json:"line_auth,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserProfileOrErr returns the UserProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserProfileOrErr() (*UserProfile, error) {
	if e.loadedTypes[0] {
		if e.UserProfile == nil {
			// The edge user_profile was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userprofile.Label}
		}
		return e.UserProfile, nil
	}
	return nil, &NotLoadedError{edge: "user_profile"}
}

// LineAuthOrErr returns the LineAuth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) LineAuthOrErr() (*LineAuth, error) {
	if e.loadedTypes[1] {
		if e.LineAuth == nil {
			// The edge line_auth was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lineauth.Label}
		}
		return e.LineAuth, nil
	}
	return nil, &NotLoadedError{edge: "line_auth"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUserProfile queries the "user_profile" edge of the User entity.
func (u *User) QueryUserProfile() *UserProfileQuery {
	return (&UserClient{config: u.config}).QueryUserProfile(u)
}

// QueryLineAuth queries the "line_auth" edge of the User entity.
func (u *User) QueryLineAuth() *LineAuthQuery {
	return (&UserClient{config: u.config}).QueryLineAuth(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

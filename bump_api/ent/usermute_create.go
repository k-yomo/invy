// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/usermute"
)

// UserMuteCreate is the builder for creating a UserMute entity.
type UserMuteCreate struct {
	config
	mutation *UserMuteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (umc *UserMuteCreate) SetUserID(u uuid.UUID) *UserMuteCreate {
	umc.mutation.SetUserID(u)
	return umc
}

// SetMuteUserID sets the "mute_user_id" field.
func (umc *UserMuteCreate) SetMuteUserID(u uuid.UUID) *UserMuteCreate {
	umc.mutation.SetMuteUserID(u)
	return umc
}

// SetCreatedAt sets the "created_at" field.
func (umc *UserMuteCreate) SetCreatedAt(t time.Time) *UserMuteCreate {
	umc.mutation.SetCreatedAt(t)
	return umc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umc *UserMuteCreate) SetNillableCreatedAt(t *time.Time) *UserMuteCreate {
	if t != nil {
		umc.SetCreatedAt(*t)
	}
	return umc
}

// SetID sets the "id" field.
func (umc *UserMuteCreate) SetID(u uuid.UUID) *UserMuteCreate {
	umc.mutation.SetID(u)
	return umc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (umc *UserMuteCreate) SetNillableID(u *uuid.UUID) *UserMuteCreate {
	if u != nil {
		umc.SetID(*u)
	}
	return umc
}

// SetUser sets the "user" edge to the User entity.
func (umc *UserMuteCreate) SetUser(u *User) *UserMuteCreate {
	return umc.SetUserID(u.ID)
}

// SetMuteUser sets the "mute_user" edge to the User entity.
func (umc *UserMuteCreate) SetMuteUser(u *User) *UserMuteCreate {
	return umc.SetMuteUserID(u.ID)
}

// Mutation returns the UserMuteMutation object of the builder.
func (umc *UserMuteCreate) Mutation() *UserMuteMutation {
	return umc.mutation
}

// Save creates the UserMute in the database.
func (umc *UserMuteCreate) Save(ctx context.Context) (*UserMute, error) {
	var (
		err  error
		node *UserMute
	)
	umc.defaults()
	if len(umc.hooks) == 0 {
		if err = umc.check(); err != nil {
			return nil, err
		}
		node, err = umc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMuteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umc.check(); err != nil {
				return nil, err
			}
			umc.mutation = mutation
			if node, err = umc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(umc.hooks) - 1; i >= 0; i-- {
			if umc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, umc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserMute)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMuteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMuteCreate) SaveX(ctx context.Context) *UserMute {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserMuteCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserMuteCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UserMuteCreate) defaults() {
	if _, ok := umc.mutation.CreatedAt(); !ok {
		v := usermute.DefaultCreatedAt()
		umc.mutation.SetCreatedAt(v)
	}
	if _, ok := umc.mutation.ID(); !ok {
		v := usermute.DefaultID()
		umc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserMuteCreate) check() error {
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserMute.user_id"`)}
	}
	if _, ok := umc.mutation.MuteUserID(); !ok {
		return &ValidationError{Name: "mute_user_id", err: errors.New(`ent: missing required field "UserMute.mute_user_id"`)}
	}
	if _, ok := umc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserMute.created_at"`)}
	}
	if _, ok := umc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserMute.user"`)}
	}
	if _, ok := umc.mutation.MuteUserID(); !ok {
		return &ValidationError{Name: "mute_user", err: errors.New(`ent: missing required edge "UserMute.mute_user"`)}
	}
	return nil
}

func (umc *UserMuteCreate) sqlSave(ctx context.Context) (*UserMute, error) {
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (umc *UserMuteCreate) createSpec() (*UserMute, *sqlgraph.CreateSpec) {
	var (
		_node = &UserMute{config: umc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usermute.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermute.FieldID,
			},
		}
	)
	_spec.OnConflict = umc.conflict
	if id, ok := umc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := umc.mutation.CreatedAt(); ok {
		_spec.SetField(usermute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := umc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usermute.UserTable,
			Columns: []string{usermute.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := umc.mutation.MuteUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usermute.MuteUserTable,
			Columns: []string{usermute.MuteUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MuteUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserMute.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserMuteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (umc *UserMuteCreate) OnConflict(opts ...sql.ConflictOption) *UserMuteUpsertOne {
	umc.conflict = opts
	return &UserMuteUpsertOne{
		create: umc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserMute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umc *UserMuteCreate) OnConflictColumns(columns ...string) *UserMuteUpsertOne {
	umc.conflict = append(umc.conflict, sql.ConflictColumns(columns...))
	return &UserMuteUpsertOne{
		create: umc,
	}
}

type (
	// UserMuteUpsertOne is the builder for "upsert"-ing
	//  one UserMute node.
	UserMuteUpsertOne struct {
		create *UserMuteCreate
	}

	// UserMuteUpsert is the "OnConflict" setter.
	UserMuteUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserMute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usermute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserMuteUpsertOne) UpdateNewValues() *UserMuteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usermute.FieldID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(usermute.FieldUserID)
		}
		if _, exists := u.create.mutation.MuteUserID(); exists {
			s.SetIgnore(usermute.FieldMuteUserID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usermute.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserMute.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserMuteUpsertOne) Ignore() *UserMuteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserMuteUpsertOne) DoNothing() *UserMuteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserMuteCreate.OnConflict
// documentation for more info.
func (u *UserMuteUpsertOne) Update(set func(*UserMuteUpsert)) *UserMuteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserMuteUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserMuteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserMuteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserMuteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserMuteUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserMuteUpsertOne.ID is not supported by MySQL driver. Use UserMuteUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserMuteUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserMuteCreateBulk is the builder for creating many UserMute entities in bulk.
type UserMuteCreateBulk struct {
	config
	builders []*UserMuteCreate
	conflict []sql.ConflictOption
}

// Save creates the UserMute entities in the database.
func (umcb *UserMuteCreateBulk) Save(ctx context.Context) ([]*UserMute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserMute, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMuteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = umcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserMuteCreateBulk) SaveX(ctx context.Context) []*UserMute {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserMuteCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserMuteCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserMute.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserMuteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (umcb *UserMuteCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserMuteUpsertBulk {
	umcb.conflict = opts
	return &UserMuteUpsertBulk{
		create: umcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserMute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (umcb *UserMuteCreateBulk) OnConflictColumns(columns ...string) *UserMuteUpsertBulk {
	umcb.conflict = append(umcb.conflict, sql.ConflictColumns(columns...))
	return &UserMuteUpsertBulk{
		create: umcb,
	}
}

// UserMuteUpsertBulk is the builder for "upsert"-ing
// a bulk of UserMute nodes.
type UserMuteUpsertBulk struct {
	create *UserMuteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserMute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usermute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserMuteUpsertBulk) UpdateNewValues() *UserMuteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usermute.FieldID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(usermute.FieldUserID)
			}
			if _, exists := b.mutation.MuteUserID(); exists {
				s.SetIgnore(usermute.FieldMuteUserID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usermute.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserMute.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserMuteUpsertBulk) Ignore() *UserMuteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserMuteUpsertBulk) DoNothing() *UserMuteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserMuteCreateBulk.OnConflict
// documentation for more info.
func (u *UserMuteUpsertBulk) Update(set func(*UserMuteUpsert)) *UserMuteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserMuteUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserMuteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserMuteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserMuteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserMuteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

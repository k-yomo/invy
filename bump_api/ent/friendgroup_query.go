// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/friendgroup"
	"github.com/k-yomo/bump/bump_api/ent/predicate"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/userfriendgroup"
)

// FriendGroupQuery is the builder for querying FriendGroup entities.
type FriendGroupQuery struct {
	config
	limit                     *int
	offset                    *int
	unique                    *bool
	order                     []OrderFunc
	fields                    []string
	predicates                []predicate.FriendGroup
	withUser                  *UserQuery
	withFriendUsers           *UserQuery
	withUserFriendGroups      *UserFriendGroupQuery
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*FriendGroup) error
	withNamedFriendUsers      map[string]*UserQuery
	withNamedUserFriendGroups map[string]*UserFriendGroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FriendGroupQuery builder.
func (fgq *FriendGroupQuery) Where(ps ...predicate.FriendGroup) *FriendGroupQuery {
	fgq.predicates = append(fgq.predicates, ps...)
	return fgq
}

// Limit adds a limit step to the query.
func (fgq *FriendGroupQuery) Limit(limit int) *FriendGroupQuery {
	fgq.limit = &limit
	return fgq
}

// Offset adds an offset step to the query.
func (fgq *FriendGroupQuery) Offset(offset int) *FriendGroupQuery {
	fgq.offset = &offset
	return fgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fgq *FriendGroupQuery) Unique(unique bool) *FriendGroupQuery {
	fgq.unique = &unique
	return fgq
}

// Order adds an order step to the query.
func (fgq *FriendGroupQuery) Order(o ...OrderFunc) *FriendGroupQuery {
	fgq.order = append(fgq.order, o...)
	return fgq
}

// QueryUser chains the current query on the "user" edge.
func (fgq *FriendGroupQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendgroup.UserTable, friendgroup.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendUsers chains the current query on the "friend_users" edge.
func (fgq *FriendGroupQuery) QueryFriendUsers() *UserQuery {
	query := &UserQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, friendgroup.FriendUsersTable, friendgroup.FriendUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserFriendGroups chains the current query on the "user_friend_groups" edge.
func (fgq *FriendGroupQuery) QueryUserFriendGroups() *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: fgq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, selector),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, friendgroup.UserFriendGroupsTable, friendgroup.UserFriendGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FriendGroup entity from the query.
// Returns a *NotFoundError when no FriendGroup was found.
func (fgq *FriendGroupQuery) First(ctx context.Context) (*FriendGroup, error) {
	nodes, err := fgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{friendgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fgq *FriendGroupQuery) FirstX(ctx context.Context) *FriendGroup {
	node, err := fgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FriendGroup ID from the query.
// Returns a *NotFoundError when no FriendGroup ID was found.
func (fgq *FriendGroupQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{friendgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fgq *FriendGroupQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FriendGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FriendGroup entity is found.
// Returns a *NotFoundError when no FriendGroup entities are found.
func (fgq *FriendGroupQuery) Only(ctx context.Context) (*FriendGroup, error) {
	nodes, err := fgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{friendgroup.Label}
	default:
		return nil, &NotSingularError{friendgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fgq *FriendGroupQuery) OnlyX(ctx context.Context) *FriendGroup {
	node, err := fgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FriendGroup ID in the query.
// Returns a *NotSingularError when more than one FriendGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (fgq *FriendGroupQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{friendgroup.Label}
	default:
		err = &NotSingularError{friendgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fgq *FriendGroupQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FriendGroups.
func (fgq *FriendGroupQuery) All(ctx context.Context) ([]*FriendGroup, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fgq *FriendGroupQuery) AllX(ctx context.Context) []*FriendGroup {
	nodes, err := fgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FriendGroup IDs.
func (fgq *FriendGroupQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := fgq.Select(friendgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fgq *FriendGroupQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fgq *FriendGroupQuery) Count(ctx context.Context) (int, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fgq *FriendGroupQuery) CountX(ctx context.Context) int {
	count, err := fgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fgq *FriendGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := fgq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fgq *FriendGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := fgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FriendGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fgq *FriendGroupQuery) Clone() *FriendGroupQuery {
	if fgq == nil {
		return nil
	}
	return &FriendGroupQuery{
		config:               fgq.config,
		limit:                fgq.limit,
		offset:               fgq.offset,
		order:                append([]OrderFunc{}, fgq.order...),
		predicates:           append([]predicate.FriendGroup{}, fgq.predicates...),
		withUser:             fgq.withUser.Clone(),
		withFriendUsers:      fgq.withFriendUsers.Clone(),
		withUserFriendGroups: fgq.withUserFriendGroups.Clone(),
		// clone intermediate query.
		sql:    fgq.sql.Clone(),
		path:   fgq.path,
		unique: fgq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FriendGroupQuery) WithUser(opts ...func(*UserQuery)) *FriendGroupQuery {
	query := &UserQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withUser = query
	return fgq
}

// WithFriendUsers tells the query-builder to eager-load the nodes that are connected to
// the "friend_users" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FriendGroupQuery) WithFriendUsers(opts ...func(*UserQuery)) *FriendGroupQuery {
	query := &UserQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withFriendUsers = query
	return fgq
}

// WithUserFriendGroups tells the query-builder to eager-load the nodes that are connected to
// the "user_friend_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (fgq *FriendGroupQuery) WithUserFriendGroups(opts ...func(*UserFriendGroupQuery)) *FriendGroupQuery {
	query := &UserFriendGroupQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	fgq.withUserFriendGroups = query
	return fgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FriendGroup.Query().
//		GroupBy(friendgroup.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fgq *FriendGroupQuery) GroupBy(field string, fields ...string) *FriendGroupGroupBy {
	grbuild := &FriendGroupGroupBy{config: fgq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fgq.sqlQuery(ctx), nil
	}
	grbuild.label = friendgroup.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.FriendGroup.Query().
//		Select(friendgroup.FieldUserID).
//		Scan(ctx, &v)
func (fgq *FriendGroupQuery) Select(fields ...string) *FriendGroupSelect {
	fgq.fields = append(fgq.fields, fields...)
	selbuild := &FriendGroupSelect{FriendGroupQuery: fgq}
	selbuild.label = friendgroup.Label
	selbuild.flds, selbuild.scan = &fgq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a FriendGroupSelect configured with the given aggregations.
func (fgq *FriendGroupQuery) Aggregate(fns ...AggregateFunc) *FriendGroupSelect {
	return fgq.Select().Aggregate(fns...)
}

func (fgq *FriendGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range fgq.fields {
		if !friendgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fgq.path != nil {
		prev, err := fgq.path(ctx)
		if err != nil {
			return err
		}
		fgq.sql = prev
	}
	return nil
}

func (fgq *FriendGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FriendGroup, error) {
	var (
		nodes       = []*FriendGroup{}
		_spec       = fgq.querySpec()
		loadedTypes = [3]bool{
			fgq.withUser != nil,
			fgq.withFriendUsers != nil,
			fgq.withUserFriendGroups != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FriendGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FriendGroup{config: fgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fgq.modifiers) > 0 {
		_spec.Modifiers = fgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fgq.withUser; query != nil {
		if err := fgq.loadUser(ctx, query, nodes, nil,
			func(n *FriendGroup, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := fgq.withFriendUsers; query != nil {
		if err := fgq.loadFriendUsers(ctx, query, nodes,
			func(n *FriendGroup) { n.Edges.FriendUsers = []*User{} },
			func(n *FriendGroup, e *User) { n.Edges.FriendUsers = append(n.Edges.FriendUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := fgq.withUserFriendGroups; query != nil {
		if err := fgq.loadUserFriendGroups(ctx, query, nodes,
			func(n *FriendGroup) { n.Edges.UserFriendGroups = []*UserFriendGroup{} },
			func(n *FriendGroup, e *UserFriendGroup) {
				n.Edges.UserFriendGroups = append(n.Edges.UserFriendGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range fgq.withNamedFriendUsers {
		if err := fgq.loadFriendUsers(ctx, query, nodes,
			func(n *FriendGroup) { n.appendNamedFriendUsers(name) },
			func(n *FriendGroup, e *User) { n.appendNamedFriendUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fgq.withNamedUserFriendGroups {
		if err := fgq.loadUserFriendGroups(ctx, query, nodes,
			func(n *FriendGroup) { n.appendNamedUserFriendGroups(name) },
			func(n *FriendGroup, e *UserFriendGroup) { n.appendNamedUserFriendGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fgq.loadTotal {
		if err := fgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fgq *FriendGroupQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*FriendGroup, init func(*FriendGroup), assign func(*FriendGroup, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FriendGroup)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fgq *FriendGroupQuery) loadFriendUsers(ctx context.Context, query *UserQuery, nodes []*FriendGroup, init func(*FriendGroup), assign func(*FriendGroup, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*FriendGroup)
	nids := make(map[uuid.UUID]map[*FriendGroup]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(friendgroup.FriendUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(friendgroup.FriendUsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(friendgroup.FriendUsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(friendgroup.FriendUsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*FriendGroup]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "friend_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fgq *FriendGroupQuery) loadUserFriendGroups(ctx context.Context, query *UserFriendGroupQuery, nodes []*FriendGroup, init func(*FriendGroup), assign func(*FriendGroup, *UserFriendGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*FriendGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.UserFriendGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(friendgroup.UserFriendGroupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FriendGroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "friend_group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fgq *FriendGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fgq.querySpec()
	if len(fgq.modifiers) > 0 {
		_spec.Modifiers = fgq.modifiers
	}
	_spec.Node.Columns = fgq.fields
	if len(fgq.fields) > 0 {
		_spec.Unique = fgq.unique != nil && *fgq.unique
	}
	return sqlgraph.CountNodes(ctx, fgq.driver, _spec)
}

func (fgq *FriendGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := fgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (fgq *FriendGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friendgroup.Table,
			Columns: friendgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: friendgroup.FieldID,
			},
		},
		From:   fgq.sql,
		Unique: true,
	}
	if unique := fgq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := fgq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendgroup.FieldID)
		for i := range fields {
			if fields[i] != friendgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fgq *FriendGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fgq.driver.Dialect())
	t1 := builder.Table(friendgroup.Table)
	columns := fgq.fields
	if len(columns) == 0 {
		columns = friendgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fgq.sql != nil {
		selector = fgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fgq.unique != nil && *fgq.unique {
		selector.Distinct()
	}
	for _, p := range fgq.predicates {
		p(selector)
	}
	for _, p := range fgq.order {
		p(selector)
	}
	if offset := fgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedFriendUsers tells the query-builder to eager-load the nodes that are connected to the "friend_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fgq *FriendGroupQuery) WithNamedFriendUsers(name string, opts ...func(*UserQuery)) *FriendGroupQuery {
	query := &UserQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	if fgq.withNamedFriendUsers == nil {
		fgq.withNamedFriendUsers = make(map[string]*UserQuery)
	}
	fgq.withNamedFriendUsers[name] = query
	return fgq
}

// WithNamedUserFriendGroups tells the query-builder to eager-load the nodes that are connected to the "user_friend_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fgq *FriendGroupQuery) WithNamedUserFriendGroups(name string, opts ...func(*UserFriendGroupQuery)) *FriendGroupQuery {
	query := &UserFriendGroupQuery{config: fgq.config}
	for _, opt := range opts {
		opt(query)
	}
	if fgq.withNamedUserFriendGroups == nil {
		fgq.withNamedUserFriendGroups = make(map[string]*UserFriendGroupQuery)
	}
	fgq.withNamedUserFriendGroups[name] = query
	return fgq
}

// FriendGroupGroupBy is the group-by builder for FriendGroup entities.
type FriendGroupGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fggb *FriendGroupGroupBy) Aggregate(fns ...AggregateFunc) *FriendGroupGroupBy {
	fggb.fns = append(fggb.fns, fns...)
	return fggb
}

// Scan applies the group-by query and scans the result into the given value.
func (fggb *FriendGroupGroupBy) Scan(ctx context.Context, v any) error {
	query, err := fggb.path(ctx)
	if err != nil {
		return err
	}
	fggb.sql = query
	return fggb.sqlScan(ctx, v)
}

func (fggb *FriendGroupGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range fggb.fields {
		if !friendgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fggb *FriendGroupGroupBy) sqlQuery() *sql.Selector {
	selector := fggb.sql.Select()
	aggregation := make([]string, 0, len(fggb.fns))
	for _, fn := range fggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(fggb.fields)+len(fggb.fns))
		for _, f := range fggb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(fggb.fields...)...)
}

// FriendGroupSelect is the builder for selecting fields of FriendGroup entities.
type FriendGroupSelect struct {
	*FriendGroupQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fgs *FriendGroupSelect) Aggregate(fns ...AggregateFunc) *FriendGroupSelect {
	fgs.fns = append(fgs.fns, fns...)
	return fgs
}

// Scan applies the selector query and scans the result into the given value.
func (fgs *FriendGroupSelect) Scan(ctx context.Context, v any) error {
	if err := fgs.prepareQuery(ctx); err != nil {
		return err
	}
	fgs.sql = fgs.FriendGroupQuery.sqlQuery(ctx)
	return fgs.sqlScan(ctx, v)
}

func (fgs *FriendGroupSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(fgs.fns))
	for _, fn := range fgs.fns {
		aggregation = append(aggregation, fn(fgs.sql))
	}
	switch n := len(*fgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		fgs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		fgs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := fgs.sql.Query()
	if err := fgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

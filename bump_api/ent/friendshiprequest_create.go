// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/friendshiprequest"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// FriendshipRequestCreate is the builder for creating a FriendshipRequest entity.
type FriendshipRequestCreate struct {
	config
	mutation *FriendshipRequestMutation
	hooks    []Hook
}

// SetFromUserID sets the "from_user_id" field.
func (frc *FriendshipRequestCreate) SetFromUserID(u uuid.UUID) *FriendshipRequestCreate {
	frc.mutation.SetFromUserID(u)
	return frc
}

// SetToUserID sets the "to_user_id" field.
func (frc *FriendshipRequestCreate) SetToUserID(u uuid.UUID) *FriendshipRequestCreate {
	frc.mutation.SetToUserID(u)
	return frc
}

// SetCreatedAt sets the "created_at" field.
func (frc *FriendshipRequestCreate) SetCreatedAt(t time.Time) *FriendshipRequestCreate {
	frc.mutation.SetCreatedAt(t)
	return frc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (frc *FriendshipRequestCreate) SetNillableCreatedAt(t *time.Time) *FriendshipRequestCreate {
	if t != nil {
		frc.SetCreatedAt(*t)
	}
	return frc
}

// SetUpdatedAt sets the "updated_at" field.
func (frc *FriendshipRequestCreate) SetUpdatedAt(t time.Time) *FriendshipRequestCreate {
	frc.mutation.SetUpdatedAt(t)
	return frc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (frc *FriendshipRequestCreate) SetNillableUpdatedAt(t *time.Time) *FriendshipRequestCreate {
	if t != nil {
		frc.SetUpdatedAt(*t)
	}
	return frc
}

// SetID sets the "id" field.
func (frc *FriendshipRequestCreate) SetID(u uuid.UUID) *FriendshipRequestCreate {
	frc.mutation.SetID(u)
	return frc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (frc *FriendshipRequestCreate) SetNillableID(u *uuid.UUID) *FriendshipRequestCreate {
	if u != nil {
		frc.SetID(*u)
	}
	return frc
}

// SetFromUsersID sets the "from_users" edge to the User entity by ID.
func (frc *FriendshipRequestCreate) SetFromUsersID(id uuid.UUID) *FriendshipRequestCreate {
	frc.mutation.SetFromUsersID(id)
	return frc
}

// SetFromUsers sets the "from_users" edge to the User entity.
func (frc *FriendshipRequestCreate) SetFromUsers(u *User) *FriendshipRequestCreate {
	return frc.SetFromUsersID(u.ID)
}

// SetToUsersID sets the "to_users" edge to the User entity by ID.
func (frc *FriendshipRequestCreate) SetToUsersID(id uuid.UUID) *FriendshipRequestCreate {
	frc.mutation.SetToUsersID(id)
	return frc
}

// SetToUsers sets the "to_users" edge to the User entity.
func (frc *FriendshipRequestCreate) SetToUsers(u *User) *FriendshipRequestCreate {
	return frc.SetToUsersID(u.ID)
}

// Mutation returns the FriendshipRequestMutation object of the builder.
func (frc *FriendshipRequestCreate) Mutation() *FriendshipRequestMutation {
	return frc.mutation
}

// Save creates the FriendshipRequest in the database.
func (frc *FriendshipRequestCreate) Save(ctx context.Context) (*FriendshipRequest, error) {
	var (
		err  error
		node *FriendshipRequest
	)
	frc.defaults()
	if len(frc.hooks) == 0 {
		if err = frc.check(); err != nil {
			return nil, err
		}
		node, err = frc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendshipRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = frc.check(); err != nil {
				return nil, err
			}
			frc.mutation = mutation
			if node, err = frc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(frc.hooks) - 1; i >= 0; i-- {
			if frc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = frc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, frc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FriendshipRequest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FriendshipRequestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FriendshipRequestCreate) SaveX(ctx context.Context) *FriendshipRequest {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FriendshipRequestCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FriendshipRequestCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FriendshipRequestCreate) defaults() {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		v := friendshiprequest.DefaultCreatedAt()
		frc.mutation.SetCreatedAt(v)
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		v := friendshiprequest.DefaultUpdatedAt()
		frc.mutation.SetUpdatedAt(v)
	}
	if _, ok := frc.mutation.ID(); !ok {
		v := friendshiprequest.DefaultID()
		frc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FriendshipRequestCreate) check() error {
	if _, ok := frc.mutation.FromUserID(); !ok {
		return &ValidationError{Name: "from_user_id", err: errors.New(`ent: missing required field "FriendshipRequest.from_user_id"`)}
	}
	if _, ok := frc.mutation.ToUserID(); !ok {
		return &ValidationError{Name: "to_user_id", err: errors.New(`ent: missing required field "FriendshipRequest.to_user_id"`)}
	}
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FriendshipRequest.created_at"`)}
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FriendshipRequest.updated_at"`)}
	}
	if _, ok := frc.mutation.FromUsersID(); !ok {
		return &ValidationError{Name: "from_users", err: errors.New(`ent: missing required edge "FriendshipRequest.from_users"`)}
	}
	if _, ok := frc.mutation.ToUsersID(); !ok {
		return &ValidationError{Name: "to_users", err: errors.New(`ent: missing required edge "FriendshipRequest.to_users"`)}
	}
	return nil
}

func (frc *FriendshipRequestCreate) sqlSave(ctx context.Context) (*FriendshipRequest, error) {
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (frc *FriendshipRequestCreate) createSpec() (*FriendshipRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &FriendshipRequest{config: frc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: friendshiprequest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: friendshiprequest.FieldID,
			},
		}
	)
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: friendshiprequest.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := frc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: friendshiprequest.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := frc.mutation.FromUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friendshiprequest.FromUsersTable,
			Columns: []string{friendshiprequest.FromUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.ToUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   friendshiprequest.ToUsersTable,
			Columns: []string{friendshiprequest.ToUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FriendshipRequestCreateBulk is the builder for creating many FriendshipRequest entities in bulk.
type FriendshipRequestCreateBulk struct {
	config
	builders []*FriendshipRequestCreate
}

// Save creates the FriendshipRequest entities in the database.
func (frcb *FriendshipRequestCreateBulk) Save(ctx context.Context) ([]*FriendshipRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FriendshipRequest, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendshipRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FriendshipRequestCreateBulk) SaveX(ctx context.Context) []*FriendshipRequest {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FriendshipRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FriendshipRequestCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}

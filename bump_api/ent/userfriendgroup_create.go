// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/friendgroup"
	"github.com/k-yomo/bump/bump_api/ent/user"
	"github.com/k-yomo/bump/bump_api/ent/userfriendgroup"
)

// UserFriendGroupCreate is the builder for creating a UserFriendGroup entity.
type UserFriendGroupCreate struct {
	config
	mutation *UserFriendGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFriendGroupID sets the "friend_group_id" field.
func (ufgc *UserFriendGroupCreate) SetFriendGroupID(u uuid.UUID) *UserFriendGroupCreate {
	ufgc.mutation.SetFriendGroupID(u)
	return ufgc
}

// SetUserID sets the "user_id" field.
func (ufgc *UserFriendGroupCreate) SetUserID(u uuid.UUID) *UserFriendGroupCreate {
	ufgc.mutation.SetUserID(u)
	return ufgc
}

// SetCreatedAt sets the "created_at" field.
func (ufgc *UserFriendGroupCreate) SetCreatedAt(t time.Time) *UserFriendGroupCreate {
	ufgc.mutation.SetCreatedAt(t)
	return ufgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufgc *UserFriendGroupCreate) SetNillableCreatedAt(t *time.Time) *UserFriendGroupCreate {
	if t != nil {
		ufgc.SetCreatedAt(*t)
	}
	return ufgc
}

// SetID sets the "id" field.
func (ufgc *UserFriendGroupCreate) SetID(u uuid.UUID) *UserFriendGroupCreate {
	ufgc.mutation.SetID(u)
	return ufgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ufgc *UserFriendGroupCreate) SetNillableID(u *uuid.UUID) *UserFriendGroupCreate {
	if u != nil {
		ufgc.SetID(*u)
	}
	return ufgc
}

// SetFriendGroup sets the "friend_group" edge to the FriendGroup entity.
func (ufgc *UserFriendGroupCreate) SetFriendGroup(f *FriendGroup) *UserFriendGroupCreate {
	return ufgc.SetFriendGroupID(f.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ufgc *UserFriendGroupCreate) SetUser(u *User) *UserFriendGroupCreate {
	return ufgc.SetUserID(u.ID)
}

// Mutation returns the UserFriendGroupMutation object of the builder.
func (ufgc *UserFriendGroupCreate) Mutation() *UserFriendGroupMutation {
	return ufgc.mutation
}

// Save creates the UserFriendGroup in the database.
func (ufgc *UserFriendGroupCreate) Save(ctx context.Context) (*UserFriendGroup, error) {
	var (
		err  error
		node *UserFriendGroup
	)
	ufgc.defaults()
	if len(ufgc.hooks) == 0 {
		if err = ufgc.check(); err != nil {
			return nil, err
		}
		node, err = ufgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFriendGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ufgc.check(); err != nil {
				return nil, err
			}
			ufgc.mutation = mutation
			if node, err = ufgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ufgc.hooks) - 1; i >= 0; i-- {
			if ufgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ufgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserFriendGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserFriendGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ufgc *UserFriendGroupCreate) SaveX(ctx context.Context) *UserFriendGroup {
	v, err := ufgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufgc *UserFriendGroupCreate) Exec(ctx context.Context) error {
	_, err := ufgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufgc *UserFriendGroupCreate) ExecX(ctx context.Context) {
	if err := ufgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufgc *UserFriendGroupCreate) defaults() {
	if _, ok := ufgc.mutation.CreatedAt(); !ok {
		v := userfriendgroup.DefaultCreatedAt()
		ufgc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufgc.mutation.ID(); !ok {
		v := userfriendgroup.DefaultID()
		ufgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufgc *UserFriendGroupCreate) check() error {
	if _, ok := ufgc.mutation.FriendGroupID(); !ok {
		return &ValidationError{Name: "friend_group_id", err: errors.New(`ent: missing required field "UserFriendGroup.friend_group_id"`)}
	}
	if _, ok := ufgc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserFriendGroup.user_id"`)}
	}
	if _, ok := ufgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserFriendGroup.created_at"`)}
	}
	if _, ok := ufgc.mutation.FriendGroupID(); !ok {
		return &ValidationError{Name: "friend_group", err: errors.New(`ent: missing required edge "UserFriendGroup.friend_group"`)}
	}
	if _, ok := ufgc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserFriendGroup.user"`)}
	}
	return nil
}

func (ufgc *UserFriendGroupCreate) sqlSave(ctx context.Context) (*UserFriendGroup, error) {
	_node, _spec := ufgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ufgc *UserFriendGroupCreate) createSpec() (*UserFriendGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFriendGroup{config: ufgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userfriendgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userfriendgroup.FieldID,
			},
		}
	)
	_spec.OnConflict = ufgc.conflict
	if id, ok := ufgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ufgc.mutation.CreatedAt(); ok {
		_spec.SetField(userfriendgroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ufgc.mutation.FriendGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfriendgroup.FriendGroupTable,
			Columns: []string{userfriendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FriendGroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufgc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfriendgroup.UserTable,
			Columns: []string{userfriendgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFriendGroup.Create().
//		SetFriendGroupID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFriendGroupUpsert) {
//			SetFriendGroupID(v+v).
//		}).
//		Exec(ctx)
func (ufgc *UserFriendGroupCreate) OnConflict(opts ...sql.ConflictOption) *UserFriendGroupUpsertOne {
	ufgc.conflict = opts
	return &UserFriendGroupUpsertOne{
		create: ufgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufgc *UserFriendGroupCreate) OnConflictColumns(columns ...string) *UserFriendGroupUpsertOne {
	ufgc.conflict = append(ufgc.conflict, sql.ConflictColumns(columns...))
	return &UserFriendGroupUpsertOne{
		create: ufgc,
	}
}

type (
	// UserFriendGroupUpsertOne is the builder for "upsert"-ing
	//  one UserFriendGroup node.
	UserFriendGroupUpsertOne struct {
		create *UserFriendGroupCreate
	}

	// UserFriendGroupUpsert is the "OnConflict" setter.
	UserFriendGroupUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfriendgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserFriendGroupUpsertOne) UpdateNewValues() *UserFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userfriendgroup.FieldID)
		}
		if _, exists := u.create.mutation.FriendGroupID(); exists {
			s.SetIgnore(userfriendgroup.FieldFriendGroupID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(userfriendgroup.FieldUserID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userfriendgroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserFriendGroupUpsertOne) Ignore() *UserFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFriendGroupUpsertOne) DoNothing() *UserFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFriendGroupCreate.OnConflict
// documentation for more info.
func (u *UserFriendGroupUpsertOne) Update(set func(*UserFriendGroupUpsert)) *UserFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFriendGroupUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserFriendGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFriendGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFriendGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserFriendGroupUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserFriendGroupUpsertOne.ID is not supported by MySQL driver. Use UserFriendGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserFriendGroupUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserFriendGroupCreateBulk is the builder for creating many UserFriendGroup entities in bulk.
type UserFriendGroupCreateBulk struct {
	config
	builders []*UserFriendGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the UserFriendGroup entities in the database.
func (ufgcb *UserFriendGroupCreateBulk) Save(ctx context.Context) ([]*UserFriendGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ufgcb.builders))
	nodes := make([]*UserFriendGroup, len(ufgcb.builders))
	mutators := make([]Mutator, len(ufgcb.builders))
	for i := range ufgcb.builders {
		func(i int, root context.Context) {
			builder := ufgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFriendGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufgcb *UserFriendGroupCreateBulk) SaveX(ctx context.Context) []*UserFriendGroup {
	v, err := ufgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufgcb *UserFriendGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := ufgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufgcb *UserFriendGroupCreateBulk) ExecX(ctx context.Context) {
	if err := ufgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserFriendGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserFriendGroupUpsert) {
//			SetFriendGroupID(v+v).
//		}).
//		Exec(ctx)
func (ufgcb *UserFriendGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserFriendGroupUpsertBulk {
	ufgcb.conflict = opts
	return &UserFriendGroupUpsertBulk{
		create: ufgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufgcb *UserFriendGroupCreateBulk) OnConflictColumns(columns ...string) *UserFriendGroupUpsertBulk {
	ufgcb.conflict = append(ufgcb.conflict, sql.ConflictColumns(columns...))
	return &UserFriendGroupUpsertBulk{
		create: ufgcb,
	}
}

// UserFriendGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of UserFriendGroup nodes.
type UserFriendGroupUpsertBulk struct {
	create *UserFriendGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userfriendgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserFriendGroupUpsertBulk) UpdateNewValues() *UserFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userfriendgroup.FieldID)
			}
			if _, exists := b.mutation.FriendGroupID(); exists {
				s.SetIgnore(userfriendgroup.FieldFriendGroupID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(userfriendgroup.FieldUserID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userfriendgroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserFriendGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserFriendGroupUpsertBulk) Ignore() *UserFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserFriendGroupUpsertBulk) DoNothing() *UserFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserFriendGroupCreateBulk.OnConflict
// documentation for more info.
func (u *UserFriendGroupUpsertBulk) Update(set func(*UserFriendGroupUpsert)) *UserFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserFriendGroupUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UserFriendGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserFriendGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserFriendGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserFriendGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

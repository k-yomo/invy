// Code generated by ent, DO NOT EDIT.

package friendgroup

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the friendgroup type in the database.
	Label = "friend_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTotalCount holds the string denoting the total_count field in the database.
	FieldTotalCount = "total_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFriendUsers holds the string denoting the friend_users edge name in mutations.
	EdgeFriendUsers = "friend_users"
	// EdgeInvitationFriendGroups holds the string denoting the invitation_friend_groups edge name in mutations.
	EdgeInvitationFriendGroups = "invitation_friend_groups"
	// EdgeUserFriendGroups holds the string denoting the user_friend_groups edge name in mutations.
	EdgeUserFriendGroups = "user_friend_groups"
	// Table holds the table name of the friendgroup in the database.
	Table = "friend_groups"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "friend_groups"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// FriendUsersTable is the table that holds the friend_users relation/edge. The primary key declared below.
	FriendUsersTable = "user_friend_groups"
	// FriendUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FriendUsersInverseTable = "users"
	// InvitationFriendGroupsTable is the table that holds the invitation_friend_groups relation/edge.
	InvitationFriendGroupsTable = "invitation_friend_groups"
	// InvitationFriendGroupsInverseTable is the table name for the InvitationFriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "invitationfriendgroup" package.
	InvitationFriendGroupsInverseTable = "invitation_friend_groups"
	// InvitationFriendGroupsColumn is the table column denoting the invitation_friend_groups relation/edge.
	InvitationFriendGroupsColumn = "friend_group_id"
	// UserFriendGroupsTable is the table that holds the user_friend_groups relation/edge.
	UserFriendGroupsTable = "user_friend_groups"
	// UserFriendGroupsInverseTable is the table name for the UserFriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "userfriendgroup" package.
	UserFriendGroupsInverseTable = "user_friend_groups"
	// UserFriendGroupsColumn is the table column denoting the user_friend_groups relation/edge.
	UserFriendGroupsColumn = "friend_group_id"
)

// Columns holds all SQL columns for friendgroup fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldName,
	FieldTotalCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// FriendUsersPrimaryKey and FriendUsersColumn2 are the table columns denoting the
	// primary key for the friend_users relation (M2M).
	FriendUsersPrimaryKey = []string{"friend_group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalCount holds the default value on creation for the "total_count" field.
	DefaultTotalCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

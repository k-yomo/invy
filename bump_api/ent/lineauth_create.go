// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/lineauth"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// LineAuthCreate is the builder for creating a LineAuth entity.
type LineAuthCreate struct {
	config
	mutation *LineAuthMutation
	hooks    []Hook
}

// SetLineID sets the "line_id" field.
func (lac *LineAuthCreate) SetLineID(s string) *LineAuthCreate {
	lac.mutation.SetLineID(s)
	return lac
}

// SetCreatedAt sets the "created_at" field.
func (lac *LineAuthCreate) SetCreatedAt(t time.Time) *LineAuthCreate {
	lac.mutation.SetCreatedAt(t)
	return lac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lac *LineAuthCreate) SetNillableCreatedAt(t *time.Time) *LineAuthCreate {
	if t != nil {
		lac.SetCreatedAt(*t)
	}
	return lac
}

// SetID sets the "id" field.
func (lac *LineAuthCreate) SetID(u uuid.UUID) *LineAuthCreate {
	lac.mutation.SetID(u)
	return lac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lac *LineAuthCreate) SetNillableID(u *uuid.UUID) *LineAuthCreate {
	if u != nil {
		lac.SetID(*u)
	}
	return lac
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lac *LineAuthCreate) SetUserID(id uuid.UUID) *LineAuthCreate {
	lac.mutation.SetUserID(id)
	return lac
}

// SetUser sets the "user" edge to the User entity.
func (lac *LineAuthCreate) SetUser(u *User) *LineAuthCreate {
	return lac.SetUserID(u.ID)
}

// Mutation returns the LineAuthMutation object of the builder.
func (lac *LineAuthCreate) Mutation() *LineAuthMutation {
	return lac.mutation
}

// Save creates the LineAuth in the database.
func (lac *LineAuthCreate) Save(ctx context.Context) (*LineAuth, error) {
	var (
		err  error
		node *LineAuth
	)
	lac.defaults()
	if len(lac.hooks) == 0 {
		if err = lac.check(); err != nil {
			return nil, err
		}
		node, err = lac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LineAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lac.check(); err != nil {
				return nil, err
			}
			lac.mutation = mutation
			if node, err = lac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lac.hooks) - 1; i >= 0; i-- {
			if lac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LineAuthCreate) SaveX(ctx context.Context) *LineAuth {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LineAuthCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LineAuthCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LineAuthCreate) defaults() {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		v := lineauth.DefaultCreatedAt()
		lac.mutation.SetCreatedAt(v)
	}
	if _, ok := lac.mutation.ID(); !ok {
		v := lineauth.DefaultID()
		lac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lac *LineAuthCreate) check() error {
	if _, ok := lac.mutation.LineID(); !ok {
		return &ValidationError{Name: "line_id", err: errors.New(`ent: missing required field "LineAuth.line_id"`)}
	}
	if _, ok := lac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LineAuth.created_at"`)}
	}
	if _, ok := lac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LineAuth.user"`)}
	}
	return nil
}

func (lac *LineAuthCreate) sqlSave(ctx context.Context) (*LineAuth, error) {
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lac *LineAuthCreate) createSpec() (*LineAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &LineAuth{config: lac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lineauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: lineauth.FieldID,
			},
		}
	)
	if id, ok := lac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lac.mutation.LineID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lineauth.FieldLineID,
		})
		_node.LineID = value
	}
	if value, ok := lac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lineauth.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := lac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   lineauth.UserTable,
			Columns: []string{lineauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_line_auth = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LineAuthCreateBulk is the builder for creating many LineAuth entities in bulk.
type LineAuthCreateBulk struct {
	config
	builders []*LineAuthCreate
}

// Save creates the LineAuth entities in the database.
func (lacb *LineAuthCreateBulk) Save(ctx context.Context) ([]*LineAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LineAuth, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LineAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LineAuthCreateBulk) SaveX(ctx context.Context) []*LineAuth {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LineAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LineAuthCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}

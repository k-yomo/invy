// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/invitation"
	"github.com/k-yomo/bump/bump_api/ent/invitationacceptance"
	"github.com/k-yomo/bump/bump_api/ent/invitationdenial"
	"github.com/k-yomo/bump/bump_api/ent/invitationfriendgroup"
	"github.com/k-yomo/bump/bump_api/ent/invitationuser"
	"github.com/k-yomo/bump/bump_api/ent/predicate"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// InvitationQuery is the builder for querying Invitation entities.
type InvitationQuery struct {
	config
	limit                           *int
	offset                          *int
	unique                          *bool
	order                           []OrderFunc
	fields                          []string
	predicates                      []predicate.Invitation
	withUser                        *UserQuery
	withInvitationUsers             *InvitationUserQuery
	withInvitationFriendGroups      *InvitationFriendGroupQuery
	withInvitationAcceptances       *InvitationAcceptanceQuery
	withInvitationDenials           *InvitationDenialQuery
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*Invitation) error
	withNamedInvitationUsers        map[string]*InvitationUserQuery
	withNamedInvitationFriendGroups map[string]*InvitationFriendGroupQuery
	withNamedInvitationAcceptances  map[string]*InvitationAcceptanceQuery
	withNamedInvitationDenials      map[string]*InvitationDenialQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvitationQuery builder.
func (iq *InvitationQuery) Where(ps ...predicate.Invitation) *InvitationQuery {
	iq.predicates = append(iq.predicates, ps...)
	return iq
}

// Limit adds a limit step to the query.
func (iq *InvitationQuery) Limit(limit int) *InvitationQuery {
	iq.limit = &limit
	return iq
}

// Offset adds an offset step to the query.
func (iq *InvitationQuery) Offset(offset int) *InvitationQuery {
	iq.offset = &offset
	return iq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iq *InvitationQuery) Unique(unique bool) *InvitationQuery {
	iq.unique = &unique
	return iq
}

// Order adds an order step to the query.
func (iq *InvitationQuery) Order(o ...OrderFunc) *InvitationQuery {
	iq.order = append(iq.order, o...)
	return iq
}

// QueryUser chains the current query on the "user" edge.
func (iq *InvitationQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitation.UserTable, invitation.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationUsers chains the current query on the "invitation_users" edge.
func (iq *InvitationQuery) QueryInvitationUsers() *InvitationUserQuery {
	query := &InvitationUserQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(invitationuser.Table, invitationuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationUsersTable, invitation.InvitationUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationFriendGroups chains the current query on the "invitation_friend_groups" edge.
func (iq *InvitationQuery) QueryInvitationFriendGroups() *InvitationFriendGroupQuery {
	query := &InvitationFriendGroupQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(invitationfriendgroup.Table, invitationfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationFriendGroupsTable, invitation.InvitationFriendGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationAcceptances chains the current query on the "invitation_acceptances" edge.
func (iq *InvitationQuery) QueryInvitationAcceptances() *InvitationAcceptanceQuery {
	query := &InvitationAcceptanceQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(invitationacceptance.Table, invitationacceptance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationAcceptancesTable, invitation.InvitationAcceptancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationDenials chains the current query on the "invitation_denials" edge.
func (iq *InvitationQuery) QueryInvitationDenials() *InvitationDenialQuery {
	query := &InvitationDenialQuery{config: iq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, selector),
			sqlgraph.To(invitationdenial.Table, invitationdenial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationDenialsTable, invitation.InvitationDenialsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Invitation entity from the query.
// Returns a *NotFoundError when no Invitation was found.
func (iq *InvitationQuery) First(ctx context.Context) (*Invitation, error) {
	nodes, err := iq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{invitation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iq *InvitationQuery) FirstX(ctx context.Context) *Invitation {
	node, err := iq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Invitation ID from the query.
// Returns a *NotFoundError when no Invitation ID was found.
func (iq *InvitationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{invitation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iq *InvitationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Invitation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Invitation entity is found.
// Returns a *NotFoundError when no Invitation entities are found.
func (iq *InvitationQuery) Only(ctx context.Context) (*Invitation, error) {
	nodes, err := iq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{invitation.Label}
	default:
		return nil, &NotSingularError{invitation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iq *InvitationQuery) OnlyX(ctx context.Context) *Invitation {
	node, err := iq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Invitation ID in the query.
// Returns a *NotSingularError when more than one Invitation ID is found.
// Returns a *NotFoundError when no entities are found.
func (iq *InvitationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{invitation.Label}
	default:
		err = &NotSingularError{invitation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iq *InvitationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Invitations.
func (iq *InvitationQuery) All(ctx context.Context) ([]*Invitation, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return iq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (iq *InvitationQuery) AllX(ctx context.Context) []*Invitation {
	nodes, err := iq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Invitation IDs.
func (iq *InvitationQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := iq.Select(invitation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iq *InvitationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iq *InvitationQuery) Count(ctx context.Context) (int, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return iq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (iq *InvitationQuery) CountX(ctx context.Context) int {
	count, err := iq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iq *InvitationQuery) Exist(ctx context.Context) (bool, error) {
	if err := iq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return iq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (iq *InvitationQuery) ExistX(ctx context.Context) bool {
	exist, err := iq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvitationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iq *InvitationQuery) Clone() *InvitationQuery {
	if iq == nil {
		return nil
	}
	return &InvitationQuery{
		config:                     iq.config,
		limit:                      iq.limit,
		offset:                     iq.offset,
		order:                      append([]OrderFunc{}, iq.order...),
		predicates:                 append([]predicate.Invitation{}, iq.predicates...),
		withUser:                   iq.withUser.Clone(),
		withInvitationUsers:        iq.withInvitationUsers.Clone(),
		withInvitationFriendGroups: iq.withInvitationFriendGroups.Clone(),
		withInvitationAcceptances:  iq.withInvitationAcceptances.Clone(),
		withInvitationDenials:      iq.withInvitationDenials.Clone(),
		// clone intermediate query.
		sql:    iq.sql.Clone(),
		path:   iq.path,
		unique: iq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithUser(opts ...func(*UserQuery)) *InvitationQuery {
	query := &UserQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withUser = query
	return iq
}

// WithInvitationUsers tells the query-builder to eager-load the nodes that are connected to
// the "invitation_users" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithInvitationUsers(opts ...func(*InvitationUserQuery)) *InvitationQuery {
	query := &InvitationUserQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withInvitationUsers = query
	return iq
}

// WithInvitationFriendGroups tells the query-builder to eager-load the nodes that are connected to
// the "invitation_friend_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithInvitationFriendGroups(opts ...func(*InvitationFriendGroupQuery)) *InvitationQuery {
	query := &InvitationFriendGroupQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withInvitationFriendGroups = query
	return iq
}

// WithInvitationAcceptances tells the query-builder to eager-load the nodes that are connected to
// the "invitation_acceptances" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithInvitationAcceptances(opts ...func(*InvitationAcceptanceQuery)) *InvitationQuery {
	query := &InvitationAcceptanceQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withInvitationAcceptances = query
	return iq
}

// WithInvitationDenials tells the query-builder to eager-load the nodes that are connected to
// the "invitation_denials" edge. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithInvitationDenials(opts ...func(*InvitationDenialQuery)) *InvitationQuery {
	query := &InvitationDenialQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	iq.withInvitationDenials = query
	return iq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Invitation.Query().
//		GroupBy(invitation.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iq *InvitationQuery) GroupBy(field string, fields ...string) *InvitationGroupBy {
	grbuild := &InvitationGroupBy{config: iq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := iq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return iq.sqlQuery(ctx), nil
	}
	grbuild.label = invitation.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.Invitation.Query().
//		Select(invitation.FieldUserID).
//		Scan(ctx, &v)
func (iq *InvitationQuery) Select(fields ...string) *InvitationSelect {
	iq.fields = append(iq.fields, fields...)
	selbuild := &InvitationSelect{InvitationQuery: iq}
	selbuild.label = invitation.Label
	selbuild.flds, selbuild.scan = &iq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a InvitationSelect configured with the given aggregations.
func (iq *InvitationQuery) Aggregate(fns ...AggregateFunc) *InvitationSelect {
	return iq.Select().Aggregate(fns...)
}

func (iq *InvitationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range iq.fields {
		if !invitation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iq.path != nil {
		prev, err := iq.path(ctx)
		if err != nil {
			return err
		}
		iq.sql = prev
	}
	return nil
}

func (iq *InvitationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Invitation, error) {
	var (
		nodes       = []*Invitation{}
		_spec       = iq.querySpec()
		loadedTypes = [5]bool{
			iq.withUser != nil,
			iq.withInvitationUsers != nil,
			iq.withInvitationFriendGroups != nil,
			iq.withInvitationAcceptances != nil,
			iq.withInvitationDenials != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Invitation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Invitation{config: iq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iq.withUser; query != nil {
		if err := iq.loadUser(ctx, query, nodes, nil,
			func(n *Invitation, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := iq.withInvitationUsers; query != nil {
		if err := iq.loadInvitationUsers(ctx, query, nodes,
			func(n *Invitation) { n.Edges.InvitationUsers = []*InvitationUser{} },
			func(n *Invitation, e *InvitationUser) { n.Edges.InvitationUsers = append(n.Edges.InvitationUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := iq.withInvitationFriendGroups; query != nil {
		if err := iq.loadInvitationFriendGroups(ctx, query, nodes,
			func(n *Invitation) { n.Edges.InvitationFriendGroups = []*InvitationFriendGroup{} },
			func(n *Invitation, e *InvitationFriendGroup) {
				n.Edges.InvitationFriendGroups = append(n.Edges.InvitationFriendGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iq.withInvitationAcceptances; query != nil {
		if err := iq.loadInvitationAcceptances(ctx, query, nodes,
			func(n *Invitation) { n.Edges.InvitationAcceptances = []*InvitationAcceptance{} },
			func(n *Invitation, e *InvitationAcceptance) {
				n.Edges.InvitationAcceptances = append(n.Edges.InvitationAcceptances, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := iq.withInvitationDenials; query != nil {
		if err := iq.loadInvitationDenials(ctx, query, nodes,
			func(n *Invitation) { n.Edges.InvitationDenials = []*InvitationDenial{} },
			func(n *Invitation, e *InvitationDenial) {
				n.Edges.InvitationDenials = append(n.Edges.InvitationDenials, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedInvitationUsers {
		if err := iq.loadInvitationUsers(ctx, query, nodes,
			func(n *Invitation) { n.appendNamedInvitationUsers(name) },
			func(n *Invitation, e *InvitationUser) { n.appendNamedInvitationUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedInvitationFriendGroups {
		if err := iq.loadInvitationFriendGroups(ctx, query, nodes,
			func(n *Invitation) { n.appendNamedInvitationFriendGroups(name) },
			func(n *Invitation, e *InvitationFriendGroup) { n.appendNamedInvitationFriendGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedInvitationAcceptances {
		if err := iq.loadInvitationAcceptances(ctx, query, nodes,
			func(n *Invitation) { n.appendNamedInvitationAcceptances(name) },
			func(n *Invitation, e *InvitationAcceptance) { n.appendNamedInvitationAcceptances(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range iq.withNamedInvitationDenials {
		if err := iq.loadInvitationDenials(ctx, query, nodes,
			func(n *Invitation) { n.appendNamedInvitationDenials(name) },
			func(n *Invitation, e *InvitationDenial) { n.appendNamedInvitationDenials(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range iq.loadTotal {
		if err := iq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iq *InvitationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Invitation)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iq *InvitationQuery) loadInvitationUsers(ctx context.Context, query *InvitationUserQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *InvitationUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Invitation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationUser(func(s *sql.Selector) {
		s.Where(sql.InValues(invitation.InvitationUsersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvitationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invitation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *InvitationQuery) loadInvitationFriendGroups(ctx context.Context, query *InvitationFriendGroupQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *InvitationFriendGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Invitation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationFriendGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(invitation.InvitationFriendGroupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvitationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invitation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *InvitationQuery) loadInvitationAcceptances(ctx context.Context, query *InvitationAcceptanceQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *InvitationAcceptance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Invitation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationAcceptance(func(s *sql.Selector) {
		s.Where(sql.InValues(invitation.InvitationAcceptancesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvitationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invitation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iq *InvitationQuery) loadInvitationDenials(ctx context.Context, query *InvitationDenialQuery, nodes []*Invitation, init func(*Invitation), assign func(*Invitation, *InvitationDenial)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Invitation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationDenial(func(s *sql.Selector) {
		s.Where(sql.InValues(invitation.InvitationDenialsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InvitationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invitation_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iq *InvitationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iq.querySpec()
	if len(iq.modifiers) > 0 {
		_spec.Modifiers = iq.modifiers
	}
	_spec.Node.Columns = iq.fields
	if len(iq.fields) > 0 {
		_spec.Unique = iq.unique != nil && *iq.unique
	}
	return sqlgraph.CountNodes(ctx, iq.driver, _spec)
}

func (iq *InvitationQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := iq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (iq *InvitationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitation.Table,
			Columns: invitation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitation.FieldID,
			},
		},
		From:   iq.sql,
		Unique: true,
	}
	if unique := iq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitation.FieldID)
		for i := range fields {
			if fields[i] != invitation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iq *InvitationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iq.driver.Dialect())
	t1 := builder.Table(invitation.Table)
	columns := iq.fields
	if len(columns) == 0 {
		columns = invitation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iq.sql != nil {
		selector = iq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iq.unique != nil && *iq.unique {
		selector.Distinct()
	}
	for _, p := range iq.predicates {
		p(selector)
	}
	for _, p := range iq.order {
		p(selector)
	}
	if offset := iq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedInvitationUsers tells the query-builder to eager-load the nodes that are connected to the "invitation_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithNamedInvitationUsers(name string, opts ...func(*InvitationUserQuery)) *InvitationQuery {
	query := &InvitationUserQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedInvitationUsers == nil {
		iq.withNamedInvitationUsers = make(map[string]*InvitationUserQuery)
	}
	iq.withNamedInvitationUsers[name] = query
	return iq
}

// WithNamedInvitationFriendGroups tells the query-builder to eager-load the nodes that are connected to the "invitation_friend_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithNamedInvitationFriendGroups(name string, opts ...func(*InvitationFriendGroupQuery)) *InvitationQuery {
	query := &InvitationFriendGroupQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedInvitationFriendGroups == nil {
		iq.withNamedInvitationFriendGroups = make(map[string]*InvitationFriendGroupQuery)
	}
	iq.withNamedInvitationFriendGroups[name] = query
	return iq
}

// WithNamedInvitationAcceptances tells the query-builder to eager-load the nodes that are connected to the "invitation_acceptances"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithNamedInvitationAcceptances(name string, opts ...func(*InvitationAcceptanceQuery)) *InvitationQuery {
	query := &InvitationAcceptanceQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedInvitationAcceptances == nil {
		iq.withNamedInvitationAcceptances = make(map[string]*InvitationAcceptanceQuery)
	}
	iq.withNamedInvitationAcceptances[name] = query
	return iq
}

// WithNamedInvitationDenials tells the query-builder to eager-load the nodes that are connected to the "invitation_denials"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (iq *InvitationQuery) WithNamedInvitationDenials(name string, opts ...func(*InvitationDenialQuery)) *InvitationQuery {
	query := &InvitationDenialQuery{config: iq.config}
	for _, opt := range opts {
		opt(query)
	}
	if iq.withNamedInvitationDenials == nil {
		iq.withNamedInvitationDenials = make(map[string]*InvitationDenialQuery)
	}
	iq.withNamedInvitationDenials[name] = query
	return iq
}

// InvitationGroupBy is the group-by builder for Invitation entities.
type InvitationGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (igb *InvitationGroupBy) Aggregate(fns ...AggregateFunc) *InvitationGroupBy {
	igb.fns = append(igb.fns, fns...)
	return igb
}

// Scan applies the group-by query and scans the result into the given value.
func (igb *InvitationGroupBy) Scan(ctx context.Context, v any) error {
	query, err := igb.path(ctx)
	if err != nil {
		return err
	}
	igb.sql = query
	return igb.sqlScan(ctx, v)
}

func (igb *InvitationGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range igb.fields {
		if !invitation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := igb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := igb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (igb *InvitationGroupBy) sqlQuery() *sql.Selector {
	selector := igb.sql.Select()
	aggregation := make([]string, 0, len(igb.fns))
	for _, fn := range igb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(igb.fields)+len(igb.fns))
		for _, f := range igb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(igb.fields...)...)
}

// InvitationSelect is the builder for selecting fields of Invitation entities.
type InvitationSelect struct {
	*InvitationQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (is *InvitationSelect) Aggregate(fns ...AggregateFunc) *InvitationSelect {
	is.fns = append(is.fns, fns...)
	return is
}

// Scan applies the selector query and scans the result into the given value.
func (is *InvitationSelect) Scan(ctx context.Context, v any) error {
	if err := is.prepareQuery(ctx); err != nil {
		return err
	}
	is.sql = is.InvitationQuery.sqlQuery(ctx)
	return is.sqlScan(ctx, v)
}

func (is *InvitationSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(is.fns))
	for _, fn := range is.fns {
		aggregation = append(aggregation, fn(is.sql))
	}
	switch n := len(*is.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		is.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		is.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := is.sql.Query()
	if err := is.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

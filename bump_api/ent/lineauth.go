// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent/lineauth"
	"github.com/k-yomo/bump/bump_api/ent/user"
)

// LineAuth is the model entity for the LineAuth schema.
type LineAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// LineID holds the value of the "line_id" field.
	LineID string `json:"line_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LineAuthQuery when eager-loading is set.
	Edges          LineAuthEdges `json:"edges"`
	user_line_auth *uuid.UUID
}

// LineAuthEdges holds the relations/edges for other nodes in the graph.
type LineAuthEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LineAuthEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LineAuth) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lineauth.FieldLineID:
			values[i] = new(sql.NullString)
		case lineauth.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case lineauth.FieldID:
			values[i] = new(uuid.UUID)
		case lineauth.ForeignKeys[0]: // user_line_auth
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type LineAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LineAuth fields.
func (la *LineAuth) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lineauth.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				la.ID = *value
			}
		case lineauth.FieldLineID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line_id", values[i])
			} else if value.Valid {
				la.LineID = value.String
			}
		case lineauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case lineauth.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_line_auth", values[i])
			} else if value.Valid {
				la.user_line_auth = new(uuid.UUID)
				*la.user_line_auth = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the LineAuth entity.
func (la *LineAuth) QueryUser() *UserQuery {
	return (&LineAuthClient{config: la.config}).QueryUser(la)
}

// Update returns a builder for updating this LineAuth.
// Note that you need to call LineAuth.Unwrap() before calling this method if this LineAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LineAuth) Update() *LineAuthUpdateOne {
	return (&LineAuthClient{config: la.config}).UpdateOne(la)
}

// Unwrap unwraps the LineAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LineAuth) Unwrap() *LineAuth {
	tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LineAuth is not a transactional entity")
	}
	la.config.driver = tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LineAuth) String() string {
	var builder strings.Builder
	builder.WriteString("LineAuth(")
	builder.WriteString(fmt.Sprintf("id=%v", la.ID))
	builder.WriteString(", line_id=")
	builder.WriteString(la.LineID)
	builder.WriteString(", created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LineAuths is a parsable slice of LineAuth.
type LineAuths []*LineAuth

func (la LineAuths) config(cfg config) {
	for _i := range la {
		la[_i].config = cfg
	}
}

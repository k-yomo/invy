// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/k-yomo/bump/bump_api/ent"
)

type Node interface {
	IsNode()
	GetID() uuid.UUID
}

type CreateFriendGroupInput struct {
	Name          string      `json:"name"`
	FriendUserIds []uuid.UUID `json:"friendUserIds"`
}

type FriendGroup struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"userId"`
	Name        string    `json:"name"`
	FriendUsers []*User   `json:"friendUsers"`
}

func (FriendGroup) IsNode()               {}
func (this FriendGroup) GetID() uuid.UUID { return this.ID }

type FriendshipRequest struct {
	ID         uuid.UUID `json:"id"`
	FromUserID uuid.UUID `json:"fromUserId"`
	FromUser   *User     `json:"fromUser"`
	ToUserID   uuid.UUID `json:"toUserId"`
	ToUser     *User     `json:"toUser"`
	CreatedAt  time.Time `json:"createdAt"`
}

func (FriendshipRequest) IsNode()               {}
func (this FriendshipRequest) GetID() uuid.UUID { return this.ID }

type Invitation struct {
	ID        uuid.UUID `json:"id"`
	Location  string    `json:"location"`
	Comment   string    `json:"comment"`
	StartsAt  time.Time `json:"startsAt"`
	ExpiresAt time.Time `json:"expiresAt"`
}

func (Invitation) IsNode()               {}
func (this Invitation) GetID() uuid.UUID { return this.ID }

type PageInfo struct {
	StartCursor     *ent.Cursor `json:"startCursor"`
	EndCursor       *ent.Cursor `json:"endCursor"`
	HasNextPage     bool        `json:"hasNextPage"`
	HasPreviousPage bool        `json:"hasPreviousPage"`
}

type SendInvitationInput struct {
	TargetFriendGroupIds []uuid.UUID `json:"targetFriendGroupIds"`
	TargetFriendUserIds  []uuid.UUID `json:"targetFriendUserIds"`
	ExpiresAt            time.Time   `json:"expiresAt"`
	StartsAt             time.Time   `json:"startsAt"`
	Location             string      `json:"location"`
	Comment              string      `json:"comment"`
}

type SignUpInput struct {
	Email     string  `json:"email"`
	Nickname  string  `json:"nickname"`
	AvatarURL *string `json:"avatarUrl"`
}

type UpdateFriendGroupInput struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	FriendUserIds []uuid.UUID `json:"friendUserIds"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	Nickname  string    `json:"nickname"`
	AvatarURL *string   `json:"avatarUrl"`
	IsMuted   bool      `json:"isMuted"`
}

func (User) IsNode()               {}
func (this User) GetID() uuid.UUID { return this.ID }

type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type UserEdge struct {
	Node   *User      `json:"node"`
	Cursor ent.Cursor `json:"cursor"`
}

type ConstraintFormat string

const (
	ConstraintFormatEmail ConstraintFormat = "EMAIL"
	ConstraintFormatURL   ConstraintFormat = "URL"
)

var AllConstraintFormat = []ConstraintFormat{
	ConstraintFormatEmail,
	ConstraintFormatURL,
}

func (e ConstraintFormat) IsValid() bool {
	switch e {
	case ConstraintFormatEmail, ConstraintFormatURL:
		return true
	}
	return false
}

func (e ConstraintFormat) String() string {
	return string(e)
}

func (e *ConstraintFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConstraintFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConstraintFormat", str)
	}
	return nil
}

func (e ConstraintFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: chat_service.go

// Package mock_chat_service is a generated GoMock package.
package mock_chat_service

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	gqlmodel "github.com/k-yomo/invy/invy_api/graph/gqlmodel"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// AddParticipant mocks base method.
func (m *MockChatService) AddParticipant(ctx context.Context, chatRoomID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParticipant", ctx, chatRoomID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParticipant indicates an expected call of AddParticipant.
func (mr *MockChatServiceMockRecorder) AddParticipant(ctx, chatRoomID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParticipant", reflect.TypeOf((*MockChatService)(nil).AddParticipant), ctx, chatRoomID, userID)
}

// CreateChatMessageImage mocks base method.
func (m *MockChatService) CreateChatMessageImage(ctx context.Context, messageID, chatRoomID uuid.UUID, image io.Reader) (*gqlmodel.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatMessageImage", ctx, messageID, chatRoomID, image)
	ret0, _ := ret[0].(*gqlmodel.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatMessageImage indicates an expected call of CreateChatMessageImage.
func (mr *MockChatServiceMockRecorder) CreateChatMessageImage(ctx, messageID, chatRoomID, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatMessageImage", reflect.TypeOf((*MockChatService)(nil).CreateChatMessageImage), ctx, messageID, chatRoomID, image)
}

// CreateChatMessageText mocks base method.
func (m *MockChatService) CreateChatMessageText(ctx context.Context, messageID, chatRoomID uuid.UUID, text string) (*gqlmodel.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatMessageText", ctx, messageID, chatRoomID, text)
	ret0, _ := ret[0].(*gqlmodel.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatMessageText indicates an expected call of CreateChatMessageText.
func (mr *MockChatServiceMockRecorder) CreateChatMessageText(ctx, messageID, chatRoomID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatMessageText", reflect.TypeOf((*MockChatService)(nil).CreateChatMessageText), ctx, messageID, chatRoomID, text)
}

// CreateChatRoom mocks base method.
func (m *MockChatService) CreateChatRoom(ctx context.Context, chatRoomID uuid.UUID, participantUserIDs []uuid.UUID) (*gqlmodel.ChatRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatRoom", ctx, chatRoomID, participantUserIDs)
	ret0, _ := ret[0].(*gqlmodel.ChatRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatRoom indicates an expected call of CreateChatRoom.
func (mr *MockChatServiceMockRecorder) CreateChatRoom(ctx, chatRoomID, participantUserIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatRoom", reflect.TypeOf((*MockChatService)(nil).CreateChatRoom), ctx, chatRoomID, participantUserIDs)
}

// GetChatRoom mocks base method.
func (m *MockChatService) GetChatRoom(ctx context.Context, chatRoomID uuid.UUID) (*gqlmodel.ChatRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatRoom", ctx, chatRoomID)
	ret0, _ := ret[0].(*gqlmodel.ChatRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoom indicates an expected call of GetChatRoom.
func (mr *MockChatServiceMockRecorder) GetChatRoom(ctx, chatRoomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoom", reflect.TypeOf((*MockChatService)(nil).GetChatRoom), ctx, chatRoomID)
}

// GetChatRoomParticipantUserIDs mocks base method.
func (m *MockChatService) GetChatRoomParticipantUserIDs(ctx context.Context, chatRoomID uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatRoomParticipantUserIDs", ctx, chatRoomID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoomParticipantUserIDs indicates an expected call of GetChatRoomParticipantUserIDs.
func (mr *MockChatServiceMockRecorder) GetChatRoomParticipantUserIDs(ctx, chatRoomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoomParticipantUserIDs", reflect.TypeOf((*MockChatService)(nil).GetChatRoomParticipantUserIDs), ctx, chatRoomID)
}

// UpdateLastReadAt mocks base method.
func (m *MockChatService) UpdateLastReadAt(ctx context.Context, chatRoomID, userID uuid.UUID, lastReadAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastReadAt", ctx, chatRoomID, userID, lastReadAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastReadAt indicates an expected call of UpdateLastReadAt.
func (mr *MockChatServiceMockRecorder) UpdateLastReadAt(ctx, chatRoomID, userID, lastReadAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastReadAt", reflect.TypeOf((*MockChatService)(nil).UpdateLastReadAt), ctx, chatRoomID, userID, lastReadAt)
}

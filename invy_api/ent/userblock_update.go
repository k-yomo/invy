// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/userblock"
)

// UserBlockUpdate is the builder for updating UserBlock entities.
type UserBlockUpdate struct {
	config
	hooks    []Hook
	mutation *UserBlockMutation
}

// Where appends a list predicates to the UserBlockUpdate builder.
func (ubu *UserBlockUpdate) Where(ps ...predicate.UserBlock) *UserBlockUpdate {
	ubu.mutation.Where(ps...)
	return ubu
}

// Mutation returns the UserBlockMutation object of the builder.
func (ubu *UserBlockUpdate) Mutation() *UserBlockMutation {
	return ubu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubu *UserBlockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserBlockMutation](ctx, ubu.sqlSave, ubu.mutation, ubu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubu *UserBlockUpdate) SaveX(ctx context.Context) int {
	affected, err := ubu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubu *UserBlockUpdate) Exec(ctx context.Context) error {
	_, err := ubu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubu *UserBlockUpdate) ExecX(ctx context.Context) {
	if err := ubu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubu *UserBlockUpdate) check() error {
	if _, ok := ubu.mutation.UserID(); ubu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBlock.user"`)
	}
	if _, ok := ubu.mutation.BlockUserID(); ubu.mutation.BlockUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBlock.block_user"`)
	}
	return nil
}

func (ubu *UserBlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ubu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userblock.Table,
			Columns: userblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userblock.FieldID,
			},
		},
	}
	if ps := ubu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubu.mutation.done = true
	return n, nil
}

// UserBlockUpdateOne is the builder for updating a single UserBlock entity.
type UserBlockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBlockMutation
}

// Mutation returns the UserBlockMutation object of the builder.
func (ubuo *UserBlockUpdateOne) Mutation() *UserBlockMutation {
	return ubuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubuo *UserBlockUpdateOne) Select(field string, fields ...string) *UserBlockUpdateOne {
	ubuo.fields = append([]string{field}, fields...)
	return ubuo
}

// Save executes the query and returns the updated UserBlock entity.
func (ubuo *UserBlockUpdateOne) Save(ctx context.Context) (*UserBlock, error) {
	return withHooks[*UserBlock, UserBlockMutation](ctx, ubuo.sqlSave, ubuo.mutation, ubuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubuo *UserBlockUpdateOne) SaveX(ctx context.Context) *UserBlock {
	node, err := ubuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubuo *UserBlockUpdateOne) Exec(ctx context.Context) error {
	_, err := ubuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubuo *UserBlockUpdateOne) ExecX(ctx context.Context) {
	if err := ubuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubuo *UserBlockUpdateOne) check() error {
	if _, ok := ubuo.mutation.UserID(); ubuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBlock.user"`)
	}
	if _, ok := ubuo.mutation.BlockUserID(); ubuo.mutation.BlockUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBlock.block_user"`)
	}
	return nil
}

func (ubuo *UserBlockUpdateOne) sqlSave(ctx context.Context) (_node *UserBlock, err error) {
	if err := ubuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userblock.Table,
			Columns: userblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userblock.FieldID,
			},
		},
	}
	id, ok := ubuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBlock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userblock.FieldID)
		for _, f := range fields {
			if !userblock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &UserBlock{config: ubuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubuo.mutation.done = true
	return _node, nil
}

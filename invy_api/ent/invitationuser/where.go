// Code generated by ent, DO NOT EDIT.

package invitationuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldLTE(FieldID, id))
}

// InvitationID applies equality check predicate on the "invitation_id" field. It's identical to InvitationIDEQ.
func InvitationID(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldInvitationID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldCreatedAt, v))
}

// InvitationIDEQ applies the EQ predicate on the "invitation_id" field.
func InvitationIDEQ(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldInvitationID, v))
}

// InvitationIDNEQ applies the NEQ predicate on the "invitation_id" field.
func InvitationIDNEQ(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNEQ(FieldInvitationID, v))
}

// InvitationIDIn applies the In predicate on the "invitation_id" field.
func InvitationIDIn(vs ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldIn(FieldInvitationID, vs...))
}

// InvitationIDNotIn applies the NotIn predicate on the "invitation_id" field.
func InvitationIDNotIn(vs ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNotIn(FieldInvitationID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNotIn(FieldUserID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InvitationUser {
	return predicate.InvitationUser(sql.FieldLTE(FieldCreatedAt, v))
}

// HasInvitation applies the HasEdge predicate on the "invitation" edge.
func HasInvitation() predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InvitationTable, InvitationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitationWith applies the HasEdge predicate on the "invitation" edge with a given conditions (other predicates).
func HasInvitationWith(preds ...predicate.Invitation) predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		step := newInvitationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InvitationUser) predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InvitationUser) predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InvitationUser) predicate.InvitationUser {
	return predicate.InvitationUser(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeUserProfile holds the string denoting the user_profile edge name in mutations.
	EdgeUserProfile = "user_profile"
	// EdgeUserLocation holds the string denoting the user_location edge name in mutations.
	EdgeUserLocation = "user_location"
	// EdgeFriendUsers holds the string denoting the friend_users edge name in mutations.
	EdgeFriendUsers = "friend_users"
	// EdgePushNotificationTokens holds the string denoting the push_notification_tokens edge name in mutations.
	EdgePushNotificationTokens = "push_notification_tokens"
	// EdgeFriendGroups holds the string denoting the friend_groups edge name in mutations.
	EdgeFriendGroups = "friend_groups"
	// EdgeBelongingFriendGroups holds the string denoting the belonging_friend_groups edge name in mutations.
	EdgeBelongingFriendGroups = "belonging_friend_groups"
	// EdgeInvitationAcceptances holds the string denoting the invitation_acceptances edge name in mutations.
	EdgeInvitationAcceptances = "invitation_acceptances"
	// EdgeInvitationDenials holds the string denoting the invitation_denials edge name in mutations.
	EdgeInvitationDenials = "invitation_denials"
	// EdgeFriendships holds the string denoting the friendships edge name in mutations.
	EdgeFriendships = "friendships"
	// EdgeUserFriendGroups holds the string denoting the user_friend_groups edge name in mutations.
	EdgeUserFriendGroups = "user_friend_groups"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "users"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_id"
	// UserProfileTable is the table that holds the user_profile relation/edge.
	UserProfileTable = "user_profiles"
	// UserProfileInverseTable is the table name for the UserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userprofile" package.
	UserProfileInverseTable = "user_profiles"
	// UserProfileColumn is the table column denoting the user_profile relation/edge.
	UserProfileColumn = "user_id"
	// UserLocationTable is the table that holds the user_location relation/edge.
	UserLocationTable = "user_locations"
	// UserLocationInverseTable is the table name for the UserLocation entity.
	// It exists in this package in order to avoid circular dependency with the "userlocation" package.
	UserLocationInverseTable = "user_locations"
	// UserLocationColumn is the table column denoting the user_location relation/edge.
	UserLocationColumn = "user_id"
	// FriendUsersTable is the table that holds the friend_users relation/edge. The primary key declared below.
	FriendUsersTable = "friendships"
	// PushNotificationTokensTable is the table that holds the push_notification_tokens relation/edge.
	PushNotificationTokensTable = "push_notification_tokens"
	// PushNotificationTokensInverseTable is the table name for the PushNotificationToken entity.
	// It exists in this package in order to avoid circular dependency with the "pushnotificationtoken" package.
	PushNotificationTokensInverseTable = "push_notification_tokens"
	// PushNotificationTokensColumn is the table column denoting the push_notification_tokens relation/edge.
	PushNotificationTokensColumn = "user_id"
	// FriendGroupsTable is the table that holds the friend_groups relation/edge.
	FriendGroupsTable = "friend_groups"
	// FriendGroupsInverseTable is the table name for the FriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "friendgroup" package.
	FriendGroupsInverseTable = "friend_groups"
	// FriendGroupsColumn is the table column denoting the friend_groups relation/edge.
	FriendGroupsColumn = "user_id"
	// BelongingFriendGroupsTable is the table that holds the belonging_friend_groups relation/edge. The primary key declared below.
	BelongingFriendGroupsTable = "user_friend_groups"
	// BelongingFriendGroupsInverseTable is the table name for the FriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "friendgroup" package.
	BelongingFriendGroupsInverseTable = "friend_groups"
	// InvitationAcceptancesTable is the table that holds the invitation_acceptances relation/edge.
	InvitationAcceptancesTable = "invitation_acceptances"
	// InvitationAcceptancesInverseTable is the table name for the InvitationAcceptance entity.
	// It exists in this package in order to avoid circular dependency with the "invitationacceptance" package.
	InvitationAcceptancesInverseTable = "invitation_acceptances"
	// InvitationAcceptancesColumn is the table column denoting the invitation_acceptances relation/edge.
	InvitationAcceptancesColumn = "user_id"
	// InvitationDenialsTable is the table that holds the invitation_denials relation/edge.
	InvitationDenialsTable = "invitation_denials"
	// InvitationDenialsInverseTable is the table name for the InvitationDenial entity.
	// It exists in this package in order to avoid circular dependency with the "invitationdenial" package.
	InvitationDenialsInverseTable = "invitation_denials"
	// InvitationDenialsColumn is the table column denoting the invitation_denials relation/edge.
	InvitationDenialsColumn = "user_id"
	// FriendshipsTable is the table that holds the friendships relation/edge.
	FriendshipsTable = "friendships"
	// FriendshipsInverseTable is the table name for the Friendship entity.
	// It exists in this package in order to avoid circular dependency with the "friendship" package.
	FriendshipsInverseTable = "friendships"
	// FriendshipsColumn is the table column denoting the friendships relation/edge.
	FriendshipsColumn = "user_id"
	// UserFriendGroupsTable is the table that holds the user_friend_groups relation/edge.
	UserFriendGroupsTable = "user_friend_groups"
	// UserFriendGroupsInverseTable is the table name for the UserFriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "userfriendgroup" package.
	UserFriendGroupsInverseTable = "user_friend_groups"
	// UserFriendGroupsColumn is the table column denoting the user_friend_groups relation/edge.
	UserFriendGroupsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldAccountID,
	FieldStatus,
	FieldCreatedAt,
}

var (
	// FriendUsersPrimaryKey and FriendUsersColumn2 are the table columns denoting the
	// primary key for the friend_users relation (M2M).
	FriendUsersPrimaryKey = []string{"user_id", "friend_user_id"}
	// BelongingFriendGroupsPrimaryKey and BelongingFriendGroupsColumn2 are the table columns denoting the
	// primary key for the belonging_friend_groups relation (M2M).
	BelongingFriendGroupsPrimaryKey = []string{"friend_group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive    Status = "active"
	StatusSuspended Status = "suspended"
	StatusDeleted   Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspended, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAccountField orders the results by account field.
func ByAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserProfileField orders the results by user_profile field.
func ByUserProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserLocationField orders the results by user_location field.
func ByUserLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendUsersCount orders the results by friend_users count.
func ByFriendUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendUsersStep(), opts...)
	}
}

// ByFriendUsers orders the results by friend_users terms.
func ByFriendUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPushNotificationTokensCount orders the results by push_notification_tokens count.
func ByPushNotificationTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPushNotificationTokensStep(), opts...)
	}
}

// ByPushNotificationTokens orders the results by push_notification_tokens terms.
func ByPushNotificationTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPushNotificationTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendGroupsCount orders the results by friend_groups count.
func ByFriendGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendGroupsStep(), opts...)
	}
}

// ByFriendGroups orders the results by friend_groups terms.
func ByFriendGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBelongingFriendGroupsCount orders the results by belonging_friend_groups count.
func ByBelongingFriendGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBelongingFriendGroupsStep(), opts...)
	}
}

// ByBelongingFriendGroups orders the results by belonging_friend_groups terms.
func ByBelongingFriendGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBelongingFriendGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitationAcceptancesCount orders the results by invitation_acceptances count.
func ByInvitationAcceptancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitationAcceptancesStep(), opts...)
	}
}

// ByInvitationAcceptances orders the results by invitation_acceptances terms.
func ByInvitationAcceptances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitationAcceptancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitationDenialsCount orders the results by invitation_denials count.
func ByInvitationDenialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitationDenialsStep(), opts...)
	}
}

// ByInvitationDenials orders the results by invitation_denials terms.
func ByInvitationDenials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitationDenialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendshipsCount orders the results by friendships count.
func ByFriendshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendshipsStep(), opts...)
	}
}

// ByFriendships orders the results by friendships terms.
func ByFriendships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserFriendGroupsCount orders the results by user_friend_groups count.
func ByUserFriendGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserFriendGroupsStep(), opts...)
	}
}

// ByUserFriendGroups orders the results by user_friend_groups terms.
func ByUserFriendGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserFriendGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AccountTable, AccountColumn),
	)
}
func newUserProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserProfileTable, UserProfileColumn),
	)
}
func newUserLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserLocationTable, UserLocationColumn),
	)
}
func newFriendUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FriendUsersTable, FriendUsersPrimaryKey...),
	)
}
func newPushNotificationTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PushNotificationTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PushNotificationTokensTable, PushNotificationTokensColumn),
	)
}
func newFriendGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FriendGroupsTable, FriendGroupsColumn),
	)
}
func newBelongingFriendGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BelongingFriendGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BelongingFriendGroupsTable, BelongingFriendGroupsPrimaryKey...),
	)
}
func newInvitationAcceptancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitationAcceptancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InvitationAcceptancesTable, InvitationAcceptancesColumn),
	)
}
func newInvitationDenialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitationDenialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InvitationDenialsTable, InvitationDenialsColumn),
	)
}
func newFriendshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FriendshipsTable, FriendshipsColumn),
	)
}
func newUserFriendGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserFriendGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserFriendGroupsTable, UserFriendGroupsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

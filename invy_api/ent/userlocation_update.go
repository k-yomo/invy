// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
	"github.com/k-yomo/invy/pkg/pgutil"
)

// UserLocationUpdate is the builder for updating UserLocation entities.
type UserLocationUpdate struct {
	config
	hooks    []Hook
	mutation *UserLocationMutation
}

// Where appends a list predicates to the UserLocationUpdate builder.
func (ulu *UserLocationUpdate) Where(ps ...predicate.UserLocation) *UserLocationUpdate {
	ulu.mutation.Where(ps...)
	return ulu
}

// SetCoordinate sets the "coordinate" field.
func (ulu *UserLocationUpdate) SetCoordinate(pp *pgutil.GeoPoint) *UserLocationUpdate {
	ulu.mutation.SetCoordinate(pp)
	return ulu
}

// SetUpdatedAt sets the "updated_at" field.
func (ulu *UserLocationUpdate) SetUpdatedAt(t time.Time) *UserLocationUpdate {
	ulu.mutation.SetUpdatedAt(t)
	return ulu
}

// Mutation returns the UserLocationMutation object of the builder.
func (ulu *UserLocationUpdate) Mutation() *UserLocationMutation {
	return ulu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLocationUpdate) Save(ctx context.Context) (int, error) {
	ulu.defaults()
	return withHooks[int, UserLocationMutation](ctx, ulu.sqlSave, ulu.mutation, ulu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLocationUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLocationUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulu *UserLocationUpdate) defaults() {
	if _, ok := ulu.mutation.UpdatedAt(); !ok {
		v := userlocation.UpdateDefaultUpdatedAt()
		ulu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulu *UserLocationUpdate) check() error {
	if _, ok := ulu.mutation.UserID(); ulu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserLocation.user"`)
	}
	return nil
}

func (ulu *UserLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ulu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocation.Table,
			Columns: userlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userlocation.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.Coordinate(); ok {
		_spec.SetField(userlocation.FieldCoordinate, field.TypeOther, value)
	}
	if value, ok := ulu.mutation.UpdatedAt(); ok {
		_spec.SetField(userlocation.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ulu.mutation.done = true
	return n, nil
}

// UserLocationUpdateOne is the builder for updating a single UserLocation entity.
type UserLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLocationMutation
}

// SetCoordinate sets the "coordinate" field.
func (uluo *UserLocationUpdateOne) SetCoordinate(pp *pgutil.GeoPoint) *UserLocationUpdateOne {
	uluo.mutation.SetCoordinate(pp)
	return uluo
}

// SetUpdatedAt sets the "updated_at" field.
func (uluo *UserLocationUpdateOne) SetUpdatedAt(t time.Time) *UserLocationUpdateOne {
	uluo.mutation.SetUpdatedAt(t)
	return uluo
}

// Mutation returns the UserLocationMutation object of the builder.
func (uluo *UserLocationUpdateOne) Mutation() *UserLocationMutation {
	return uluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLocationUpdateOne) Select(field string, fields ...string) *UserLocationUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLocation entity.
func (uluo *UserLocationUpdateOne) Save(ctx context.Context) (*UserLocation, error) {
	uluo.defaults()
	return withHooks[*UserLocation, UserLocationMutation](ctx, uluo.sqlSave, uluo.mutation, uluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLocationUpdateOne) SaveX(ctx context.Context) *UserLocation {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLocationUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uluo *UserLocationUpdateOne) defaults() {
	if _, ok := uluo.mutation.UpdatedAt(); !ok {
		v := userlocation.UpdateDefaultUpdatedAt()
		uluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uluo *UserLocationUpdateOne) check() error {
	if _, ok := uluo.mutation.UserID(); uluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserLocation.user"`)
	}
	return nil
}

func (uluo *UserLocationUpdateOne) sqlSave(ctx context.Context) (_node *UserLocation, err error) {
	if err := uluo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocation.Table,
			Columns: userlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userlocation.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlocation.FieldID)
		for _, f := range fields {
			if !userlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.Coordinate(); ok {
		_spec.SetField(userlocation.FieldCoordinate, field.TypeOther, value)
	}
	if value, ok := uluo.mutation.UpdatedAt(); ok {
		_spec.SetField(userlocation.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &UserLocation{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uluo.mutation.done = true
	return _node, nil
}

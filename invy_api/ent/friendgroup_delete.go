// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
)

// FriendGroupDelete is the builder for deleting a FriendGroup entity.
type FriendGroupDelete struct {
	config
	hooks    []Hook
	mutation *FriendGroupMutation
}

// Where appends a list predicates to the FriendGroupDelete builder.
func (fgd *FriendGroupDelete) Where(ps ...predicate.FriendGroup) *FriendGroupDelete {
	fgd.mutation.Where(ps...)
	return fgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fgd *FriendGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, FriendGroupMutation](ctx, fgd.sqlExec, fgd.mutation, fgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fgd *FriendGroupDelete) ExecX(ctx context.Context) int {
	n, err := fgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fgd *FriendGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(friendgroup.Table, sqlgraph.NewFieldSpec(friendgroup.FieldID, field.TypeUUID))
	if ps := fgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fgd.mutation.done = true
	return affected, err
}

// FriendGroupDeleteOne is the builder for deleting a single FriendGroup entity.
type FriendGroupDeleteOne struct {
	fgd *FriendGroupDelete
}

// Where appends a list predicates to the FriendGroupDelete builder.
func (fgdo *FriendGroupDeleteOne) Where(ps ...predicate.FriendGroup) *FriendGroupDeleteOne {
	fgdo.fgd.mutation.Where(ps...)
	return fgdo
}

// Exec executes the deletion query.
func (fgdo *FriendGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := fgdo.fgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{friendgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fgdo *FriendGroupDeleteOne) ExecX(ctx context.Context) {
	if err := fgdo.Exec(ctx); err != nil {
		panic(err)
	}
}

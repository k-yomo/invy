// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/account"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/friendshiprequest"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationawaiting"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/invitationuser"
	"github.com/k-yomo/invy/invy_api/ent/pushnotificationtoken"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userblock"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
	"github.com/k-yomo/invy/invy_api/ent/userlocationhistory"
	"github.com/k-yomo/invy/invy_api/ent/usermute"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AccountEdge is the edge representation of Account.
type AccountEdge struct {
	Node   *Account `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AccountConnection is the connection containing edges to Account.
type AccountConnection struct {
	Edges      []*AccountEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AccountConnection) build(nodes []*Account, pager *accountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Account
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Account {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Account {
			return nodes[i]
		}
	}
	c.Edges = make([]*AccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AccountPaginateOption enables pagination customization.
type AccountPaginateOption func(*accountPager) error

// WithAccountOrder configures pagination ordering.
func WithAccountOrder(order *AccountOrder) AccountPaginateOption {
	if order == nil {
		order = DefaultAccountOrder
	}
	o := *order
	return func(pager *accountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAccountFilter configures pagination filter.
func WithAccountFilter(filter func(*AccountQuery) (*AccountQuery, error)) AccountPaginateOption {
	return func(pager *accountPager) error {
		if filter == nil {
			return errors.New("AccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type accountPager struct {
	order  *AccountOrder
	filter func(*AccountQuery) (*AccountQuery, error)
}

func newAccountPager(opts []AccountPaginateOption) (*accountPager, error) {
	pager := &accountPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAccountOrder
	}
	return pager, nil
}

func (p *accountPager) applyFilter(query *AccountQuery) (*AccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *accountPager) toCursor(a *Account) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *accountPager) applyCursors(query *AccountQuery, after, before *Cursor) *AccountQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAccountOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *accountPager) applyOrder(query *AccountQuery, reverse bool) *AccountQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAccountOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAccountOrder.Field.field))
	}
	return query
}

func (p *accountPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAccountOrder.Field {
			b.Comma().Ident(DefaultAccountOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Account.
func (a *AccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AccountPaginateOption,
) (*AccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAccountPager(opts)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AccountConnection{Edges: []*AccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AccountOrderField defines the ordering field of Account.
type AccountOrderField struct {
	field    string
	toCursor func(*Account) Cursor
}

// AccountOrder defines the ordering of Account.
type AccountOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AccountOrderField `json:"field"`
}

// DefaultAccountOrder is the default ordering of Account.
var DefaultAccountOrder = &AccountOrder{
	Direction: OrderDirectionAsc,
	Field: &AccountOrderField{
		field: account.FieldID,
		toCursor: func(a *Account) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Account into AccountEdge.
func (a *Account) ToEdge(order *AccountOrder) *AccountEdge {
	if order == nil {
		order = DefaultAccountOrder
	}
	return &AccountEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// FriendGroupEdge is the edge representation of FriendGroup.
type FriendGroupEdge struct {
	Node   *FriendGroup `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// FriendGroupConnection is the connection containing edges to FriendGroup.
type FriendGroupConnection struct {
	Edges      []*FriendGroupEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *FriendGroupConnection) build(nodes []*FriendGroup, pager *friendgroupPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *FriendGroup
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FriendGroup {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FriendGroup {
			return nodes[i]
		}
	}
	c.Edges = make([]*FriendGroupEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FriendGroupEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FriendGroupPaginateOption enables pagination customization.
type FriendGroupPaginateOption func(*friendgroupPager) error

// WithFriendGroupOrder configures pagination ordering.
func WithFriendGroupOrder(order *FriendGroupOrder) FriendGroupPaginateOption {
	if order == nil {
		order = DefaultFriendGroupOrder
	}
	o := *order
	return func(pager *friendgroupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFriendGroupOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFriendGroupFilter configures pagination filter.
func WithFriendGroupFilter(filter func(*FriendGroupQuery) (*FriendGroupQuery, error)) FriendGroupPaginateOption {
	return func(pager *friendgroupPager) error {
		if filter == nil {
			return errors.New("FriendGroupQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type friendgroupPager struct {
	order  *FriendGroupOrder
	filter func(*FriendGroupQuery) (*FriendGroupQuery, error)
}

func newFriendGroupPager(opts []FriendGroupPaginateOption) (*friendgroupPager, error) {
	pager := &friendgroupPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFriendGroupOrder
	}
	return pager, nil
}

func (p *friendgroupPager) applyFilter(query *FriendGroupQuery) (*FriendGroupQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *friendgroupPager) toCursor(fg *FriendGroup) Cursor {
	return p.order.Field.toCursor(fg)
}

func (p *friendgroupPager) applyCursors(query *FriendGroupQuery, after, before *Cursor) *FriendGroupQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFriendGroupOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *friendgroupPager) applyOrder(query *FriendGroupQuery, reverse bool) *FriendGroupQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFriendGroupOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFriendGroupOrder.Field.field))
	}
	return query
}

func (p *friendgroupPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFriendGroupOrder.Field {
			b.Comma().Ident(DefaultFriendGroupOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to FriendGroup.
func (fg *FriendGroupQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FriendGroupPaginateOption,
) (*FriendGroupConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFriendGroupPager(opts)
	if err != nil {
		return nil, err
	}
	if fg, err = pager.applyFilter(fg); err != nil {
		return nil, err
	}
	conn := &FriendGroupConnection{Edges: []*FriendGroupEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = fg.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	fg = pager.applyCursors(fg, after, before)
	fg = pager.applyOrder(fg, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		fg.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := fg.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := fg.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FriendGroupOrderField defines the ordering field of FriendGroup.
type FriendGroupOrderField struct {
	field    string
	toCursor func(*FriendGroup) Cursor
}

// FriendGroupOrder defines the ordering of FriendGroup.
type FriendGroupOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *FriendGroupOrderField `json:"field"`
}

// DefaultFriendGroupOrder is the default ordering of FriendGroup.
var DefaultFriendGroupOrder = &FriendGroupOrder{
	Direction: OrderDirectionAsc,
	Field: &FriendGroupOrderField{
		field: friendgroup.FieldID,
		toCursor: func(fg *FriendGroup) Cursor {
			return Cursor{ID: fg.ID}
		},
	},
}

// ToEdge converts FriendGroup into FriendGroupEdge.
func (fg *FriendGroup) ToEdge(order *FriendGroupOrder) *FriendGroupEdge {
	if order == nil {
		order = DefaultFriendGroupOrder
	}
	return &FriendGroupEdge{
		Node:   fg,
		Cursor: order.Field.toCursor(fg),
	}
}

// FriendshipEdge is the edge representation of Friendship.
type FriendshipEdge struct {
	Node   *Friendship `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// FriendshipConnection is the connection containing edges to Friendship.
type FriendshipConnection struct {
	Edges      []*FriendshipEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *FriendshipConnection) build(nodes []*Friendship, pager *friendshipPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Friendship
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Friendship {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Friendship {
			return nodes[i]
		}
	}
	c.Edges = make([]*FriendshipEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FriendshipEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FriendshipPaginateOption enables pagination customization.
type FriendshipPaginateOption func(*friendshipPager) error

// WithFriendshipOrder configures pagination ordering.
func WithFriendshipOrder(order *FriendshipOrder) FriendshipPaginateOption {
	if order == nil {
		order = DefaultFriendshipOrder
	}
	o := *order
	return func(pager *friendshipPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFriendshipOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFriendshipFilter configures pagination filter.
func WithFriendshipFilter(filter func(*FriendshipQuery) (*FriendshipQuery, error)) FriendshipPaginateOption {
	return func(pager *friendshipPager) error {
		if filter == nil {
			return errors.New("FriendshipQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type friendshipPager struct {
	order  *FriendshipOrder
	filter func(*FriendshipQuery) (*FriendshipQuery, error)
}

func newFriendshipPager(opts []FriendshipPaginateOption) (*friendshipPager, error) {
	pager := &friendshipPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFriendshipOrder
	}
	return pager, nil
}

func (p *friendshipPager) applyFilter(query *FriendshipQuery) (*FriendshipQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *friendshipPager) toCursor(f *Friendship) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *friendshipPager) applyCursors(query *FriendshipQuery, after, before *Cursor) *FriendshipQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFriendshipOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *friendshipPager) applyOrder(query *FriendshipQuery, reverse bool) *FriendshipQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFriendshipOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFriendshipOrder.Field.field))
	}
	return query
}

func (p *friendshipPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFriendshipOrder.Field {
			b.Comma().Ident(DefaultFriendshipOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Friendship.
func (f *FriendshipQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FriendshipPaginateOption,
) (*FriendshipConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFriendshipPager(opts)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FriendshipConnection{Edges: []*FriendshipEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	f = pager.applyCursors(f, after, before)
	f = pager.applyOrder(f, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FriendshipOrderField defines the ordering field of Friendship.
type FriendshipOrderField struct {
	field    string
	toCursor func(*Friendship) Cursor
}

// FriendshipOrder defines the ordering of Friendship.
type FriendshipOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *FriendshipOrderField `json:"field"`
}

// DefaultFriendshipOrder is the default ordering of Friendship.
var DefaultFriendshipOrder = &FriendshipOrder{
	Direction: OrderDirectionAsc,
	Field: &FriendshipOrderField{
		field: friendship.FieldID,
		toCursor: func(f *Friendship) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Friendship into FriendshipEdge.
func (f *Friendship) ToEdge(order *FriendshipOrder) *FriendshipEdge {
	if order == nil {
		order = DefaultFriendshipOrder
	}
	return &FriendshipEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// FriendshipRequestEdge is the edge representation of FriendshipRequest.
type FriendshipRequestEdge struct {
	Node   *FriendshipRequest `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// FriendshipRequestConnection is the connection containing edges to FriendshipRequest.
type FriendshipRequestConnection struct {
	Edges      []*FriendshipRequestEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *FriendshipRequestConnection) build(nodes []*FriendshipRequest, pager *friendshiprequestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *FriendshipRequest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FriendshipRequest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FriendshipRequest {
			return nodes[i]
		}
	}
	c.Edges = make([]*FriendshipRequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FriendshipRequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FriendshipRequestPaginateOption enables pagination customization.
type FriendshipRequestPaginateOption func(*friendshiprequestPager) error

// WithFriendshipRequestOrder configures pagination ordering.
func WithFriendshipRequestOrder(order *FriendshipRequestOrder) FriendshipRequestPaginateOption {
	if order == nil {
		order = DefaultFriendshipRequestOrder
	}
	o := *order
	return func(pager *friendshiprequestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFriendshipRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFriendshipRequestFilter configures pagination filter.
func WithFriendshipRequestFilter(filter func(*FriendshipRequestQuery) (*FriendshipRequestQuery, error)) FriendshipRequestPaginateOption {
	return func(pager *friendshiprequestPager) error {
		if filter == nil {
			return errors.New("FriendshipRequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type friendshiprequestPager struct {
	order  *FriendshipRequestOrder
	filter func(*FriendshipRequestQuery) (*FriendshipRequestQuery, error)
}

func newFriendshipRequestPager(opts []FriendshipRequestPaginateOption) (*friendshiprequestPager, error) {
	pager := &friendshiprequestPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFriendshipRequestOrder
	}
	return pager, nil
}

func (p *friendshiprequestPager) applyFilter(query *FriendshipRequestQuery) (*FriendshipRequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *friendshiprequestPager) toCursor(fr *FriendshipRequest) Cursor {
	return p.order.Field.toCursor(fr)
}

func (p *friendshiprequestPager) applyCursors(query *FriendshipRequestQuery, after, before *Cursor) *FriendshipRequestQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFriendshipRequestOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *friendshiprequestPager) applyOrder(query *FriendshipRequestQuery, reverse bool) *FriendshipRequestQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFriendshipRequestOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFriendshipRequestOrder.Field.field))
	}
	return query
}

func (p *friendshiprequestPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFriendshipRequestOrder.Field {
			b.Comma().Ident(DefaultFriendshipRequestOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to FriendshipRequest.
func (fr *FriendshipRequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FriendshipRequestPaginateOption,
) (*FriendshipRequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFriendshipRequestPager(opts)
	if err != nil {
		return nil, err
	}
	if fr, err = pager.applyFilter(fr); err != nil {
		return nil, err
	}
	conn := &FriendshipRequestConnection{Edges: []*FriendshipRequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = fr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	fr = pager.applyCursors(fr, after, before)
	fr = pager.applyOrder(fr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		fr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := fr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := fr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FriendshipRequestOrderField defines the ordering field of FriendshipRequest.
type FriendshipRequestOrderField struct {
	field    string
	toCursor func(*FriendshipRequest) Cursor
}

// FriendshipRequestOrder defines the ordering of FriendshipRequest.
type FriendshipRequestOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *FriendshipRequestOrderField `json:"field"`
}

// DefaultFriendshipRequestOrder is the default ordering of FriendshipRequest.
var DefaultFriendshipRequestOrder = &FriendshipRequestOrder{
	Direction: OrderDirectionAsc,
	Field: &FriendshipRequestOrderField{
		field: friendshiprequest.FieldID,
		toCursor: func(fr *FriendshipRequest) Cursor {
			return Cursor{ID: fr.ID}
		},
	},
}

// ToEdge converts FriendshipRequest into FriendshipRequestEdge.
func (fr *FriendshipRequest) ToEdge(order *FriendshipRequestOrder) *FriendshipRequestEdge {
	if order == nil {
		order = DefaultFriendshipRequestOrder
	}
	return &FriendshipRequestEdge{
		Node:   fr,
		Cursor: order.Field.toCursor(fr),
	}
}

// InvitationEdge is the edge representation of Invitation.
type InvitationEdge struct {
	Node   *Invitation `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// InvitationConnection is the connection containing edges to Invitation.
type InvitationConnection struct {
	Edges      []*InvitationEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *InvitationConnection) build(nodes []*Invitation, pager *invitationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Invitation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Invitation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Invitation {
			return nodes[i]
		}
	}
	c.Edges = make([]*InvitationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InvitationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InvitationPaginateOption enables pagination customization.
type InvitationPaginateOption func(*invitationPager) error

// WithInvitationOrder configures pagination ordering.
func WithInvitationOrder(order *InvitationOrder) InvitationPaginateOption {
	if order == nil {
		order = DefaultInvitationOrder
	}
	o := *order
	return func(pager *invitationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInvitationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInvitationFilter configures pagination filter.
func WithInvitationFilter(filter func(*InvitationQuery) (*InvitationQuery, error)) InvitationPaginateOption {
	return func(pager *invitationPager) error {
		if filter == nil {
			return errors.New("InvitationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type invitationPager struct {
	order  *InvitationOrder
	filter func(*InvitationQuery) (*InvitationQuery, error)
}

func newInvitationPager(opts []InvitationPaginateOption) (*invitationPager, error) {
	pager := &invitationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInvitationOrder
	}
	return pager, nil
}

func (p *invitationPager) applyFilter(query *InvitationQuery) (*InvitationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *invitationPager) toCursor(i *Invitation) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *invitationPager) applyCursors(query *InvitationQuery, after, before *Cursor) *InvitationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInvitationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *invitationPager) applyOrder(query *InvitationQuery, reverse bool) *InvitationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInvitationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInvitationOrder.Field.field))
	}
	return query
}

func (p *invitationPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInvitationOrder.Field {
			b.Comma().Ident(DefaultInvitationOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Invitation.
func (i *InvitationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InvitationPaginateOption,
) (*InvitationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInvitationPager(opts)
	if err != nil {
		return nil, err
	}
	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}
	conn := &InvitationConnection{Edges: []*InvitationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = i.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		i.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := i.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := i.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// InvitationOrderField defines the ordering field of Invitation.
type InvitationOrderField struct {
	field    string
	toCursor func(*Invitation) Cursor
}

// InvitationOrder defines the ordering of Invitation.
type InvitationOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *InvitationOrderField `json:"field"`
}

// DefaultInvitationOrder is the default ordering of Invitation.
var DefaultInvitationOrder = &InvitationOrder{
	Direction: OrderDirectionAsc,
	Field: &InvitationOrderField{
		field: invitation.FieldID,
		toCursor: func(i *Invitation) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Invitation into InvitationEdge.
func (i *Invitation) ToEdge(order *InvitationOrder) *InvitationEdge {
	if order == nil {
		order = DefaultInvitationOrder
	}
	return &InvitationEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// InvitationAcceptanceEdge is the edge representation of InvitationAcceptance.
type InvitationAcceptanceEdge struct {
	Node   *InvitationAcceptance `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

// InvitationAcceptanceConnection is the connection containing edges to InvitationAcceptance.
type InvitationAcceptanceConnection struct {
	Edges      []*InvitationAcceptanceEdge `json:"edges"`
	PageInfo   PageInfo                    `json:"pageInfo"`
	TotalCount int                         `json:"totalCount"`
}

func (c *InvitationAcceptanceConnection) build(nodes []*InvitationAcceptance, pager *invitationacceptancePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InvitationAcceptance
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InvitationAcceptance {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InvitationAcceptance {
			return nodes[i]
		}
	}
	c.Edges = make([]*InvitationAcceptanceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InvitationAcceptanceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InvitationAcceptancePaginateOption enables pagination customization.
type InvitationAcceptancePaginateOption func(*invitationacceptancePager) error

// WithInvitationAcceptanceOrder configures pagination ordering.
func WithInvitationAcceptanceOrder(order *InvitationAcceptanceOrder) InvitationAcceptancePaginateOption {
	if order == nil {
		order = DefaultInvitationAcceptanceOrder
	}
	o := *order
	return func(pager *invitationacceptancePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInvitationAcceptanceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInvitationAcceptanceFilter configures pagination filter.
func WithInvitationAcceptanceFilter(filter func(*InvitationAcceptanceQuery) (*InvitationAcceptanceQuery, error)) InvitationAcceptancePaginateOption {
	return func(pager *invitationacceptancePager) error {
		if filter == nil {
			return errors.New("InvitationAcceptanceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type invitationacceptancePager struct {
	order  *InvitationAcceptanceOrder
	filter func(*InvitationAcceptanceQuery) (*InvitationAcceptanceQuery, error)
}

func newInvitationAcceptancePager(opts []InvitationAcceptancePaginateOption) (*invitationacceptancePager, error) {
	pager := &invitationacceptancePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInvitationAcceptanceOrder
	}
	return pager, nil
}

func (p *invitationacceptancePager) applyFilter(query *InvitationAcceptanceQuery) (*InvitationAcceptanceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *invitationacceptancePager) toCursor(ia *InvitationAcceptance) Cursor {
	return p.order.Field.toCursor(ia)
}

func (p *invitationacceptancePager) applyCursors(query *InvitationAcceptanceQuery, after, before *Cursor) *InvitationAcceptanceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInvitationAcceptanceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *invitationacceptancePager) applyOrder(query *InvitationAcceptanceQuery, reverse bool) *InvitationAcceptanceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInvitationAcceptanceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInvitationAcceptanceOrder.Field.field))
	}
	return query
}

func (p *invitationacceptancePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInvitationAcceptanceOrder.Field {
			b.Comma().Ident(DefaultInvitationAcceptanceOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InvitationAcceptance.
func (ia *InvitationAcceptanceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InvitationAcceptancePaginateOption,
) (*InvitationAcceptanceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInvitationAcceptancePager(opts)
	if err != nil {
		return nil, err
	}
	if ia, err = pager.applyFilter(ia); err != nil {
		return nil, err
	}
	conn := &InvitationAcceptanceConnection{Edges: []*InvitationAcceptanceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ia.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ia = pager.applyCursors(ia, after, before)
	ia = pager.applyOrder(ia, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ia.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ia.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ia.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// InvitationAcceptanceOrderField defines the ordering field of InvitationAcceptance.
type InvitationAcceptanceOrderField struct {
	field    string
	toCursor func(*InvitationAcceptance) Cursor
}

// InvitationAcceptanceOrder defines the ordering of InvitationAcceptance.
type InvitationAcceptanceOrder struct {
	Direction OrderDirection                  `json:"direction"`
	Field     *InvitationAcceptanceOrderField `json:"field"`
}

// DefaultInvitationAcceptanceOrder is the default ordering of InvitationAcceptance.
var DefaultInvitationAcceptanceOrder = &InvitationAcceptanceOrder{
	Direction: OrderDirectionAsc,
	Field: &InvitationAcceptanceOrderField{
		field: invitationacceptance.FieldID,
		toCursor: func(ia *InvitationAcceptance) Cursor {
			return Cursor{ID: ia.ID}
		},
	},
}

// ToEdge converts InvitationAcceptance into InvitationAcceptanceEdge.
func (ia *InvitationAcceptance) ToEdge(order *InvitationAcceptanceOrder) *InvitationAcceptanceEdge {
	if order == nil {
		order = DefaultInvitationAcceptanceOrder
	}
	return &InvitationAcceptanceEdge{
		Node:   ia,
		Cursor: order.Field.toCursor(ia),
	}
}

// InvitationAwaitingEdge is the edge representation of InvitationAwaiting.
type InvitationAwaitingEdge struct {
	Node   *InvitationAwaiting `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// InvitationAwaitingConnection is the connection containing edges to InvitationAwaiting.
type InvitationAwaitingConnection struct {
	Edges      []*InvitationAwaitingEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

func (c *InvitationAwaitingConnection) build(nodes []*InvitationAwaiting, pager *invitationawaitingPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InvitationAwaiting
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InvitationAwaiting {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InvitationAwaiting {
			return nodes[i]
		}
	}
	c.Edges = make([]*InvitationAwaitingEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InvitationAwaitingEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InvitationAwaitingPaginateOption enables pagination customization.
type InvitationAwaitingPaginateOption func(*invitationawaitingPager) error

// WithInvitationAwaitingOrder configures pagination ordering.
func WithInvitationAwaitingOrder(order *InvitationAwaitingOrder) InvitationAwaitingPaginateOption {
	if order == nil {
		order = DefaultInvitationAwaitingOrder
	}
	o := *order
	return func(pager *invitationawaitingPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInvitationAwaitingOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInvitationAwaitingFilter configures pagination filter.
func WithInvitationAwaitingFilter(filter func(*InvitationAwaitingQuery) (*InvitationAwaitingQuery, error)) InvitationAwaitingPaginateOption {
	return func(pager *invitationawaitingPager) error {
		if filter == nil {
			return errors.New("InvitationAwaitingQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type invitationawaitingPager struct {
	order  *InvitationAwaitingOrder
	filter func(*InvitationAwaitingQuery) (*InvitationAwaitingQuery, error)
}

func newInvitationAwaitingPager(opts []InvitationAwaitingPaginateOption) (*invitationawaitingPager, error) {
	pager := &invitationawaitingPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInvitationAwaitingOrder
	}
	return pager, nil
}

func (p *invitationawaitingPager) applyFilter(query *InvitationAwaitingQuery) (*InvitationAwaitingQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *invitationawaitingPager) toCursor(ia *InvitationAwaiting) Cursor {
	return p.order.Field.toCursor(ia)
}

func (p *invitationawaitingPager) applyCursors(query *InvitationAwaitingQuery, after, before *Cursor) *InvitationAwaitingQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInvitationAwaitingOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *invitationawaitingPager) applyOrder(query *InvitationAwaitingQuery, reverse bool) *InvitationAwaitingQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInvitationAwaitingOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInvitationAwaitingOrder.Field.field))
	}
	return query
}

func (p *invitationawaitingPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInvitationAwaitingOrder.Field {
			b.Comma().Ident(DefaultInvitationAwaitingOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InvitationAwaiting.
func (ia *InvitationAwaitingQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InvitationAwaitingPaginateOption,
) (*InvitationAwaitingConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInvitationAwaitingPager(opts)
	if err != nil {
		return nil, err
	}
	if ia, err = pager.applyFilter(ia); err != nil {
		return nil, err
	}
	conn := &InvitationAwaitingConnection{Edges: []*InvitationAwaitingEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ia.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ia = pager.applyCursors(ia, after, before)
	ia = pager.applyOrder(ia, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ia.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ia.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ia.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// InvitationAwaitingOrderField defines the ordering field of InvitationAwaiting.
type InvitationAwaitingOrderField struct {
	field    string
	toCursor func(*InvitationAwaiting) Cursor
}

// InvitationAwaitingOrder defines the ordering of InvitationAwaiting.
type InvitationAwaitingOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *InvitationAwaitingOrderField `json:"field"`
}

// DefaultInvitationAwaitingOrder is the default ordering of InvitationAwaiting.
var DefaultInvitationAwaitingOrder = &InvitationAwaitingOrder{
	Direction: OrderDirectionAsc,
	Field: &InvitationAwaitingOrderField{
		field: invitationawaiting.FieldID,
		toCursor: func(ia *InvitationAwaiting) Cursor {
			return Cursor{ID: ia.ID}
		},
	},
}

// ToEdge converts InvitationAwaiting into InvitationAwaitingEdge.
func (ia *InvitationAwaiting) ToEdge(order *InvitationAwaitingOrder) *InvitationAwaitingEdge {
	if order == nil {
		order = DefaultInvitationAwaitingOrder
	}
	return &InvitationAwaitingEdge{
		Node:   ia,
		Cursor: order.Field.toCursor(ia),
	}
}

// InvitationDenialEdge is the edge representation of InvitationDenial.
type InvitationDenialEdge struct {
	Node   *InvitationDenial `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// InvitationDenialConnection is the connection containing edges to InvitationDenial.
type InvitationDenialConnection struct {
	Edges      []*InvitationDenialEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *InvitationDenialConnection) build(nodes []*InvitationDenial, pager *invitationdenialPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InvitationDenial
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InvitationDenial {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InvitationDenial {
			return nodes[i]
		}
	}
	c.Edges = make([]*InvitationDenialEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InvitationDenialEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InvitationDenialPaginateOption enables pagination customization.
type InvitationDenialPaginateOption func(*invitationdenialPager) error

// WithInvitationDenialOrder configures pagination ordering.
func WithInvitationDenialOrder(order *InvitationDenialOrder) InvitationDenialPaginateOption {
	if order == nil {
		order = DefaultInvitationDenialOrder
	}
	o := *order
	return func(pager *invitationdenialPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInvitationDenialOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInvitationDenialFilter configures pagination filter.
func WithInvitationDenialFilter(filter func(*InvitationDenialQuery) (*InvitationDenialQuery, error)) InvitationDenialPaginateOption {
	return func(pager *invitationdenialPager) error {
		if filter == nil {
			return errors.New("InvitationDenialQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type invitationdenialPager struct {
	order  *InvitationDenialOrder
	filter func(*InvitationDenialQuery) (*InvitationDenialQuery, error)
}

func newInvitationDenialPager(opts []InvitationDenialPaginateOption) (*invitationdenialPager, error) {
	pager := &invitationdenialPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInvitationDenialOrder
	}
	return pager, nil
}

func (p *invitationdenialPager) applyFilter(query *InvitationDenialQuery) (*InvitationDenialQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *invitationdenialPager) toCursor(id *InvitationDenial) Cursor {
	return p.order.Field.toCursor(id)
}

func (p *invitationdenialPager) applyCursors(query *InvitationDenialQuery, after, before *Cursor) *InvitationDenialQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInvitationDenialOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *invitationdenialPager) applyOrder(query *InvitationDenialQuery, reverse bool) *InvitationDenialQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInvitationDenialOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInvitationDenialOrder.Field.field))
	}
	return query
}

func (p *invitationdenialPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInvitationDenialOrder.Field {
			b.Comma().Ident(DefaultInvitationDenialOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InvitationDenial.
func (id *InvitationDenialQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InvitationDenialPaginateOption,
) (*InvitationDenialConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInvitationDenialPager(opts)
	if err != nil {
		return nil, err
	}
	if id, err = pager.applyFilter(id); err != nil {
		return nil, err
	}
	conn := &InvitationDenialConnection{Edges: []*InvitationDenialEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = id.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	id = pager.applyCursors(id, after, before)
	id = pager.applyOrder(id, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		id.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := id.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := id.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// InvitationDenialOrderField defines the ordering field of InvitationDenial.
type InvitationDenialOrderField struct {
	field    string
	toCursor func(*InvitationDenial) Cursor
}

// InvitationDenialOrder defines the ordering of InvitationDenial.
type InvitationDenialOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *InvitationDenialOrderField `json:"field"`
}

// DefaultInvitationDenialOrder is the default ordering of InvitationDenial.
var DefaultInvitationDenialOrder = &InvitationDenialOrder{
	Direction: OrderDirectionAsc,
	Field: &InvitationDenialOrderField{
		field: invitationdenial.FieldID,
		toCursor: func(id *InvitationDenial) Cursor {
			return Cursor{ID: id.ID}
		},
	},
}

// ToEdge converts InvitationDenial into InvitationDenialEdge.
func (id *InvitationDenial) ToEdge(order *InvitationDenialOrder) *InvitationDenialEdge {
	if order == nil {
		order = DefaultInvitationDenialOrder
	}
	return &InvitationDenialEdge{
		Node:   id,
		Cursor: order.Field.toCursor(id),
	}
}

// InvitationUserEdge is the edge representation of InvitationUser.
type InvitationUserEdge struct {
	Node   *InvitationUser `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// InvitationUserConnection is the connection containing edges to InvitationUser.
type InvitationUserConnection struct {
	Edges      []*InvitationUserEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *InvitationUserConnection) build(nodes []*InvitationUser, pager *invitationuserPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *InvitationUser
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *InvitationUser {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *InvitationUser {
			return nodes[i]
		}
	}
	c.Edges = make([]*InvitationUserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &InvitationUserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// InvitationUserPaginateOption enables pagination customization.
type InvitationUserPaginateOption func(*invitationuserPager) error

// WithInvitationUserOrder configures pagination ordering.
func WithInvitationUserOrder(order *InvitationUserOrder) InvitationUserPaginateOption {
	if order == nil {
		order = DefaultInvitationUserOrder
	}
	o := *order
	return func(pager *invitationuserPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultInvitationUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithInvitationUserFilter configures pagination filter.
func WithInvitationUserFilter(filter func(*InvitationUserQuery) (*InvitationUserQuery, error)) InvitationUserPaginateOption {
	return func(pager *invitationuserPager) error {
		if filter == nil {
			return errors.New("InvitationUserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type invitationuserPager struct {
	order  *InvitationUserOrder
	filter func(*InvitationUserQuery) (*InvitationUserQuery, error)
}

func newInvitationUserPager(opts []InvitationUserPaginateOption) (*invitationuserPager, error) {
	pager := &invitationuserPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultInvitationUserOrder
	}
	return pager, nil
}

func (p *invitationuserPager) applyFilter(query *InvitationUserQuery) (*InvitationUserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *invitationuserPager) toCursor(iu *InvitationUser) Cursor {
	return p.order.Field.toCursor(iu)
}

func (p *invitationuserPager) applyCursors(query *InvitationUserQuery, after, before *Cursor) *InvitationUserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultInvitationUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *invitationuserPager) applyOrder(query *InvitationUserQuery, reverse bool) *InvitationUserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultInvitationUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultInvitationUserOrder.Field.field))
	}
	return query
}

func (p *invitationuserPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultInvitationUserOrder.Field {
			b.Comma().Ident(DefaultInvitationUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to InvitationUser.
func (iu *InvitationUserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...InvitationUserPaginateOption,
) (*InvitationUserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newInvitationUserPager(opts)
	if err != nil {
		return nil, err
	}
	if iu, err = pager.applyFilter(iu); err != nil {
		return nil, err
	}
	conn := &InvitationUserConnection{Edges: []*InvitationUserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = iu.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	iu = pager.applyCursors(iu, after, before)
	iu = pager.applyOrder(iu, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		iu.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := iu.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := iu.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// InvitationUserOrderField defines the ordering field of InvitationUser.
type InvitationUserOrderField struct {
	field    string
	toCursor func(*InvitationUser) Cursor
}

// InvitationUserOrder defines the ordering of InvitationUser.
type InvitationUserOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *InvitationUserOrderField `json:"field"`
}

// DefaultInvitationUserOrder is the default ordering of InvitationUser.
var DefaultInvitationUserOrder = &InvitationUserOrder{
	Direction: OrderDirectionAsc,
	Field: &InvitationUserOrderField{
		field: invitationuser.FieldID,
		toCursor: func(iu *InvitationUser) Cursor {
			return Cursor{ID: iu.ID}
		},
	},
}

// ToEdge converts InvitationUser into InvitationUserEdge.
func (iu *InvitationUser) ToEdge(order *InvitationUserOrder) *InvitationUserEdge {
	if order == nil {
		order = DefaultInvitationUserOrder
	}
	return &InvitationUserEdge{
		Node:   iu,
		Cursor: order.Field.toCursor(iu),
	}
}

// PushNotificationTokenEdge is the edge representation of PushNotificationToken.
type PushNotificationTokenEdge struct {
	Node   *PushNotificationToken `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// PushNotificationTokenConnection is the connection containing edges to PushNotificationToken.
type PushNotificationTokenConnection struct {
	Edges      []*PushNotificationTokenEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

func (c *PushNotificationTokenConnection) build(nodes []*PushNotificationToken, pager *pushnotificationtokenPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PushNotificationToken
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PushNotificationToken {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PushNotificationToken {
			return nodes[i]
		}
	}
	c.Edges = make([]*PushNotificationTokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PushNotificationTokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PushNotificationTokenPaginateOption enables pagination customization.
type PushNotificationTokenPaginateOption func(*pushnotificationtokenPager) error

// WithPushNotificationTokenOrder configures pagination ordering.
func WithPushNotificationTokenOrder(order *PushNotificationTokenOrder) PushNotificationTokenPaginateOption {
	if order == nil {
		order = DefaultPushNotificationTokenOrder
	}
	o := *order
	return func(pager *pushnotificationtokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPushNotificationTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPushNotificationTokenFilter configures pagination filter.
func WithPushNotificationTokenFilter(filter func(*PushNotificationTokenQuery) (*PushNotificationTokenQuery, error)) PushNotificationTokenPaginateOption {
	return func(pager *pushnotificationtokenPager) error {
		if filter == nil {
			return errors.New("PushNotificationTokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pushnotificationtokenPager struct {
	order  *PushNotificationTokenOrder
	filter func(*PushNotificationTokenQuery) (*PushNotificationTokenQuery, error)
}

func newPushNotificationTokenPager(opts []PushNotificationTokenPaginateOption) (*pushnotificationtokenPager, error) {
	pager := &pushnotificationtokenPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPushNotificationTokenOrder
	}
	return pager, nil
}

func (p *pushnotificationtokenPager) applyFilter(query *PushNotificationTokenQuery) (*PushNotificationTokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pushnotificationtokenPager) toCursor(pnt *PushNotificationToken) Cursor {
	return p.order.Field.toCursor(pnt)
}

func (p *pushnotificationtokenPager) applyCursors(query *PushNotificationTokenQuery, after, before *Cursor) *PushNotificationTokenQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPushNotificationTokenOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *pushnotificationtokenPager) applyOrder(query *PushNotificationTokenQuery, reverse bool) *PushNotificationTokenQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPushNotificationTokenOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPushNotificationTokenOrder.Field.field))
	}
	return query
}

func (p *pushnotificationtokenPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPushNotificationTokenOrder.Field {
			b.Comma().Ident(DefaultPushNotificationTokenOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PushNotificationToken.
func (pnt *PushNotificationTokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PushNotificationTokenPaginateOption,
) (*PushNotificationTokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPushNotificationTokenPager(opts)
	if err != nil {
		return nil, err
	}
	if pnt, err = pager.applyFilter(pnt); err != nil {
		return nil, err
	}
	conn := &PushNotificationTokenConnection{Edges: []*PushNotificationTokenEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pnt.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pnt = pager.applyCursors(pnt, after, before)
	pnt = pager.applyOrder(pnt, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pnt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pnt.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pnt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PushNotificationTokenOrderField defines the ordering field of PushNotificationToken.
type PushNotificationTokenOrderField struct {
	field    string
	toCursor func(*PushNotificationToken) Cursor
}

// PushNotificationTokenOrder defines the ordering of PushNotificationToken.
type PushNotificationTokenOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *PushNotificationTokenOrderField `json:"field"`
}

// DefaultPushNotificationTokenOrder is the default ordering of PushNotificationToken.
var DefaultPushNotificationTokenOrder = &PushNotificationTokenOrder{
	Direction: OrderDirectionAsc,
	Field: &PushNotificationTokenOrderField{
		field: pushnotificationtoken.FieldID,
		toCursor: func(pnt *PushNotificationToken) Cursor {
			return Cursor{ID: pnt.ID}
		},
	},
}

// ToEdge converts PushNotificationToken into PushNotificationTokenEdge.
func (pnt *PushNotificationToken) ToEdge(order *PushNotificationTokenOrder) *PushNotificationTokenEdge {
	if order == nil {
		order = DefaultPushNotificationTokenOrder
	}
	return &PushNotificationTokenEdge{
		Node:   pnt,
		Cursor: order.Field.toCursor(pnt),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserBlockEdge is the edge representation of UserBlock.
type UserBlockEdge struct {
	Node   *UserBlock `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// UserBlockConnection is the connection containing edges to UserBlock.
type UserBlockConnection struct {
	Edges      []*UserBlockEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *UserBlockConnection) build(nodes []*UserBlock, pager *userblockPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserBlock
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserBlock {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserBlock {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserBlockEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserBlockEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserBlockPaginateOption enables pagination customization.
type UserBlockPaginateOption func(*userblockPager) error

// WithUserBlockOrder configures pagination ordering.
func WithUserBlockOrder(order *UserBlockOrder) UserBlockPaginateOption {
	if order == nil {
		order = DefaultUserBlockOrder
	}
	o := *order
	return func(pager *userblockPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserBlockOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserBlockFilter configures pagination filter.
func WithUserBlockFilter(filter func(*UserBlockQuery) (*UserBlockQuery, error)) UserBlockPaginateOption {
	return func(pager *userblockPager) error {
		if filter == nil {
			return errors.New("UserBlockQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userblockPager struct {
	order  *UserBlockOrder
	filter func(*UserBlockQuery) (*UserBlockQuery, error)
}

func newUserBlockPager(opts []UserBlockPaginateOption) (*userblockPager, error) {
	pager := &userblockPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserBlockOrder
	}
	return pager, nil
}

func (p *userblockPager) applyFilter(query *UserBlockQuery) (*UserBlockQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userblockPager) toCursor(ub *UserBlock) Cursor {
	return p.order.Field.toCursor(ub)
}

func (p *userblockPager) applyCursors(query *UserBlockQuery, after, before *Cursor) *UserBlockQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserBlockOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userblockPager) applyOrder(query *UserBlockQuery, reverse bool) *UserBlockQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserBlockOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserBlockOrder.Field.field))
	}
	return query
}

func (p *userblockPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserBlockOrder.Field {
			b.Comma().Ident(DefaultUserBlockOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserBlock.
func (ub *UserBlockQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserBlockPaginateOption,
) (*UserBlockConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserBlockPager(opts)
	if err != nil {
		return nil, err
	}
	if ub, err = pager.applyFilter(ub); err != nil {
		return nil, err
	}
	conn := &UserBlockConnection{Edges: []*UserBlockEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ub.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ub = pager.applyCursors(ub, after, before)
	ub = pager.applyOrder(ub, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ub.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ub.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ub.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserBlockOrderField defines the ordering field of UserBlock.
type UserBlockOrderField struct {
	field    string
	toCursor func(*UserBlock) Cursor
}

// UserBlockOrder defines the ordering of UserBlock.
type UserBlockOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *UserBlockOrderField `json:"field"`
}

// DefaultUserBlockOrder is the default ordering of UserBlock.
var DefaultUserBlockOrder = &UserBlockOrder{
	Direction: OrderDirectionAsc,
	Field: &UserBlockOrderField{
		field: userblock.FieldID,
		toCursor: func(ub *UserBlock) Cursor {
			return Cursor{ID: ub.ID}
		},
	},
}

// ToEdge converts UserBlock into UserBlockEdge.
func (ub *UserBlock) ToEdge(order *UserBlockOrder) *UserBlockEdge {
	if order == nil {
		order = DefaultUserBlockOrder
	}
	return &UserBlockEdge{
		Node:   ub,
		Cursor: order.Field.toCursor(ub),
	}
}

// UserFriendGroupEdge is the edge representation of UserFriendGroup.
type UserFriendGroupEdge struct {
	Node   *UserFriendGroup `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// UserFriendGroupConnection is the connection containing edges to UserFriendGroup.
type UserFriendGroupConnection struct {
	Edges      []*UserFriendGroupEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *UserFriendGroupConnection) build(nodes []*UserFriendGroup, pager *userfriendgroupPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserFriendGroup
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserFriendGroup {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserFriendGroup {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserFriendGroupEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserFriendGroupEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserFriendGroupPaginateOption enables pagination customization.
type UserFriendGroupPaginateOption func(*userfriendgroupPager) error

// WithUserFriendGroupOrder configures pagination ordering.
func WithUserFriendGroupOrder(order *UserFriendGroupOrder) UserFriendGroupPaginateOption {
	if order == nil {
		order = DefaultUserFriendGroupOrder
	}
	o := *order
	return func(pager *userfriendgroupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserFriendGroupOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFriendGroupFilter configures pagination filter.
func WithUserFriendGroupFilter(filter func(*UserFriendGroupQuery) (*UserFriendGroupQuery, error)) UserFriendGroupPaginateOption {
	return func(pager *userfriendgroupPager) error {
		if filter == nil {
			return errors.New("UserFriendGroupQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userfriendgroupPager struct {
	order  *UserFriendGroupOrder
	filter func(*UserFriendGroupQuery) (*UserFriendGroupQuery, error)
}

func newUserFriendGroupPager(opts []UserFriendGroupPaginateOption) (*userfriendgroupPager, error) {
	pager := &userfriendgroupPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserFriendGroupOrder
	}
	return pager, nil
}

func (p *userfriendgroupPager) applyFilter(query *UserFriendGroupQuery) (*UserFriendGroupQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userfriendgroupPager) toCursor(ufg *UserFriendGroup) Cursor {
	return p.order.Field.toCursor(ufg)
}

func (p *userfriendgroupPager) applyCursors(query *UserFriendGroupQuery, after, before *Cursor) *UserFriendGroupQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserFriendGroupOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userfriendgroupPager) applyOrder(query *UserFriendGroupQuery, reverse bool) *UserFriendGroupQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserFriendGroupOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserFriendGroupOrder.Field.field))
	}
	return query
}

func (p *userfriendgroupPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserFriendGroupOrder.Field {
			b.Comma().Ident(DefaultUserFriendGroupOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserFriendGroup.
func (ufg *UserFriendGroupQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserFriendGroupPaginateOption,
) (*UserFriendGroupConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserFriendGroupPager(opts)
	if err != nil {
		return nil, err
	}
	if ufg, err = pager.applyFilter(ufg); err != nil {
		return nil, err
	}
	conn := &UserFriendGroupConnection{Edges: []*UserFriendGroupEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ufg.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ufg = pager.applyCursors(ufg, after, before)
	ufg = pager.applyOrder(ufg, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ufg.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ufg.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ufg.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserFriendGroupOrderField defines the ordering field of UserFriendGroup.
type UserFriendGroupOrderField struct {
	field    string
	toCursor func(*UserFriendGroup) Cursor
}

// UserFriendGroupOrder defines the ordering of UserFriendGroup.
type UserFriendGroupOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *UserFriendGroupOrderField `json:"field"`
}

// DefaultUserFriendGroupOrder is the default ordering of UserFriendGroup.
var DefaultUserFriendGroupOrder = &UserFriendGroupOrder{
	Direction: OrderDirectionAsc,
	Field: &UserFriendGroupOrderField{
		field: userfriendgroup.FieldID,
		toCursor: func(ufg *UserFriendGroup) Cursor {
			return Cursor{ID: ufg.ID}
		},
	},
}

// ToEdge converts UserFriendGroup into UserFriendGroupEdge.
func (ufg *UserFriendGroup) ToEdge(order *UserFriendGroupOrder) *UserFriendGroupEdge {
	if order == nil {
		order = DefaultUserFriendGroupOrder
	}
	return &UserFriendGroupEdge{
		Node:   ufg,
		Cursor: order.Field.toCursor(ufg),
	}
}

// UserLocationEdge is the edge representation of UserLocation.
type UserLocationEdge struct {
	Node   *UserLocation `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// UserLocationConnection is the connection containing edges to UserLocation.
type UserLocationConnection struct {
	Edges      []*UserLocationEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *UserLocationConnection) build(nodes []*UserLocation, pager *userlocationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserLocation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserLocation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserLocation {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserLocationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserLocationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserLocationPaginateOption enables pagination customization.
type UserLocationPaginateOption func(*userlocationPager) error

// WithUserLocationOrder configures pagination ordering.
func WithUserLocationOrder(order *UserLocationOrder) UserLocationPaginateOption {
	if order == nil {
		order = DefaultUserLocationOrder
	}
	o := *order
	return func(pager *userlocationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserLocationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserLocationFilter configures pagination filter.
func WithUserLocationFilter(filter func(*UserLocationQuery) (*UserLocationQuery, error)) UserLocationPaginateOption {
	return func(pager *userlocationPager) error {
		if filter == nil {
			return errors.New("UserLocationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userlocationPager struct {
	order  *UserLocationOrder
	filter func(*UserLocationQuery) (*UserLocationQuery, error)
}

func newUserLocationPager(opts []UserLocationPaginateOption) (*userlocationPager, error) {
	pager := &userlocationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserLocationOrder
	}
	return pager, nil
}

func (p *userlocationPager) applyFilter(query *UserLocationQuery) (*UserLocationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userlocationPager) toCursor(ul *UserLocation) Cursor {
	return p.order.Field.toCursor(ul)
}

func (p *userlocationPager) applyCursors(query *UserLocationQuery, after, before *Cursor) *UserLocationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserLocationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userlocationPager) applyOrder(query *UserLocationQuery, reverse bool) *UserLocationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserLocationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserLocationOrder.Field.field))
	}
	return query
}

func (p *userlocationPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserLocationOrder.Field {
			b.Comma().Ident(DefaultUserLocationOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserLocation.
func (ul *UserLocationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserLocationPaginateOption,
) (*UserLocationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserLocationPager(opts)
	if err != nil {
		return nil, err
	}
	if ul, err = pager.applyFilter(ul); err != nil {
		return nil, err
	}
	conn := &UserLocationConnection{Edges: []*UserLocationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ul.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ul = pager.applyCursors(ul, after, before)
	ul = pager.applyOrder(ul, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ul.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ul.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ul.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserLocationOrderField defines the ordering field of UserLocation.
type UserLocationOrderField struct {
	field    string
	toCursor func(*UserLocation) Cursor
}

// UserLocationOrder defines the ordering of UserLocation.
type UserLocationOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *UserLocationOrderField `json:"field"`
}

// DefaultUserLocationOrder is the default ordering of UserLocation.
var DefaultUserLocationOrder = &UserLocationOrder{
	Direction: OrderDirectionAsc,
	Field: &UserLocationOrderField{
		field: userlocation.FieldID,
		toCursor: func(ul *UserLocation) Cursor {
			return Cursor{ID: ul.ID}
		},
	},
}

// ToEdge converts UserLocation into UserLocationEdge.
func (ul *UserLocation) ToEdge(order *UserLocationOrder) *UserLocationEdge {
	if order == nil {
		order = DefaultUserLocationOrder
	}
	return &UserLocationEdge{
		Node:   ul,
		Cursor: order.Field.toCursor(ul),
	}
}

// UserLocationHistoryEdge is the edge representation of UserLocationHistory.
type UserLocationHistoryEdge struct {
	Node   *UserLocationHistory `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// UserLocationHistoryConnection is the connection containing edges to UserLocationHistory.
type UserLocationHistoryConnection struct {
	Edges      []*UserLocationHistoryEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *UserLocationHistoryConnection) build(nodes []*UserLocationHistory, pager *userlocationhistoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserLocationHistory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserLocationHistory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserLocationHistory {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserLocationHistoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserLocationHistoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserLocationHistoryPaginateOption enables pagination customization.
type UserLocationHistoryPaginateOption func(*userlocationhistoryPager) error

// WithUserLocationHistoryOrder configures pagination ordering.
func WithUserLocationHistoryOrder(order *UserLocationHistoryOrder) UserLocationHistoryPaginateOption {
	if order == nil {
		order = DefaultUserLocationHistoryOrder
	}
	o := *order
	return func(pager *userlocationhistoryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserLocationHistoryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserLocationHistoryFilter configures pagination filter.
func WithUserLocationHistoryFilter(filter func(*UserLocationHistoryQuery) (*UserLocationHistoryQuery, error)) UserLocationHistoryPaginateOption {
	return func(pager *userlocationhistoryPager) error {
		if filter == nil {
			return errors.New("UserLocationHistoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userlocationhistoryPager struct {
	order  *UserLocationHistoryOrder
	filter func(*UserLocationHistoryQuery) (*UserLocationHistoryQuery, error)
}

func newUserLocationHistoryPager(opts []UserLocationHistoryPaginateOption) (*userlocationhistoryPager, error) {
	pager := &userlocationhistoryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserLocationHistoryOrder
	}
	return pager, nil
}

func (p *userlocationhistoryPager) applyFilter(query *UserLocationHistoryQuery) (*UserLocationHistoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userlocationhistoryPager) toCursor(ulh *UserLocationHistory) Cursor {
	return p.order.Field.toCursor(ulh)
}

func (p *userlocationhistoryPager) applyCursors(query *UserLocationHistoryQuery, after, before *Cursor) *UserLocationHistoryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserLocationHistoryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userlocationhistoryPager) applyOrder(query *UserLocationHistoryQuery, reverse bool) *UserLocationHistoryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserLocationHistoryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserLocationHistoryOrder.Field.field))
	}
	return query
}

func (p *userlocationhistoryPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserLocationHistoryOrder.Field {
			b.Comma().Ident(DefaultUserLocationHistoryOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserLocationHistory.
func (ulh *UserLocationHistoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserLocationHistoryPaginateOption,
) (*UserLocationHistoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserLocationHistoryPager(opts)
	if err != nil {
		return nil, err
	}
	if ulh, err = pager.applyFilter(ulh); err != nil {
		return nil, err
	}
	conn := &UserLocationHistoryConnection{Edges: []*UserLocationHistoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ulh.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ulh = pager.applyCursors(ulh, after, before)
	ulh = pager.applyOrder(ulh, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ulh.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ulh.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ulh.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserLocationHistoryOrderField defines the ordering field of UserLocationHistory.
type UserLocationHistoryOrderField struct {
	field    string
	toCursor func(*UserLocationHistory) Cursor
}

// UserLocationHistoryOrder defines the ordering of UserLocationHistory.
type UserLocationHistoryOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *UserLocationHistoryOrderField `json:"field"`
}

// DefaultUserLocationHistoryOrder is the default ordering of UserLocationHistory.
var DefaultUserLocationHistoryOrder = &UserLocationHistoryOrder{
	Direction: OrderDirectionAsc,
	Field: &UserLocationHistoryOrderField{
		field: userlocationhistory.FieldID,
		toCursor: func(ulh *UserLocationHistory) Cursor {
			return Cursor{ID: ulh.ID}
		},
	},
}

// ToEdge converts UserLocationHistory into UserLocationHistoryEdge.
func (ulh *UserLocationHistory) ToEdge(order *UserLocationHistoryOrder) *UserLocationHistoryEdge {
	if order == nil {
		order = DefaultUserLocationHistoryOrder
	}
	return &UserLocationHistoryEdge{
		Node:   ulh,
		Cursor: order.Field.toCursor(ulh),
	}
}

// UserMuteEdge is the edge representation of UserMute.
type UserMuteEdge struct {
	Node   *UserMute `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// UserMuteConnection is the connection containing edges to UserMute.
type UserMuteConnection struct {
	Edges      []*UserMuteEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *UserMuteConnection) build(nodes []*UserMute, pager *usermutePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserMute
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserMute {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserMute {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserMuteEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserMuteEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserMutePaginateOption enables pagination customization.
type UserMutePaginateOption func(*usermutePager) error

// WithUserMuteOrder configures pagination ordering.
func WithUserMuteOrder(order *UserMuteOrder) UserMutePaginateOption {
	if order == nil {
		order = DefaultUserMuteOrder
	}
	o := *order
	return func(pager *usermutePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserMuteOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserMuteFilter configures pagination filter.
func WithUserMuteFilter(filter func(*UserMuteQuery) (*UserMuteQuery, error)) UserMutePaginateOption {
	return func(pager *usermutePager) error {
		if filter == nil {
			return errors.New("UserMuteQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type usermutePager struct {
	order  *UserMuteOrder
	filter func(*UserMuteQuery) (*UserMuteQuery, error)
}

func newUserMutePager(opts []UserMutePaginateOption) (*usermutePager, error) {
	pager := &usermutePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserMuteOrder
	}
	return pager, nil
}

func (p *usermutePager) applyFilter(query *UserMuteQuery) (*UserMuteQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *usermutePager) toCursor(um *UserMute) Cursor {
	return p.order.Field.toCursor(um)
}

func (p *usermutePager) applyCursors(query *UserMuteQuery, after, before *Cursor) *UserMuteQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserMuteOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *usermutePager) applyOrder(query *UserMuteQuery, reverse bool) *UserMuteQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserMuteOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserMuteOrder.Field.field))
	}
	return query
}

func (p *usermutePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserMuteOrder.Field {
			b.Comma().Ident(DefaultUserMuteOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserMute.
func (um *UserMuteQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserMutePaginateOption,
) (*UserMuteConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserMutePager(opts)
	if err != nil {
		return nil, err
	}
	if um, err = pager.applyFilter(um); err != nil {
		return nil, err
	}
	conn := &UserMuteConnection{Edges: []*UserMuteEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = um.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	um = pager.applyCursors(um, after, before)
	um = pager.applyOrder(um, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		um.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := um.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := um.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserMuteOrderField defines the ordering field of UserMute.
type UserMuteOrderField struct {
	field    string
	toCursor func(*UserMute) Cursor
}

// UserMuteOrder defines the ordering of UserMute.
type UserMuteOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *UserMuteOrderField `json:"field"`
}

// DefaultUserMuteOrder is the default ordering of UserMute.
var DefaultUserMuteOrder = &UserMuteOrder{
	Direction: OrderDirectionAsc,
	Field: &UserMuteOrderField{
		field: usermute.FieldID,
		toCursor: func(um *UserMute) Cursor {
			return Cursor{ID: um.ID}
		},
	},
}

// ToEdge converts UserMute into UserMuteEdge.
func (um *UserMute) ToEdge(order *UserMuteOrder) *UserMuteEdge {
	if order == nil {
		order = DefaultUserMuteOrder
	}
	return &UserMuteEdge{
		Node:   um,
		Cursor: order.Field.toCursor(um),
	}
}

// UserProfileEdge is the edge representation of UserProfile.
type UserProfileEdge struct {
	Node   *UserProfile `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// UserProfileConnection is the connection containing edges to UserProfile.
type UserProfileConnection struct {
	Edges      []*UserProfileEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *UserProfileConnection) build(nodes []*UserProfile, pager *userprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserProfilePaginateOption enables pagination customization.
type UserProfilePaginateOption func(*userprofilePager) error

// WithUserProfileOrder configures pagination ordering.
func WithUserProfileOrder(order *UserProfileOrder) UserProfilePaginateOption {
	if order == nil {
		order = DefaultUserProfileOrder
	}
	o := *order
	return func(pager *userprofilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserProfileFilter configures pagination filter.
func WithUserProfileFilter(filter func(*UserProfileQuery) (*UserProfileQuery, error)) UserProfilePaginateOption {
	return func(pager *userprofilePager) error {
		if filter == nil {
			return errors.New("UserProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userprofilePager struct {
	order  *UserProfileOrder
	filter func(*UserProfileQuery) (*UserProfileQuery, error)
}

func newUserProfilePager(opts []UserProfilePaginateOption) (*userprofilePager, error) {
	pager := &userprofilePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserProfileOrder
	}
	return pager, nil
}

func (p *userprofilePager) applyFilter(query *UserProfileQuery) (*UserProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userprofilePager) toCursor(up *UserProfile) Cursor {
	return p.order.Field.toCursor(up)
}

func (p *userprofilePager) applyCursors(query *UserProfileQuery, after, before *Cursor) *UserProfileQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserProfileOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userprofilePager) applyOrder(query *UserProfileQuery, reverse bool) *UserProfileQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserProfileOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserProfileOrder.Field.field))
	}
	return query
}

func (p *userprofilePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserProfileOrder.Field {
			b.Comma().Ident(DefaultUserProfileOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserProfile.
func (up *UserProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserProfilePaginateOption,
) (*UserProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserProfilePager(opts)
	if err != nil {
		return nil, err
	}
	if up, err = pager.applyFilter(up); err != nil {
		return nil, err
	}
	conn := &UserProfileConnection{Edges: []*UserProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = up.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	up = pager.applyCursors(up, after, before)
	up = pager.applyOrder(up, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		up.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := up.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := up.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserProfileOrderField defines the ordering field of UserProfile.
type UserProfileOrderField struct {
	field    string
	toCursor func(*UserProfile) Cursor
}

// UserProfileOrder defines the ordering of UserProfile.
type UserProfileOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *UserProfileOrderField `json:"field"`
}

// DefaultUserProfileOrder is the default ordering of UserProfile.
var DefaultUserProfileOrder = &UserProfileOrder{
	Direction: OrderDirectionAsc,
	Field: &UserProfileOrderField{
		field: userprofile.FieldID,
		toCursor: func(up *UserProfile) Cursor {
			return Cursor{ID: up.ID}
		},
	},
}

// ToEdge converts UserProfile into UserProfileEdge.
func (up *UserProfile) ToEdge(order *UserProfileOrder) *UserProfileEdge {
	if order == nil {
		order = DefaultUserProfileOrder
	}
	return &UserProfileEdge{
		Node:   up,
		Cursor: order.Field.toCursor(up),
	}
}

// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/k-yomo/invy/invy_api/ent"
	"github.com/k-yomo/invy/invy_api/ent/account"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/friendshiprequest"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/invitationuser"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/pushnotificationtoken"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userblock"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
	"github.com/k-yomo/invy/invy_api/ent/userlocationhistory"
	"github.com/k-yomo/invy/invy_api/ent/usermute"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AccountFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccountFunc func(context.Context, *ent.AccountQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccountFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The TraverseAccount type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccount func(context.Context, *ent.AccountQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccount) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccount) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccountQuery", q)
}

// The FriendGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type FriendGroupFunc func(context.Context, *ent.FriendGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FriendGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FriendGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FriendGroupQuery", q)
}

// The TraverseFriendGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFriendGroup func(context.Context, *ent.FriendGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFriendGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFriendGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FriendGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FriendGroupQuery", q)
}

// The FriendshipFunc type is an adapter to allow the use of ordinary function as a Querier.
type FriendshipFunc func(context.Context, *ent.FriendshipQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FriendshipFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FriendshipQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FriendshipQuery", q)
}

// The TraverseFriendship type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFriendship func(context.Context, *ent.FriendshipQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFriendship) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFriendship) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FriendshipQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FriendshipQuery", q)
}

// The FriendshipRequestFunc type is an adapter to allow the use of ordinary function as a Querier.
type FriendshipRequestFunc func(context.Context, *ent.FriendshipRequestQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FriendshipRequestFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FriendshipRequestQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FriendshipRequestQuery", q)
}

// The TraverseFriendshipRequest type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFriendshipRequest func(context.Context, *ent.FriendshipRequestQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFriendshipRequest) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFriendshipRequest) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FriendshipRequestQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FriendshipRequestQuery", q)
}

// The InvitationFunc type is an adapter to allow the use of ordinary function as a Querier.
type InvitationFunc func(context.Context, *ent.InvitationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InvitationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InvitationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InvitationQuery", q)
}

// The TraverseInvitation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInvitation func(context.Context, *ent.InvitationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInvitation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInvitation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InvitationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InvitationQuery", q)
}

// The InvitationAcceptanceFunc type is an adapter to allow the use of ordinary function as a Querier.
type InvitationAcceptanceFunc func(context.Context, *ent.InvitationAcceptanceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InvitationAcceptanceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InvitationAcceptanceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InvitationAcceptanceQuery", q)
}

// The TraverseInvitationAcceptance type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInvitationAcceptance func(context.Context, *ent.InvitationAcceptanceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInvitationAcceptance) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInvitationAcceptance) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InvitationAcceptanceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InvitationAcceptanceQuery", q)
}

// The InvitationDenialFunc type is an adapter to allow the use of ordinary function as a Querier.
type InvitationDenialFunc func(context.Context, *ent.InvitationDenialQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InvitationDenialFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InvitationDenialQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InvitationDenialQuery", q)
}

// The TraverseInvitationDenial type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInvitationDenial func(context.Context, *ent.InvitationDenialQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInvitationDenial) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInvitationDenial) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InvitationDenialQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InvitationDenialQuery", q)
}

// The InvitationUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type InvitationUserFunc func(context.Context, *ent.InvitationUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InvitationUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InvitationUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InvitationUserQuery", q)
}

// The TraverseInvitationUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInvitationUser func(context.Context, *ent.InvitationUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInvitationUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInvitationUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InvitationUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InvitationUserQuery", q)
}

// The PushNotificationTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type PushNotificationTokenFunc func(context.Context, *ent.PushNotificationTokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PushNotificationTokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PushNotificationTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PushNotificationTokenQuery", q)
}

// The TraversePushNotificationToken type is an adapter to allow the use of ordinary function as Traverser.
type TraversePushNotificationToken func(context.Context, *ent.PushNotificationTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePushNotificationToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePushNotificationToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PushNotificationTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PushNotificationTokenQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserBlockFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserBlockFunc func(context.Context, *ent.UserBlockQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserBlockFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserBlockQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserBlockQuery", q)
}

// The TraverseUserBlock type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserBlock func(context.Context, *ent.UserBlockQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserBlock) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserBlock) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserBlockQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserBlockQuery", q)
}

// The UserFriendGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFriendGroupFunc func(context.Context, *ent.UserFriendGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFriendGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserFriendGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserFriendGroupQuery", q)
}

// The TraverseUserFriendGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserFriendGroup func(context.Context, *ent.UserFriendGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserFriendGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserFriendGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserFriendGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserFriendGroupQuery", q)
}

// The UserLocationFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserLocationFunc func(context.Context, *ent.UserLocationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserLocationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserLocationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserLocationQuery", q)
}

// The TraverseUserLocation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserLocation func(context.Context, *ent.UserLocationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserLocation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserLocation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLocationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserLocationQuery", q)
}

// The UserLocationHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserLocationHistoryFunc func(context.Context, *ent.UserLocationHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserLocationHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserLocationHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserLocationHistoryQuery", q)
}

// The TraverseUserLocationHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserLocationHistory func(context.Context, *ent.UserLocationHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserLocationHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserLocationHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserLocationHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserLocationHistoryQuery", q)
}

// The UserMuteFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserMuteFunc func(context.Context, *ent.UserMuteQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserMuteFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserMuteQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserMuteQuery", q)
}

// The TraverseUserMute type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserMute func(context.Context, *ent.UserMuteQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserMute) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserMute) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserMuteQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserMuteQuery", q)
}

// The UserProfileFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserProfileFunc func(context.Context, *ent.UserProfileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserProfileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserProfileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserProfileQuery", q)
}

// The TraverseUserProfile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserProfile func(context.Context, *ent.UserProfileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserProfile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserProfile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserProfileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserProfileQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AccountQuery:
		return &query[*ent.AccountQuery, predicate.Account, account.OrderOption]{typ: ent.TypeAccount, tq: q}, nil
	case *ent.FriendGroupQuery:
		return &query[*ent.FriendGroupQuery, predicate.FriendGroup, friendgroup.OrderOption]{typ: ent.TypeFriendGroup, tq: q}, nil
	case *ent.FriendshipQuery:
		return &query[*ent.FriendshipQuery, predicate.Friendship, friendship.OrderOption]{typ: ent.TypeFriendship, tq: q}, nil
	case *ent.FriendshipRequestQuery:
		return &query[*ent.FriendshipRequestQuery, predicate.FriendshipRequest, friendshiprequest.OrderOption]{typ: ent.TypeFriendshipRequest, tq: q}, nil
	case *ent.InvitationQuery:
		return &query[*ent.InvitationQuery, predicate.Invitation, invitation.OrderOption]{typ: ent.TypeInvitation, tq: q}, nil
	case *ent.InvitationAcceptanceQuery:
		return &query[*ent.InvitationAcceptanceQuery, predicate.InvitationAcceptance, invitationacceptance.OrderOption]{typ: ent.TypeInvitationAcceptance, tq: q}, nil
	case *ent.InvitationDenialQuery:
		return &query[*ent.InvitationDenialQuery, predicate.InvitationDenial, invitationdenial.OrderOption]{typ: ent.TypeInvitationDenial, tq: q}, nil
	case *ent.InvitationUserQuery:
		return &query[*ent.InvitationUserQuery, predicate.InvitationUser, invitationuser.OrderOption]{typ: ent.TypeInvitationUser, tq: q}, nil
	case *ent.PushNotificationTokenQuery:
		return &query[*ent.PushNotificationTokenQuery, predicate.PushNotificationToken, pushnotificationtoken.OrderOption]{typ: ent.TypePushNotificationToken, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserBlockQuery:
		return &query[*ent.UserBlockQuery, predicate.UserBlock, userblock.OrderOption]{typ: ent.TypeUserBlock, tq: q}, nil
	case *ent.UserFriendGroupQuery:
		return &query[*ent.UserFriendGroupQuery, predicate.UserFriendGroup, userfriendgroup.OrderOption]{typ: ent.TypeUserFriendGroup, tq: q}, nil
	case *ent.UserLocationQuery:
		return &query[*ent.UserLocationQuery, predicate.UserLocation, userlocation.OrderOption]{typ: ent.TypeUserLocation, tq: q}, nil
	case *ent.UserLocationHistoryQuery:
		return &query[*ent.UserLocationHistoryQuery, predicate.UserLocationHistory, userlocationhistory.OrderOption]{typ: ent.TypeUserLocationHistory, tq: q}, nil
	case *ent.UserMuteQuery:
		return &query[*ent.UserMuteQuery, predicate.UserMute, usermute.OrderOption]{typ: ent.TypeUserMute, tq: q}, nil
	case *ent.UserProfileQuery:
		return &query[*ent.UserProfileQuery, predicate.UserProfile, userprofile.OrderOption]{typ: ent.TypeUserProfile, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
)

// UserLocationDelete is the builder for deleting a UserLocation entity.
type UserLocationDelete struct {
	config
	hooks    []Hook
	mutation *UserLocationMutation
}

// Where appends a list predicates to the UserLocationDelete builder.
func (uld *UserLocationDelete) Where(ps ...predicate.UserLocation) *UserLocationDelete {
	uld.mutation.Where(ps...)
	return uld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uld *UserLocationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, UserLocationMutation](ctx, uld.sqlExec, uld.mutation, uld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uld *UserLocationDelete) ExecX(ctx context.Context) int {
	n, err := uld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uld *UserLocationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userlocation.Table, sqlgraph.NewFieldSpec(userlocation.FieldID, field.TypeUUID))
	if ps := uld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uld.mutation.done = true
	return affected, err
}

// UserLocationDeleteOne is the builder for deleting a single UserLocation entity.
type UserLocationDeleteOne struct {
	uld *UserLocationDelete
}

// Where appends a list predicates to the UserLocationDelete builder.
func (uldo *UserLocationDeleteOne) Where(ps ...predicate.UserLocation) *UserLocationDeleteOne {
	uldo.uld.mutation.Where(ps...)
	return uldo
}

// Exec executes the deletion query.
func (uldo *UserLocationDeleteOne) Exec(ctx context.Context) error {
	n, err := uldo.uld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userlocation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uldo *UserLocationDeleteOne) ExecX(ctx context.Context) {
	if err := uldo.Exec(ctx); err != nil {
		panic(err)
	}
}

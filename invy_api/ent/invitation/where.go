// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/pkg/pgutil"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUserID, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldLocation, v))
}

// Coordinate applies equality check predicate on the "coordinate" field. It's identical to CoordinateEQ.
func Coordinate(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCoordinate, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldComment, v))
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldStartsAt, v))
}

// ChatRoomID applies equality check predicate on the "chat_room_id" field. It's identical to ChatRoomIDEQ.
func ChatRoomID(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldChatRoomID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldUserID, vs...))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldLocation, v))
}

// CoordinateEQ applies the EQ predicate on the "coordinate" field.
func CoordinateEQ(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCoordinate, v))
}

// CoordinateNEQ applies the NEQ predicate on the "coordinate" field.
func CoordinateNEQ(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCoordinate, v))
}

// CoordinateIn applies the In predicate on the "coordinate" field.
func CoordinateIn(vs ...*pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCoordinate, vs...))
}

// CoordinateNotIn applies the NotIn predicate on the "coordinate" field.
func CoordinateNotIn(vs ...*pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCoordinate, vs...))
}

// CoordinateGT applies the GT predicate on the "coordinate" field.
func CoordinateGT(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCoordinate, v))
}

// CoordinateGTE applies the GTE predicate on the "coordinate" field.
func CoordinateGTE(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCoordinate, v))
}

// CoordinateLT applies the LT predicate on the "coordinate" field.
func CoordinateLT(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCoordinate, v))
}

// CoordinateLTE applies the LTE predicate on the "coordinate" field.
func CoordinateLTE(v *pgutil.GeoPoint) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCoordinate, v))
}

// CoordinateIsNil applies the IsNil predicate on the "coordinate" field.
func CoordinateIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldCoordinate))
}

// CoordinateNotNil applies the NotNil predicate on the "coordinate" field.
func CoordinateNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldCoordinate))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldComment, v))
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldStartsAt, v))
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldStartsAt, v))
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldStartsAt, vs...))
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldStartsAt, vs...))
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldStartsAt, v))
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldStartsAt, v))
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldStartsAt, v))
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldStartsAt, v))
}

// ChatRoomIDEQ applies the EQ predicate on the "chat_room_id" field.
func ChatRoomIDEQ(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldChatRoomID, v))
}

// ChatRoomIDNEQ applies the NEQ predicate on the "chat_room_id" field.
func ChatRoomIDNEQ(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldChatRoomID, v))
}

// ChatRoomIDIn applies the In predicate on the "chat_room_id" field.
func ChatRoomIDIn(vs ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldChatRoomID, vs...))
}

// ChatRoomIDNotIn applies the NotIn predicate on the "chat_room_id" field.
func ChatRoomIDNotIn(vs ...uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldChatRoomID, vs...))
}

// ChatRoomIDGT applies the GT predicate on the "chat_room_id" field.
func ChatRoomIDGT(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldChatRoomID, v))
}

// ChatRoomIDGTE applies the GTE predicate on the "chat_room_id" field.
func ChatRoomIDGTE(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldChatRoomID, v))
}

// ChatRoomIDLT applies the LT predicate on the "chat_room_id" field.
func ChatRoomIDLT(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldChatRoomID, v))
}

// ChatRoomIDLTE applies the LTE predicate on the "chat_room_id" field.
func ChatRoomIDLTE(v uuid.UUID) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldChatRoomID, v))
}

// ChatRoomIDIsNil applies the IsNil predicate on the "chat_room_id" field.
func ChatRoomIDIsNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldIsNull(FieldChatRoomID))
}

// ChatRoomIDNotNil applies the NotNil predicate on the "chat_room_id" field.
func ChatRoomIDNotNil() predicate.Invitation {
	return predicate.Invitation(sql.FieldNotNull(FieldChatRoomID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitationUsers applies the HasEdge predicate on the "invitation_users" edge.
func HasInvitationUsers() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InvitationUsersTable, InvitationUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitationUsersWith applies the HasEdge predicate on the "invitation_users" edge with a given conditions (other predicates).
func HasInvitationUsersWith(preds ...predicate.InvitationUser) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInvitationUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitationAcceptances applies the HasEdge predicate on the "invitation_acceptances" edge.
func HasInvitationAcceptances() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InvitationAcceptancesTable, InvitationAcceptancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitationAcceptancesWith applies the HasEdge predicate on the "invitation_acceptances" edge with a given conditions (other predicates).
func HasInvitationAcceptancesWith(preds ...predicate.InvitationAcceptance) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInvitationAcceptancesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitationDenials applies the HasEdge predicate on the "invitation_denials" edge.
func HasInvitationDenials() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, InvitationDenialsTable, InvitationDenialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitationDenialsWith applies the HasEdge predicate on the "invitation_denials" edge with a given conditions (other predicates).
func HasInvitationDenialsWith(preds ...predicate.InvitationDenial) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newInvitationDenialsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		p(s.Not())
	})
}

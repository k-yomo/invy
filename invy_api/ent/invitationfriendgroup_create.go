// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationfriendgroup"
)

// InvitationFriendGroupCreate is the builder for creating a InvitationFriendGroup entity.
type InvitationFriendGroupCreate struct {
	config
	mutation *InvitationFriendGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInvitationID sets the "invitation_id" field.
func (ifgc *InvitationFriendGroupCreate) SetInvitationID(u uuid.UUID) *InvitationFriendGroupCreate {
	ifgc.mutation.SetInvitationID(u)
	return ifgc
}

// SetFriendGroupID sets the "friend_group_id" field.
func (ifgc *InvitationFriendGroupCreate) SetFriendGroupID(u uuid.UUID) *InvitationFriendGroupCreate {
	ifgc.mutation.SetFriendGroupID(u)
	return ifgc
}

// SetCreatedAt sets the "created_at" field.
func (ifgc *InvitationFriendGroupCreate) SetCreatedAt(t time.Time) *InvitationFriendGroupCreate {
	ifgc.mutation.SetCreatedAt(t)
	return ifgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ifgc *InvitationFriendGroupCreate) SetNillableCreatedAt(t *time.Time) *InvitationFriendGroupCreate {
	if t != nil {
		ifgc.SetCreatedAt(*t)
	}
	return ifgc
}

// SetID sets the "id" field.
func (ifgc *InvitationFriendGroupCreate) SetID(u uuid.UUID) *InvitationFriendGroupCreate {
	ifgc.mutation.SetID(u)
	return ifgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ifgc *InvitationFriendGroupCreate) SetNillableID(u *uuid.UUID) *InvitationFriendGroupCreate {
	if u != nil {
		ifgc.SetID(*u)
	}
	return ifgc
}

// SetInvitation sets the "invitation" edge to the Invitation entity.
func (ifgc *InvitationFriendGroupCreate) SetInvitation(i *Invitation) *InvitationFriendGroupCreate {
	return ifgc.SetInvitationID(i.ID)
}

// SetFriendGroup sets the "friend_group" edge to the FriendGroup entity.
func (ifgc *InvitationFriendGroupCreate) SetFriendGroup(f *FriendGroup) *InvitationFriendGroupCreate {
	return ifgc.SetFriendGroupID(f.ID)
}

// Mutation returns the InvitationFriendGroupMutation object of the builder.
func (ifgc *InvitationFriendGroupCreate) Mutation() *InvitationFriendGroupMutation {
	return ifgc.mutation
}

// Save creates the InvitationFriendGroup in the database.
func (ifgc *InvitationFriendGroupCreate) Save(ctx context.Context) (*InvitationFriendGroup, error) {
	var (
		err  error
		node *InvitationFriendGroup
	)
	ifgc.defaults()
	if len(ifgc.hooks) == 0 {
		if err = ifgc.check(); err != nil {
			return nil, err
		}
		node, err = ifgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvitationFriendGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ifgc.check(); err != nil {
				return nil, err
			}
			ifgc.mutation = mutation
			if node, err = ifgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ifgc.hooks) - 1; i >= 0; i-- {
			if ifgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ifgc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ifgc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*InvitationFriendGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InvitationFriendGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ifgc *InvitationFriendGroupCreate) SaveX(ctx context.Context) *InvitationFriendGroup {
	v, err := ifgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifgc *InvitationFriendGroupCreate) Exec(ctx context.Context) error {
	_, err := ifgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifgc *InvitationFriendGroupCreate) ExecX(ctx context.Context) {
	if err := ifgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifgc *InvitationFriendGroupCreate) defaults() {
	if _, ok := ifgc.mutation.CreatedAt(); !ok {
		v := invitationfriendgroup.DefaultCreatedAt()
		ifgc.mutation.SetCreatedAt(v)
	}
	if _, ok := ifgc.mutation.ID(); !ok {
		v := invitationfriendgroup.DefaultID()
		ifgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifgc *InvitationFriendGroupCreate) check() error {
	if _, ok := ifgc.mutation.InvitationID(); !ok {
		return &ValidationError{Name: "invitation_id", err: errors.New(`ent: missing required field "InvitationFriendGroup.invitation_id"`)}
	}
	if _, ok := ifgc.mutation.FriendGroupID(); !ok {
		return &ValidationError{Name: "friend_group_id", err: errors.New(`ent: missing required field "InvitationFriendGroup.friend_group_id"`)}
	}
	if _, ok := ifgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvitationFriendGroup.created_at"`)}
	}
	if _, ok := ifgc.mutation.InvitationID(); !ok {
		return &ValidationError{Name: "invitation", err: errors.New(`ent: missing required edge "InvitationFriendGroup.invitation"`)}
	}
	if _, ok := ifgc.mutation.FriendGroupID(); !ok {
		return &ValidationError{Name: "friend_group", err: errors.New(`ent: missing required edge "InvitationFriendGroup.friend_group"`)}
	}
	return nil
}

func (ifgc *InvitationFriendGroupCreate) sqlSave(ctx context.Context) (*InvitationFriendGroup, error) {
	_node, _spec := ifgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ifgc *InvitationFriendGroupCreate) createSpec() (*InvitationFriendGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &InvitationFriendGroup{config: ifgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invitationfriendgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationfriendgroup.FieldID,
			},
		}
	)
	_spec.OnConflict = ifgc.conflict
	if id, ok := ifgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ifgc.mutation.CreatedAt(); ok {
		_spec.SetField(invitationfriendgroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ifgc.mutation.InvitationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invitationfriendgroup.InvitationTable,
			Columns: []string{invitationfriendgroup.InvitationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvitationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ifgc.mutation.FriendGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invitationfriendgroup.FriendGroupTable,
			Columns: []string{invitationfriendgroup.FriendGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FriendGroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationFriendGroup.Create().
//		SetInvitationID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationFriendGroupUpsert) {
//			SetInvitationID(v+v).
//		}).
//		Exec(ctx)
func (ifgc *InvitationFriendGroupCreate) OnConflict(opts ...sql.ConflictOption) *InvitationFriendGroupUpsertOne {
	ifgc.conflict = opts
	return &InvitationFriendGroupUpsertOne{
		create: ifgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifgc *InvitationFriendGroupCreate) OnConflictColumns(columns ...string) *InvitationFriendGroupUpsertOne {
	ifgc.conflict = append(ifgc.conflict, sql.ConflictColumns(columns...))
	return &InvitationFriendGroupUpsertOne{
		create: ifgc,
	}
}

type (
	// InvitationFriendGroupUpsertOne is the builder for "upsert"-ing
	//  one InvitationFriendGroup node.
	InvitationFriendGroupUpsertOne struct {
		create *InvitationFriendGroupCreate
	}

	// InvitationFriendGroupUpsert is the "OnConflict" setter.
	InvitationFriendGroupUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationfriendgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationFriendGroupUpsertOne) UpdateNewValues() *InvitationFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invitationfriendgroup.FieldID)
		}
		if _, exists := u.create.mutation.InvitationID(); exists {
			s.SetIgnore(invitationfriendgroup.FieldInvitationID)
		}
		if _, exists := u.create.mutation.FriendGroupID(); exists {
			s.SetIgnore(invitationfriendgroup.FieldFriendGroupID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invitationfriendgroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvitationFriendGroupUpsertOne) Ignore() *InvitationFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationFriendGroupUpsertOne) DoNothing() *InvitationFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationFriendGroupCreate.OnConflict
// documentation for more info.
func (u *InvitationFriendGroupUpsertOne) Update(set func(*InvitationFriendGroupUpsert)) *InvitationFriendGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationFriendGroupUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *InvitationFriendGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationFriendGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationFriendGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvitationFriendGroupUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InvitationFriendGroupUpsertOne.ID is not supported by MySQL driver. Use InvitationFriendGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvitationFriendGroupUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvitationFriendGroupCreateBulk is the builder for creating many InvitationFriendGroup entities in bulk.
type InvitationFriendGroupCreateBulk struct {
	config
	builders []*InvitationFriendGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the InvitationFriendGroup entities in the database.
func (ifgcb *InvitationFriendGroupCreateBulk) Save(ctx context.Context) ([]*InvitationFriendGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ifgcb.builders))
	nodes := make([]*InvitationFriendGroup, len(ifgcb.builders))
	mutators := make([]Mutator, len(ifgcb.builders))
	for i := range ifgcb.builders {
		func(i int, root context.Context) {
			builder := ifgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationFriendGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ifgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifgcb *InvitationFriendGroupCreateBulk) SaveX(ctx context.Context) []*InvitationFriendGroup {
	v, err := ifgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifgcb *InvitationFriendGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := ifgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifgcb *InvitationFriendGroupCreateBulk) ExecX(ctx context.Context) {
	if err := ifgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationFriendGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationFriendGroupUpsert) {
//			SetInvitationID(v+v).
//		}).
//		Exec(ctx)
func (ifgcb *InvitationFriendGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvitationFriendGroupUpsertBulk {
	ifgcb.conflict = opts
	return &InvitationFriendGroupUpsertBulk{
		create: ifgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ifgcb *InvitationFriendGroupCreateBulk) OnConflictColumns(columns ...string) *InvitationFriendGroupUpsertBulk {
	ifgcb.conflict = append(ifgcb.conflict, sql.ConflictColumns(columns...))
	return &InvitationFriendGroupUpsertBulk{
		create: ifgcb,
	}
}

// InvitationFriendGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of InvitationFriendGroup nodes.
type InvitationFriendGroupUpsertBulk struct {
	create *InvitationFriendGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationfriendgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationFriendGroupUpsertBulk) UpdateNewValues() *InvitationFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invitationfriendgroup.FieldID)
			}
			if _, exists := b.mutation.InvitationID(); exists {
				s.SetIgnore(invitationfriendgroup.FieldInvitationID)
			}
			if _, exists := b.mutation.FriendGroupID(); exists {
				s.SetIgnore(invitationfriendgroup.FieldFriendGroupID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invitationfriendgroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvitationFriendGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvitationFriendGroupUpsertBulk) Ignore() *InvitationFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationFriendGroupUpsertBulk) DoNothing() *InvitationFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationFriendGroupCreateBulk.OnConflict
// documentation for more info.
func (u *InvitationFriendGroupUpsertBulk) Update(set func(*InvitationFriendGroupUpsert)) *InvitationFriendGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationFriendGroupUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *InvitationFriendGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvitationFriendGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationFriendGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationFriendGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package friendshiprequest

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the friendshiprequest type in the database.
	Label = "friendship_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFromUsers holds the string denoting the from_users edge name in mutations.
	EdgeFromUsers = "from_users"
	// EdgeToUsers holds the string denoting the to_users edge name in mutations.
	EdgeToUsers = "to_users"
	// Table holds the table name of the friendshiprequest in the database.
	Table = "friendship_requests"
	// FromUsersTable is the table that holds the from_users relation/edge.
	FromUsersTable = "friendship_requests"
	// FromUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromUsersInverseTable = "users"
	// FromUsersColumn is the table column denoting the from_users relation/edge.
	FromUsersColumn = "from_user_id"
	// ToUsersTable is the table that holds the to_users relation/edge.
	ToUsersTable = "friendship_requests"
	// ToUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToUsersInverseTable = "users"
	// ToUsersColumn is the table column denoting the to_users relation/edge.
	ToUsersColumn = "to_user_id"
)

// Columns holds all SQL columns for friendshiprequest fields.
var Columns = []string{
	FieldID,
	FieldFromUserID,
	FieldToUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

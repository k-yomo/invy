// Code generated by ent, DO NOT EDIT.

package friendshiprequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the friendshiprequest type in the database.
	Label = "friendship_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFromUsers holds the string denoting the from_users edge name in mutations.
	EdgeFromUsers = "from_users"
	// EdgeToUsers holds the string denoting the to_users edge name in mutations.
	EdgeToUsers = "to_users"
	// Table holds the table name of the friendshiprequest in the database.
	Table = "friendship_requests"
	// FromUsersTable is the table that holds the from_users relation/edge.
	FromUsersTable = "friendship_requests"
	// FromUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromUsersInverseTable = "users"
	// FromUsersColumn is the table column denoting the from_users relation/edge.
	FromUsersColumn = "from_user_id"
	// ToUsersTable is the table that holds the to_users relation/edge.
	ToUsersTable = "friendship_requests"
	// ToUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToUsersInverseTable = "users"
	// ToUsersColumn is the table column denoting the to_users relation/edge.
	ToUsersColumn = "to_user_id"
)

// Columns holds all SQL columns for friendshiprequest fields.
var Columns = []string{
	FieldID,
	FieldFromUserID,
	FieldToUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the FriendshipRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// ByToUserID orders the results by the to_user_id field.
func ByToUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFromUsersField orders the results by from_users field.
func ByFromUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByToUsersField orders the results by to_users field.
func ByToUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newFromUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromUsersTable, FromUsersColumn),
	)
}
func newToUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToUsersTable, ToUsersColumn),
	)
}

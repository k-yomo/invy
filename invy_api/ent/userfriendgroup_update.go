// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
)

// UserFriendGroupUpdate is the builder for updating UserFriendGroup entities.
type UserFriendGroupUpdate struct {
	config
	hooks    []Hook
	mutation *UserFriendGroupMutation
}

// Where appends a list predicates to the UserFriendGroupUpdate builder.
func (ufgu *UserFriendGroupUpdate) Where(ps ...predicate.UserFriendGroup) *UserFriendGroupUpdate {
	ufgu.mutation.Where(ps...)
	return ufgu
}

// Mutation returns the UserFriendGroupMutation object of the builder.
func (ufgu *UserFriendGroupUpdate) Mutation() *UserFriendGroupMutation {
	return ufgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufgu *UserFriendGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserFriendGroupMutation](ctx, ufgu.sqlSave, ufgu.mutation, ufgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufgu *UserFriendGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := ufgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufgu *UserFriendGroupUpdate) Exec(ctx context.Context) error {
	_, err := ufgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufgu *UserFriendGroupUpdate) ExecX(ctx context.Context) {
	if err := ufgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufgu *UserFriendGroupUpdate) check() error {
	if _, ok := ufgu.mutation.FriendGroupID(); ufgu.mutation.FriendGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFriendGroup.friend_group"`)
	}
	if _, ok := ufgu.mutation.UserID(); ufgu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFriendGroup.user"`)
	}
	return nil
}

func (ufgu *UserFriendGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfriendgroup.Table, userfriendgroup.Columns, sqlgraph.NewFieldSpec(userfriendgroup.FieldID, field.TypeUUID))
	if ps := ufgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfriendgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufgu.mutation.done = true
	return n, nil
}

// UserFriendGroupUpdateOne is the builder for updating a single UserFriendGroup entity.
type UserFriendGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFriendGroupMutation
}

// Mutation returns the UserFriendGroupMutation object of the builder.
func (ufguo *UserFriendGroupUpdateOne) Mutation() *UserFriendGroupMutation {
	return ufguo.mutation
}

// Where appends a list predicates to the UserFriendGroupUpdate builder.
func (ufguo *UserFriendGroupUpdateOne) Where(ps ...predicate.UserFriendGroup) *UserFriendGroupUpdateOne {
	ufguo.mutation.Where(ps...)
	return ufguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufguo *UserFriendGroupUpdateOne) Select(field string, fields ...string) *UserFriendGroupUpdateOne {
	ufguo.fields = append([]string{field}, fields...)
	return ufguo
}

// Save executes the query and returns the updated UserFriendGroup entity.
func (ufguo *UserFriendGroupUpdateOne) Save(ctx context.Context) (*UserFriendGroup, error) {
	return withHooks[*UserFriendGroup, UserFriendGroupMutation](ctx, ufguo.sqlSave, ufguo.mutation, ufguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufguo *UserFriendGroupUpdateOne) SaveX(ctx context.Context) *UserFriendGroup {
	node, err := ufguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufguo *UserFriendGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := ufguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufguo *UserFriendGroupUpdateOne) ExecX(ctx context.Context) {
	if err := ufguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufguo *UserFriendGroupUpdateOne) check() error {
	if _, ok := ufguo.mutation.FriendGroupID(); ufguo.mutation.FriendGroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFriendGroup.friend_group"`)
	}
	if _, ok := ufguo.mutation.UserID(); ufguo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFriendGroup.user"`)
	}
	return nil
}

func (ufguo *UserFriendGroupUpdateOne) sqlSave(ctx context.Context) (_node *UserFriendGroup, err error) {
	if err := ufguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfriendgroup.Table, userfriendgroup.Columns, sqlgraph.NewFieldSpec(userfriendgroup.FieldID, field.TypeUUID))
	id, ok := ufguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFriendGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfriendgroup.FieldID)
		for _, f := range fields {
			if !userfriendgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfriendgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &UserFriendGroup{config: ufguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfriendgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufguo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package friendgroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the friendgroup type in the database.
	Label = "friend_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTotalCount holds the string denoting the total_count field in the database.
	FieldTotalCount = "total_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFriendUsers holds the string denoting the friend_users edge name in mutations.
	EdgeFriendUsers = "friend_users"
	// EdgeUserFriendGroups holds the string denoting the user_friend_groups edge name in mutations.
	EdgeUserFriendGroups = "user_friend_groups"
	// Table holds the table name of the friendgroup in the database.
	Table = "friend_groups"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "friend_groups"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// FriendUsersTable is the table that holds the friend_users relation/edge. The primary key declared below.
	FriendUsersTable = "user_friend_groups"
	// FriendUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FriendUsersInverseTable = "users"
	// UserFriendGroupsTable is the table that holds the user_friend_groups relation/edge.
	UserFriendGroupsTable = "user_friend_groups"
	// UserFriendGroupsInverseTable is the table name for the UserFriendGroup entity.
	// It exists in this package in order to avoid circular dependency with the "userfriendgroup" package.
	UserFriendGroupsInverseTable = "user_friend_groups"
	// UserFriendGroupsColumn is the table column denoting the user_friend_groups relation/edge.
	UserFriendGroupsColumn = "friend_group_id"
)

// Columns holds all SQL columns for friendgroup fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldName,
	FieldTotalCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// FriendUsersPrimaryKey and FriendUsersColumn2 are the table columns denoting the
	// primary key for the friend_users relation (M2M).
	FriendUsersPrimaryKey = []string{"friend_group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTotalCount holds the default value on creation for the "total_count" field.
	DefaultTotalCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the FriendGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTotalCount orders the results by the total_count field.
func ByTotalCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFriendUsersCount orders the results by friend_users count.
func ByFriendUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendUsersStep(), opts...)
	}
}

// ByFriendUsers orders the results by friend_users terms.
func ByFriendUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserFriendGroupsCount orders the results by user_friend_groups count.
func ByUserFriendGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserFriendGroupsStep(), opts...)
	}
}

// ByUserFriendGroups orders the results by user_friend_groups terms.
func ByUserFriendGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserFriendGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newFriendUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FriendUsersTable, FriendUsersPrimaryKey...),
	)
}
func newUserFriendGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserFriendGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserFriendGroupsTable, UserFriendGroupsColumn),
	)
}

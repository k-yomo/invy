// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/invitationawaiting"
	"github.com/k-yomo/invy/invy_api/ent/user"
)

// InvitationAwaitingCreate is the builder for creating a InvitationAwaiting entity.
type InvitationAwaitingCreate struct {
	config
	mutation *InvitationAwaitingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (iac *InvitationAwaitingCreate) SetUserID(u uuid.UUID) *InvitationAwaitingCreate {
	iac.mutation.SetUserID(u)
	return iac
}

// SetStartsAt sets the "starts_at" field.
func (iac *InvitationAwaitingCreate) SetStartsAt(t time.Time) *InvitationAwaitingCreate {
	iac.mutation.SetStartsAt(t)
	return iac
}

// SetEndsAt sets the "ends_at" field.
func (iac *InvitationAwaitingCreate) SetEndsAt(t time.Time) *InvitationAwaitingCreate {
	iac.mutation.SetEndsAt(t)
	return iac
}

// SetComment sets the "comment" field.
func (iac *InvitationAwaitingCreate) SetComment(s string) *InvitationAwaitingCreate {
	iac.mutation.SetComment(s)
	return iac
}

// SetCreatedAt sets the "created_at" field.
func (iac *InvitationAwaitingCreate) SetCreatedAt(t time.Time) *InvitationAwaitingCreate {
	iac.mutation.SetCreatedAt(t)
	return iac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iac *InvitationAwaitingCreate) SetNillableCreatedAt(t *time.Time) *InvitationAwaitingCreate {
	if t != nil {
		iac.SetCreatedAt(*t)
	}
	return iac
}

// SetUpdatedAt sets the "updated_at" field.
func (iac *InvitationAwaitingCreate) SetUpdatedAt(t time.Time) *InvitationAwaitingCreate {
	iac.mutation.SetUpdatedAt(t)
	return iac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iac *InvitationAwaitingCreate) SetNillableUpdatedAt(t *time.Time) *InvitationAwaitingCreate {
	if t != nil {
		iac.SetUpdatedAt(*t)
	}
	return iac
}

// SetID sets the "id" field.
func (iac *InvitationAwaitingCreate) SetID(u uuid.UUID) *InvitationAwaitingCreate {
	iac.mutation.SetID(u)
	return iac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iac *InvitationAwaitingCreate) SetNillableID(u *uuid.UUID) *InvitationAwaitingCreate {
	if u != nil {
		iac.SetID(*u)
	}
	return iac
}

// SetUser sets the "user" edge to the User entity.
func (iac *InvitationAwaitingCreate) SetUser(u *User) *InvitationAwaitingCreate {
	return iac.SetUserID(u.ID)
}

// Mutation returns the InvitationAwaitingMutation object of the builder.
func (iac *InvitationAwaitingCreate) Mutation() *InvitationAwaitingMutation {
	return iac.mutation
}

// Save creates the InvitationAwaiting in the database.
func (iac *InvitationAwaitingCreate) Save(ctx context.Context) (*InvitationAwaiting, error) {
	iac.defaults()
	return withHooks[*InvitationAwaiting, InvitationAwaitingMutation](ctx, iac.sqlSave, iac.mutation, iac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iac *InvitationAwaitingCreate) SaveX(ctx context.Context) *InvitationAwaiting {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *InvitationAwaitingCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *InvitationAwaitingCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iac *InvitationAwaitingCreate) defaults() {
	if _, ok := iac.mutation.CreatedAt(); !ok {
		v := invitationawaiting.DefaultCreatedAt()
		iac.mutation.SetCreatedAt(v)
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		v := invitationawaiting.DefaultUpdatedAt()
		iac.mutation.SetUpdatedAt(v)
	}
	if _, ok := iac.mutation.ID(); !ok {
		v := invitationawaiting.DefaultID()
		iac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *InvitationAwaitingCreate) check() error {
	if _, ok := iac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "InvitationAwaiting.user_id"`)}
	}
	if _, ok := iac.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "InvitationAwaiting.starts_at"`)}
	}
	if _, ok := iac.mutation.EndsAt(); !ok {
		return &ValidationError{Name: "ends_at", err: errors.New(`ent: missing required field "InvitationAwaiting.ends_at"`)}
	}
	if _, ok := iac.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "InvitationAwaiting.comment"`)}
	}
	if _, ok := iac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvitationAwaiting.created_at"`)}
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvitationAwaiting.updated_at"`)}
	}
	if _, ok := iac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "InvitationAwaiting.user"`)}
	}
	return nil
}

func (iac *InvitationAwaitingCreate) sqlSave(ctx context.Context) (*InvitationAwaiting, error) {
	if err := iac.check(); err != nil {
		return nil, err
	}
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iac.mutation.id = &_node.ID
	iac.mutation.done = true
	return _node, nil
}

func (iac *InvitationAwaitingCreate) createSpec() (*InvitationAwaiting, *sqlgraph.CreateSpec) {
	var (
		_node = &InvitationAwaiting{config: iac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invitationawaiting.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationawaiting.FieldID,
			},
		}
	)
	_spec.OnConflict = iac.conflict
	if id, ok := iac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iac.mutation.StartsAt(); ok {
		_spec.SetField(invitationawaiting.FieldStartsAt, field.TypeTime, value)
		_node.StartsAt = value
	}
	if value, ok := iac.mutation.EndsAt(); ok {
		_spec.SetField(invitationawaiting.FieldEndsAt, field.TypeTime, value)
		_node.EndsAt = value
	}
	if value, ok := iac.mutation.Comment(); ok {
		_spec.SetField(invitationawaiting.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := iac.mutation.CreatedAt(); ok {
		_spec.SetField(invitationawaiting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iac.mutation.UpdatedAt(); ok {
		_spec.SetField(invitationawaiting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := iac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invitationawaiting.UserTable,
			Columns: []string{invitationawaiting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationAwaiting.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationAwaitingUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (iac *InvitationAwaitingCreate) OnConflict(opts ...sql.ConflictOption) *InvitationAwaitingUpsertOne {
	iac.conflict = opts
	return &InvitationAwaitingUpsertOne{
		create: iac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iac *InvitationAwaitingCreate) OnConflictColumns(columns ...string) *InvitationAwaitingUpsertOne {
	iac.conflict = append(iac.conflict, sql.ConflictColumns(columns...))
	return &InvitationAwaitingUpsertOne{
		create: iac,
	}
}

type (
	// InvitationAwaitingUpsertOne is the builder for "upsert"-ing
	//  one InvitationAwaiting node.
	InvitationAwaitingUpsertOne struct {
		create *InvitationAwaitingCreate
	}

	// InvitationAwaitingUpsert is the "OnConflict" setter.
	InvitationAwaitingUpsert struct {
		*sql.UpdateSet
	}
)

// SetStartsAt sets the "starts_at" field.
func (u *InvitationAwaitingUpsert) SetStartsAt(v time.Time) *InvitationAwaitingUpsert {
	u.Set(invitationawaiting.FieldStartsAt, v)
	return u
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsert) UpdateStartsAt() *InvitationAwaitingUpsert {
	u.SetExcluded(invitationawaiting.FieldStartsAt)
	return u
}

// SetEndsAt sets the "ends_at" field.
func (u *InvitationAwaitingUpsert) SetEndsAt(v time.Time) *InvitationAwaitingUpsert {
	u.Set(invitationawaiting.FieldEndsAt, v)
	return u
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsert) UpdateEndsAt() *InvitationAwaitingUpsert {
	u.SetExcluded(invitationawaiting.FieldEndsAt)
	return u
}

// SetComment sets the "comment" field.
func (u *InvitationAwaitingUpsert) SetComment(v string) *InvitationAwaitingUpsert {
	u.Set(invitationawaiting.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationAwaitingUpsert) UpdateComment() *InvitationAwaitingUpsert {
	u.SetExcluded(invitationawaiting.FieldComment)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationAwaitingUpsert) SetUpdatedAt(v time.Time) *InvitationAwaitingUpsert {
	u.Set(invitationawaiting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsert) UpdateUpdatedAt() *InvitationAwaitingUpsert {
	u.SetExcluded(invitationawaiting.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationawaiting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationAwaitingUpsertOne) UpdateNewValues() *InvitationAwaitingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invitationawaiting.FieldID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(invitationawaiting.FieldUserID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invitationawaiting.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InvitationAwaitingUpsertOne) Ignore() *InvitationAwaitingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationAwaitingUpsertOne) DoNothing() *InvitationAwaitingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationAwaitingCreate.OnConflict
// documentation for more info.
func (u *InvitationAwaitingUpsertOne) Update(set func(*InvitationAwaitingUpsert)) *InvitationAwaitingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationAwaitingUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *InvitationAwaitingUpsertOne) SetStartsAt(v time.Time) *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertOne) UpdateStartsAt() *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *InvitationAwaitingUpsertOne) SetEndsAt(v time.Time) *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertOne) UpdateEndsAt() *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateEndsAt()
	})
}

// SetComment sets the "comment" field.
func (u *InvitationAwaitingUpsertOne) SetComment(v string) *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertOne) UpdateComment() *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateComment()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationAwaitingUpsertOne) SetUpdatedAt(v time.Time) *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertOne) UpdateUpdatedAt() *InvitationAwaitingUpsertOne {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InvitationAwaitingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationAwaitingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationAwaitingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InvitationAwaitingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: InvitationAwaitingUpsertOne.ID is not supported by MySQL driver. Use InvitationAwaitingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InvitationAwaitingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InvitationAwaitingCreateBulk is the builder for creating many InvitationAwaiting entities in bulk.
type InvitationAwaitingCreateBulk struct {
	config
	builders []*InvitationAwaitingCreate
	conflict []sql.ConflictOption
}

// Save creates the InvitationAwaiting entities in the database.
func (iacb *InvitationAwaitingCreateBulk) Save(ctx context.Context) ([]*InvitationAwaiting, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*InvitationAwaiting, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvitationAwaitingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *InvitationAwaitingCreateBulk) SaveX(ctx context.Context) []*InvitationAwaiting {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *InvitationAwaitingCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *InvitationAwaitingCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.InvitationAwaiting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InvitationAwaitingUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (iacb *InvitationAwaitingCreateBulk) OnConflict(opts ...sql.ConflictOption) *InvitationAwaitingUpsertBulk {
	iacb.conflict = opts
	return &InvitationAwaitingUpsertBulk{
		create: iacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iacb *InvitationAwaitingCreateBulk) OnConflictColumns(columns ...string) *InvitationAwaitingUpsertBulk {
	iacb.conflict = append(iacb.conflict, sql.ConflictColumns(columns...))
	return &InvitationAwaitingUpsertBulk{
		create: iacb,
	}
}

// InvitationAwaitingUpsertBulk is the builder for "upsert"-ing
// a bulk of InvitationAwaiting nodes.
type InvitationAwaitingUpsertBulk struct {
	create *InvitationAwaitingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invitationawaiting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *InvitationAwaitingUpsertBulk) UpdateNewValues() *InvitationAwaitingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invitationawaiting.FieldID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(invitationawaiting.FieldUserID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invitationawaiting.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.InvitationAwaiting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InvitationAwaitingUpsertBulk) Ignore() *InvitationAwaitingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InvitationAwaitingUpsertBulk) DoNothing() *InvitationAwaitingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InvitationAwaitingCreateBulk.OnConflict
// documentation for more info.
func (u *InvitationAwaitingUpsertBulk) Update(set func(*InvitationAwaitingUpsert)) *InvitationAwaitingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InvitationAwaitingUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *InvitationAwaitingUpsertBulk) SetStartsAt(v time.Time) *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertBulk) UpdateStartsAt() *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *InvitationAwaitingUpsertBulk) SetEndsAt(v time.Time) *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertBulk) UpdateEndsAt() *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateEndsAt()
	})
}

// SetComment sets the "comment" field.
func (u *InvitationAwaitingUpsertBulk) SetComment(v string) *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertBulk) UpdateComment() *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateComment()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InvitationAwaitingUpsertBulk) SetUpdatedAt(v time.Time) *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InvitationAwaitingUpsertBulk) UpdateUpdatedAt() *InvitationAwaitingUpsertBulk {
	return u.Update(func(s *InvitationAwaitingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *InvitationAwaitingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InvitationAwaitingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InvitationAwaitingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InvitationAwaitingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

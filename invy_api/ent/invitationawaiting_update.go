// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/invitationawaiting"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
)

// InvitationAwaitingUpdate is the builder for updating InvitationAwaiting entities.
type InvitationAwaitingUpdate struct {
	config
	hooks    []Hook
	mutation *InvitationAwaitingMutation
}

// Where appends a list predicates to the InvitationAwaitingUpdate builder.
func (iau *InvitationAwaitingUpdate) Where(ps ...predicate.InvitationAwaiting) *InvitationAwaitingUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetStartsAt sets the "starts_at" field.
func (iau *InvitationAwaitingUpdate) SetStartsAt(t time.Time) *InvitationAwaitingUpdate {
	iau.mutation.SetStartsAt(t)
	return iau
}

// SetEndsAt sets the "ends_at" field.
func (iau *InvitationAwaitingUpdate) SetEndsAt(t time.Time) *InvitationAwaitingUpdate {
	iau.mutation.SetEndsAt(t)
	return iau
}

// SetComment sets the "comment" field.
func (iau *InvitationAwaitingUpdate) SetComment(s string) *InvitationAwaitingUpdate {
	iau.mutation.SetComment(s)
	return iau
}

// SetUpdatedAt sets the "updated_at" field.
func (iau *InvitationAwaitingUpdate) SetUpdatedAt(t time.Time) *InvitationAwaitingUpdate {
	iau.mutation.SetUpdatedAt(t)
	return iau
}

// Mutation returns the InvitationAwaitingMutation object of the builder.
func (iau *InvitationAwaitingUpdate) Mutation() *InvitationAwaitingMutation {
	return iau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *InvitationAwaitingUpdate) Save(ctx context.Context) (int, error) {
	iau.defaults()
	return withHooks[int, InvitationAwaitingMutation](ctx, iau.sqlSave, iau.mutation, iau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iau *InvitationAwaitingUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *InvitationAwaitingUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *InvitationAwaitingUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iau *InvitationAwaitingUpdate) defaults() {
	if _, ok := iau.mutation.UpdatedAt(); !ok {
		v := invitationawaiting.UpdateDefaultUpdatedAt()
		iau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iau *InvitationAwaitingUpdate) check() error {
	if _, ok := iau.mutation.UserID(); iau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationAwaiting.user"`)
	}
	return nil
}

func (iau *InvitationAwaitingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iau.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitationawaiting.Table,
			Columns: invitationawaiting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationawaiting.FieldID,
			},
		},
	}
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.StartsAt(); ok {
		_spec.SetField(invitationawaiting.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := iau.mutation.EndsAt(); ok {
		_spec.SetField(invitationawaiting.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := iau.mutation.Comment(); ok {
		_spec.SetField(invitationawaiting.FieldComment, field.TypeString, value)
	}
	if value, ok := iau.mutation.UpdatedAt(); ok {
		_spec.SetField(invitationawaiting.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationawaiting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iau.mutation.done = true
	return n, nil
}

// InvitationAwaitingUpdateOne is the builder for updating a single InvitationAwaiting entity.
type InvitationAwaitingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvitationAwaitingMutation
}

// SetStartsAt sets the "starts_at" field.
func (iauo *InvitationAwaitingUpdateOne) SetStartsAt(t time.Time) *InvitationAwaitingUpdateOne {
	iauo.mutation.SetStartsAt(t)
	return iauo
}

// SetEndsAt sets the "ends_at" field.
func (iauo *InvitationAwaitingUpdateOne) SetEndsAt(t time.Time) *InvitationAwaitingUpdateOne {
	iauo.mutation.SetEndsAt(t)
	return iauo
}

// SetComment sets the "comment" field.
func (iauo *InvitationAwaitingUpdateOne) SetComment(s string) *InvitationAwaitingUpdateOne {
	iauo.mutation.SetComment(s)
	return iauo
}

// SetUpdatedAt sets the "updated_at" field.
func (iauo *InvitationAwaitingUpdateOne) SetUpdatedAt(t time.Time) *InvitationAwaitingUpdateOne {
	iauo.mutation.SetUpdatedAt(t)
	return iauo
}

// Mutation returns the InvitationAwaitingMutation object of the builder.
func (iauo *InvitationAwaitingUpdateOne) Mutation() *InvitationAwaitingMutation {
	return iauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *InvitationAwaitingUpdateOne) Select(field string, fields ...string) *InvitationAwaitingUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated InvitationAwaiting entity.
func (iauo *InvitationAwaitingUpdateOne) Save(ctx context.Context) (*InvitationAwaiting, error) {
	iauo.defaults()
	return withHooks[*InvitationAwaiting, InvitationAwaitingMutation](ctx, iauo.sqlSave, iauo.mutation, iauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *InvitationAwaitingUpdateOne) SaveX(ctx context.Context) *InvitationAwaiting {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *InvitationAwaitingUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *InvitationAwaitingUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iauo *InvitationAwaitingUpdateOne) defaults() {
	if _, ok := iauo.mutation.UpdatedAt(); !ok {
		v := invitationawaiting.UpdateDefaultUpdatedAt()
		iauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iauo *InvitationAwaitingUpdateOne) check() error {
	if _, ok := iauo.mutation.UserID(); iauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationAwaiting.user"`)
	}
	return nil
}

func (iauo *InvitationAwaitingUpdateOne) sqlSave(ctx context.Context) (_node *InvitationAwaiting, err error) {
	if err := iauo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitationawaiting.Table,
			Columns: invitationawaiting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationawaiting.FieldID,
			},
		},
	}
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvitationAwaiting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitationawaiting.FieldID)
		for _, f := range fields {
			if !invitationawaiting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitationawaiting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.StartsAt(); ok {
		_spec.SetField(invitationawaiting.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := iauo.mutation.EndsAt(); ok {
		_spec.SetField(invitationawaiting.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := iauo.mutation.Comment(); ok {
		_spec.SetField(invitationawaiting.FieldComment, field.TypeString, value)
	}
	if value, ok := iauo.mutation.UpdatedAt(); ok {
		_spec.SetField(invitationawaiting.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &InvitationAwaiting{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationawaiting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iauo.mutation.done = true
	return _node, nil
}

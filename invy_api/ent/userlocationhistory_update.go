// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/userlocationhistory"
	"github.com/k-yomo/invy/pkg/pgutil"
)

// UserLocationHistoryUpdate is the builder for updating UserLocationHistory entities.
type UserLocationHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *UserLocationHistoryMutation
}

// Where appends a list predicates to the UserLocationHistoryUpdate builder.
func (ulhu *UserLocationHistoryUpdate) Where(ps ...predicate.UserLocationHistory) *UserLocationHistoryUpdate {
	ulhu.mutation.Where(ps...)
	return ulhu
}

// SetCoordinate sets the "coordinate" field.
func (ulhu *UserLocationHistoryUpdate) SetCoordinate(pp *pgutil.GeoPoint) *UserLocationHistoryUpdate {
	ulhu.mutation.SetCoordinate(pp)
	return ulhu
}

// Mutation returns the UserLocationHistoryMutation object of the builder.
func (ulhu *UserLocationHistoryUpdate) Mutation() *UserLocationHistoryMutation {
	return ulhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulhu *UserLocationHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserLocationHistoryMutation](ctx, ulhu.sqlSave, ulhu.mutation, ulhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulhu *UserLocationHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ulhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulhu *UserLocationHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ulhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulhu *UserLocationHistoryUpdate) ExecX(ctx context.Context) {
	if err := ulhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulhu *UserLocationHistoryUpdate) check() error {
	if _, ok := ulhu.mutation.UserID(); ulhu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserLocationHistory.user"`)
	}
	return nil
}

func (ulhu *UserLocationHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ulhu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocationhistory.Table,
			Columns: userlocationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userlocationhistory.FieldID,
			},
		},
	}
	if ps := ulhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulhu.mutation.Coordinate(); ok {
		_spec.SetField(userlocationhistory.FieldCoordinate, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ulhu.mutation.done = true
	return n, nil
}

// UserLocationHistoryUpdateOne is the builder for updating a single UserLocationHistory entity.
type UserLocationHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLocationHistoryMutation
}

// SetCoordinate sets the "coordinate" field.
func (ulhuo *UserLocationHistoryUpdateOne) SetCoordinate(pp *pgutil.GeoPoint) *UserLocationHistoryUpdateOne {
	ulhuo.mutation.SetCoordinate(pp)
	return ulhuo
}

// Mutation returns the UserLocationHistoryMutation object of the builder.
func (ulhuo *UserLocationHistoryUpdateOne) Mutation() *UserLocationHistoryMutation {
	return ulhuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ulhuo *UserLocationHistoryUpdateOne) Select(field string, fields ...string) *UserLocationHistoryUpdateOne {
	ulhuo.fields = append([]string{field}, fields...)
	return ulhuo
}

// Save executes the query and returns the updated UserLocationHistory entity.
func (ulhuo *UserLocationHistoryUpdateOne) Save(ctx context.Context) (*UserLocationHistory, error) {
	return withHooks[*UserLocationHistory, UserLocationHistoryMutation](ctx, ulhuo.sqlSave, ulhuo.mutation, ulhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulhuo *UserLocationHistoryUpdateOne) SaveX(ctx context.Context) *UserLocationHistory {
	node, err := ulhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ulhuo *UserLocationHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ulhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulhuo *UserLocationHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ulhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulhuo *UserLocationHistoryUpdateOne) check() error {
	if _, ok := ulhuo.mutation.UserID(); ulhuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserLocationHistory.user"`)
	}
	return nil
}

func (ulhuo *UserLocationHistoryUpdateOne) sqlSave(ctx context.Context) (_node *UserLocationHistory, err error) {
	if err := ulhuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocationhistory.Table,
			Columns: userlocationhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userlocationhistory.FieldID,
			},
		},
	}
	id, ok := ulhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserLocationHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ulhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlocationhistory.FieldID)
		for _, f := range fields {
			if !userlocationhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlocationhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ulhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulhuo.mutation.Coordinate(); ok {
		_spec.SetField(userlocationhistory.FieldCoordinate, field.TypeOther, value)
	}
	_node = &UserLocationHistory{config: ulhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ulhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocationhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ulhuo.mutation.done = true
	return _node, nil
}

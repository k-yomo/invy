// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
)

// InvitationDenialUpdate is the builder for updating InvitationDenial entities.
type InvitationDenialUpdate struct {
	config
	hooks    []Hook
	mutation *InvitationDenialMutation
}

// Where appends a list predicates to the InvitationDenialUpdate builder.
func (idu *InvitationDenialUpdate) Where(ps ...predicate.InvitationDenial) *InvitationDenialUpdate {
	idu.mutation.Where(ps...)
	return idu
}

// Mutation returns the InvitationDenialMutation object of the builder.
func (idu *InvitationDenialUpdate) Mutation() *InvitationDenialMutation {
	return idu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *InvitationDenialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, InvitationDenialMutation](ctx, idu.sqlSave, idu.mutation, idu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idu *InvitationDenialUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *InvitationDenialUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *InvitationDenialUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idu *InvitationDenialUpdate) check() error {
	if _, ok := idu.mutation.UserID(); idu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationDenial.user"`)
	}
	if _, ok := idu.mutation.InvitationID(); idu.mutation.InvitationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationDenial.invitation"`)
	}
	return nil
}

func (idu *InvitationDenialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := idu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitationdenial.Table, invitationdenial.Columns, sqlgraph.NewFieldSpec(invitationdenial.FieldID, field.TypeUUID))
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationdenial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idu.mutation.done = true
	return n, nil
}

// InvitationDenialUpdateOne is the builder for updating a single InvitationDenial entity.
type InvitationDenialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvitationDenialMutation
}

// Mutation returns the InvitationDenialMutation object of the builder.
func (iduo *InvitationDenialUpdateOne) Mutation() *InvitationDenialMutation {
	return iduo.mutation
}

// Where appends a list predicates to the InvitationDenialUpdate builder.
func (iduo *InvitationDenialUpdateOne) Where(ps ...predicate.InvitationDenial) *InvitationDenialUpdateOne {
	iduo.mutation.Where(ps...)
	return iduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iduo *InvitationDenialUpdateOne) Select(field string, fields ...string) *InvitationDenialUpdateOne {
	iduo.fields = append([]string{field}, fields...)
	return iduo
}

// Save executes the query and returns the updated InvitationDenial entity.
func (iduo *InvitationDenialUpdateOne) Save(ctx context.Context) (*InvitationDenial, error) {
	return withHooks[*InvitationDenial, InvitationDenialMutation](ctx, iduo.sqlSave, iduo.mutation, iduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *InvitationDenialUpdateOne) SaveX(ctx context.Context) *InvitationDenial {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *InvitationDenialUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *InvitationDenialUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iduo *InvitationDenialUpdateOne) check() error {
	if _, ok := iduo.mutation.UserID(); iduo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationDenial.user"`)
	}
	if _, ok := iduo.mutation.InvitationID(); iduo.mutation.InvitationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationDenial.invitation"`)
	}
	return nil
}

func (iduo *InvitationDenialUpdateOne) sqlSave(ctx context.Context) (_node *InvitationDenial, err error) {
	if err := iduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invitationdenial.Table, invitationdenial.Columns, sqlgraph.NewFieldSpec(invitationdenial.FieldID, field.TypeUUID))
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvitationDenial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitationdenial.FieldID)
		for _, f := range fields {
			if !invitationdenial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitationdenial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &InvitationDenial{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationdenial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iduo.mutation.done = true
	return _node, nil
}

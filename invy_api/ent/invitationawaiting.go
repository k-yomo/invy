// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/invitationawaiting"
	"github.com/k-yomo/invy/invy_api/ent/user"
)

// InvitationAwaiting is the model entity for the InvitationAwaiting schema.
type InvitationAwaiting struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// StartsAt holds the value of the "starts_at" field.
	StartsAt time.Time `json:"starts_at,omitempty"`
	// EndsAt holds the value of the "ends_at" field.
	EndsAt time.Time `json:"ends_at,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvitationAwaitingQuery when eager-loading is set.
	Edges InvitationAwaitingEdges `json:"edges"`
}

// InvitationAwaitingEdges holds the relations/edges for other nodes in the graph.
type InvitationAwaitingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationAwaitingEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvitationAwaiting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invitationawaiting.FieldComment:
			values[i] = new(sql.NullString)
		case invitationawaiting.FieldStartsAt, invitationawaiting.FieldEndsAt, invitationawaiting.FieldCreatedAt, invitationawaiting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case invitationawaiting.FieldID, invitationawaiting.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type InvitationAwaiting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvitationAwaiting fields.
func (ia *InvitationAwaiting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invitationawaiting.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ia.ID = *value
			}
		case invitationawaiting.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ia.UserID = *value
			}
		case invitationawaiting.FieldStartsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at", values[i])
			} else if value.Valid {
				ia.StartsAt = value.Time
			}
		case invitationawaiting.FieldEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ends_at", values[i])
			} else if value.Valid {
				ia.EndsAt = value.Time
			}
		case invitationawaiting.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				ia.Comment = value.String
			}
		case invitationawaiting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ia.CreatedAt = value.Time
			}
		case invitationawaiting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ia.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the InvitationAwaiting entity.
func (ia *InvitationAwaiting) QueryUser() *UserQuery {
	return (&InvitationAwaitingClient{config: ia.config}).QueryUser(ia)
}

// Update returns a builder for updating this InvitationAwaiting.
// Note that you need to call InvitationAwaiting.Unwrap() before calling this method if this InvitationAwaiting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ia *InvitationAwaiting) Update() *InvitationAwaitingUpdateOne {
	return (&InvitationAwaitingClient{config: ia.config}).UpdateOne(ia)
}

// Unwrap unwraps the InvitationAwaiting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ia *InvitationAwaiting) Unwrap() *InvitationAwaiting {
	_tx, ok := ia.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvitationAwaiting is not a transactional entity")
	}
	ia.config.driver = _tx.drv
	return ia
}

// String implements the fmt.Stringer.
func (ia *InvitationAwaiting) String() string {
	var builder strings.Builder
	builder.WriteString("InvitationAwaiting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ia.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ia.UserID))
	builder.WriteString(", ")
	builder.WriteString("starts_at=")
	builder.WriteString(ia.StartsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ends_at=")
	builder.WriteString(ia.EndsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(ia.Comment)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ia.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ia.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InvitationAwaitings is a parsable slice of InvitationAwaiting.
type InvitationAwaitings []*InvitationAwaiting

func (ia InvitationAwaitings) config(cfg config) {
	for _i := range ia {
		ia[_i].config = cfg
	}
}

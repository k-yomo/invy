// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/migrate"

	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/friendshiprequest"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/invitationfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/invitationuser"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/usermute"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FriendGroup is the client for interacting with the FriendGroup builders.
	FriendGroup *FriendGroupClient
	// Friendship is the client for interacting with the Friendship builders.
	Friendship *FriendshipClient
	// FriendshipRequest is the client for interacting with the FriendshipRequest builders.
	FriendshipRequest *FriendshipRequestClient
	// Invitation is the client for interacting with the Invitation builders.
	Invitation *InvitationClient
	// InvitationAcceptance is the client for interacting with the InvitationAcceptance builders.
	InvitationAcceptance *InvitationAcceptanceClient
	// InvitationDenial is the client for interacting with the InvitationDenial builders.
	InvitationDenial *InvitationDenialClient
	// InvitationFriendGroup is the client for interacting with the InvitationFriendGroup builders.
	InvitationFriendGroup *InvitationFriendGroupClient
	// InvitationUser is the client for interacting with the InvitationUser builders.
	InvitationUser *InvitationUserClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserFriendGroup is the client for interacting with the UserFriendGroup builders.
	UserFriendGroup *UserFriendGroupClient
	// UserMute is the client for interacting with the UserMute builders.
	UserMute *UserMuteClient
	// UserProfile is the client for interacting with the UserProfile builders.
	UserProfile *UserProfileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FriendGroup = NewFriendGroupClient(c.config)
	c.Friendship = NewFriendshipClient(c.config)
	c.FriendshipRequest = NewFriendshipRequestClient(c.config)
	c.Invitation = NewInvitationClient(c.config)
	c.InvitationAcceptance = NewInvitationAcceptanceClient(c.config)
	c.InvitationDenial = NewInvitationDenialClient(c.config)
	c.InvitationFriendGroup = NewInvitationFriendGroupClient(c.config)
	c.InvitationUser = NewInvitationUserClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserFriendGroup = NewUserFriendGroupClient(c.config)
	c.UserMute = NewUserMuteClient(c.config)
	c.UserProfile = NewUserProfileClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		FriendGroup:           NewFriendGroupClient(cfg),
		Friendship:            NewFriendshipClient(cfg),
		FriendshipRequest:     NewFriendshipRequestClient(cfg),
		Invitation:            NewInvitationClient(cfg),
		InvitationAcceptance:  NewInvitationAcceptanceClient(cfg),
		InvitationDenial:      NewInvitationDenialClient(cfg),
		InvitationFriendGroup: NewInvitationFriendGroupClient(cfg),
		InvitationUser:        NewInvitationUserClient(cfg),
		User:                  NewUserClient(cfg),
		UserFriendGroup:       NewUserFriendGroupClient(cfg),
		UserMute:              NewUserMuteClient(cfg),
		UserProfile:           NewUserProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		FriendGroup:           NewFriendGroupClient(cfg),
		Friendship:            NewFriendshipClient(cfg),
		FriendshipRequest:     NewFriendshipRequestClient(cfg),
		Invitation:            NewInvitationClient(cfg),
		InvitationAcceptance:  NewInvitationAcceptanceClient(cfg),
		InvitationDenial:      NewInvitationDenialClient(cfg),
		InvitationFriendGroup: NewInvitationFriendGroupClient(cfg),
		InvitationUser:        NewInvitationUserClient(cfg),
		User:                  NewUserClient(cfg),
		UserFriendGroup:       NewUserFriendGroupClient(cfg),
		UserMute:              NewUserMuteClient(cfg),
		UserProfile:           NewUserProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FriendGroup.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FriendGroup.Use(hooks...)
	c.Friendship.Use(hooks...)
	c.FriendshipRequest.Use(hooks...)
	c.Invitation.Use(hooks...)
	c.InvitationAcceptance.Use(hooks...)
	c.InvitationDenial.Use(hooks...)
	c.InvitationFriendGroup.Use(hooks...)
	c.InvitationUser.Use(hooks...)
	c.User.Use(hooks...)
	c.UserFriendGroup.Use(hooks...)
	c.UserMute.Use(hooks...)
	c.UserProfile.Use(hooks...)
}

// FriendGroupClient is a client for the FriendGroup schema.
type FriendGroupClient struct {
	config
}

// NewFriendGroupClient returns a client for the FriendGroup from the given config.
func NewFriendGroupClient(c config) *FriendGroupClient {
	return &FriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendgroup.Hooks(f(g(h())))`.
func (c *FriendGroupClient) Use(hooks ...Hook) {
	c.hooks.FriendGroup = append(c.hooks.FriendGroup, hooks...)
}

// Create returns a builder for creating a FriendGroup entity.
func (c *FriendGroupClient) Create() *FriendGroupCreate {
	mutation := newFriendGroupMutation(c.config, OpCreate)
	return &FriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendGroup entities.
func (c *FriendGroupClient) CreateBulk(builders ...*FriendGroupCreate) *FriendGroupCreateBulk {
	return &FriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendGroup.
func (c *FriendGroupClient) Update() *FriendGroupUpdate {
	mutation := newFriendGroupMutation(c.config, OpUpdate)
	return &FriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendGroupClient) UpdateOne(fg *FriendGroup) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroup(fg))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendGroupClient) UpdateOneID(id uuid.UUID) *FriendGroupUpdateOne {
	mutation := newFriendGroupMutation(c.config, OpUpdateOne, withFriendGroupID(id))
	return &FriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendGroup.
func (c *FriendGroupClient) Delete() *FriendGroupDelete {
	mutation := newFriendGroupMutation(c.config, OpDelete)
	return &FriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendGroupClient) DeleteOne(fg *FriendGroup) *FriendGroupDeleteOne {
	return c.DeleteOneID(fg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendGroupClient) DeleteOneID(id uuid.UUID) *FriendGroupDeleteOne {
	builder := c.Delete().Where(friendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendGroupDeleteOne{builder}
}

// Query returns a query builder for FriendGroup.
func (c *FriendGroupClient) Query() *FriendGroupQuery {
	return &FriendGroupQuery{
		config: c.config,
	}
}

// Get returns a FriendGroup entity by its id.
func (c *FriendGroupClient) Get(ctx context.Context, id uuid.UUID) (*FriendGroup, error) {
	return c.Query().Where(friendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendGroupClient) GetX(ctx context.Context, id uuid.UUID) *FriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a FriendGroup.
func (c *FriendGroupClient) QueryUser(fg *FriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendgroup.UserTable, friendgroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUsers queries the friend_users edge of a FriendGroup.
func (c *FriendGroupClient) QueryFriendUsers(fg *FriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, friendgroup.FriendUsersTable, friendgroup.FriendUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationFriendGroups queries the invitation_friend_groups edge of a FriendGroup.
func (c *FriendGroupClient) QueryInvitationFriendGroups(fg *FriendGroup) *InvitationFriendGroupQuery {
	query := &InvitationFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(invitationfriendgroup.Table, invitationfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, friendgroup.InvitationFriendGroupsTable, friendgroup.InvitationFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFriendGroups queries the user_friend_groups edge of a FriendGroup.
func (c *FriendGroupClient) QueryUserFriendGroups(fg *FriendGroup) *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendgroup.Table, friendgroup.FieldID, id),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, friendgroup.UserFriendGroupsTable, friendgroup.UserFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(fg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendGroupClient) Hooks() []Hook {
	return c.hooks.FriendGroup
}

// FriendshipClient is a client for the Friendship schema.
type FriendshipClient struct {
	config
}

// NewFriendshipClient returns a client for the Friendship from the given config.
func NewFriendshipClient(c config) *FriendshipClient {
	return &FriendshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendship.Hooks(f(g(h())))`.
func (c *FriendshipClient) Use(hooks ...Hook) {
	c.hooks.Friendship = append(c.hooks.Friendship, hooks...)
}

// Create returns a builder for creating a Friendship entity.
func (c *FriendshipClient) Create() *FriendshipCreate {
	mutation := newFriendshipMutation(c.config, OpCreate)
	return &FriendshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Friendship entities.
func (c *FriendshipClient) CreateBulk(builders ...*FriendshipCreate) *FriendshipCreateBulk {
	return &FriendshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Friendship.
func (c *FriendshipClient) Update() *FriendshipUpdate {
	mutation := newFriendshipMutation(c.config, OpUpdate)
	return &FriendshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipClient) UpdateOne(f *Friendship) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendship(f))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipClient) UpdateOneID(id uuid.UUID) *FriendshipUpdateOne {
	mutation := newFriendshipMutation(c.config, OpUpdateOne, withFriendshipID(id))
	return &FriendshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Friendship.
func (c *FriendshipClient) Delete() *FriendshipDelete {
	mutation := newFriendshipMutation(c.config, OpDelete)
	return &FriendshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipClient) DeleteOne(f *Friendship) *FriendshipDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipClient) DeleteOneID(id uuid.UUID) *FriendshipDeleteOne {
	builder := c.Delete().Where(friendship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipDeleteOne{builder}
}

// Query returns a query builder for Friendship.
func (c *FriendshipClient) Query() *FriendshipQuery {
	return &FriendshipQuery{
		config: c.config,
	}
}

// Get returns a Friendship entity by its id.
func (c *FriendshipClient) Get(ctx context.Context, id uuid.UUID) (*Friendship, error) {
	return c.Query().Where(friendship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipClient) GetX(ctx context.Context, id uuid.UUID) *Friendship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Friendship.
func (c *FriendshipClient) QueryUser(f *Friendship) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendship.UserTable, friendship.UserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUser queries the friend_user edge of a Friendship.
func (c *FriendshipClient) QueryFriendUser(f *Friendship) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendship.Table, friendship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendship.FriendUserTable, friendship.FriendUserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipClient) Hooks() []Hook {
	return c.hooks.Friendship
}

// FriendshipRequestClient is a client for the FriendshipRequest schema.
type FriendshipRequestClient struct {
	config
}

// NewFriendshipRequestClient returns a client for the FriendshipRequest from the given config.
func NewFriendshipRequestClient(c config) *FriendshipRequestClient {
	return &FriendshipRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `friendshiprequest.Hooks(f(g(h())))`.
func (c *FriendshipRequestClient) Use(hooks ...Hook) {
	c.hooks.FriendshipRequest = append(c.hooks.FriendshipRequest, hooks...)
}

// Create returns a builder for creating a FriendshipRequest entity.
func (c *FriendshipRequestClient) Create() *FriendshipRequestCreate {
	mutation := newFriendshipRequestMutation(c.config, OpCreate)
	return &FriendshipRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FriendshipRequest entities.
func (c *FriendshipRequestClient) CreateBulk(builders ...*FriendshipRequestCreate) *FriendshipRequestCreateBulk {
	return &FriendshipRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FriendshipRequest.
func (c *FriendshipRequestClient) Update() *FriendshipRequestUpdate {
	mutation := newFriendshipRequestMutation(c.config, OpUpdate)
	return &FriendshipRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FriendshipRequestClient) UpdateOne(fr *FriendshipRequest) *FriendshipRequestUpdateOne {
	mutation := newFriendshipRequestMutation(c.config, OpUpdateOne, withFriendshipRequest(fr))
	return &FriendshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FriendshipRequestClient) UpdateOneID(id uuid.UUID) *FriendshipRequestUpdateOne {
	mutation := newFriendshipRequestMutation(c.config, OpUpdateOne, withFriendshipRequestID(id))
	return &FriendshipRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FriendshipRequest.
func (c *FriendshipRequestClient) Delete() *FriendshipRequestDelete {
	mutation := newFriendshipRequestMutation(c.config, OpDelete)
	return &FriendshipRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FriendshipRequestClient) DeleteOne(fr *FriendshipRequest) *FriendshipRequestDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FriendshipRequestClient) DeleteOneID(id uuid.UUID) *FriendshipRequestDeleteOne {
	builder := c.Delete().Where(friendshiprequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FriendshipRequestDeleteOne{builder}
}

// Query returns a query builder for FriendshipRequest.
func (c *FriendshipRequestClient) Query() *FriendshipRequestQuery {
	return &FriendshipRequestQuery{
		config: c.config,
	}
}

// Get returns a FriendshipRequest entity by its id.
func (c *FriendshipRequestClient) Get(ctx context.Context, id uuid.UUID) (*FriendshipRequest, error) {
	return c.Query().Where(friendshiprequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FriendshipRequestClient) GetX(ctx context.Context, id uuid.UUID) *FriendshipRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromUsers queries the from_users edge of a FriendshipRequest.
func (c *FriendshipRequestClient) QueryFromUsers(fr *FriendshipRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendshiprequest.Table, friendshiprequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendshiprequest.FromUsersTable, friendshiprequest.FromUsersColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUsers queries the to_users edge of a FriendshipRequest.
func (c *FriendshipRequestClient) QueryToUsers(fr *FriendshipRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(friendshiprequest.Table, friendshiprequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, friendshiprequest.ToUsersTable, friendshiprequest.ToUsersColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FriendshipRequestClient) Hooks() []Hook {
	return c.hooks.FriendshipRequest
}

// InvitationClient is a client for the Invitation schema.
type InvitationClient struct {
	config
}

// NewInvitationClient returns a client for the Invitation from the given config.
func NewInvitationClient(c config) *InvitationClient {
	return &InvitationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitation.Hooks(f(g(h())))`.
func (c *InvitationClient) Use(hooks ...Hook) {
	c.hooks.Invitation = append(c.hooks.Invitation, hooks...)
}

// Create returns a builder for creating a Invitation entity.
func (c *InvitationClient) Create() *InvitationCreate {
	mutation := newInvitationMutation(c.config, OpCreate)
	return &InvitationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invitation entities.
func (c *InvitationClient) CreateBulk(builders ...*InvitationCreate) *InvitationCreateBulk {
	return &InvitationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invitation.
func (c *InvitationClient) Update() *InvitationUpdate {
	mutation := newInvitationMutation(c.config, OpUpdate)
	return &InvitationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationClient) UpdateOne(i *Invitation) *InvitationUpdateOne {
	mutation := newInvitationMutation(c.config, OpUpdateOne, withInvitation(i))
	return &InvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationClient) UpdateOneID(id uuid.UUID) *InvitationUpdateOne {
	mutation := newInvitationMutation(c.config, OpUpdateOne, withInvitationID(id))
	return &InvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invitation.
func (c *InvitationClient) Delete() *InvitationDelete {
	mutation := newInvitationMutation(c.config, OpDelete)
	return &InvitationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationClient) DeleteOne(i *Invitation) *InvitationDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvitationClient) DeleteOneID(id uuid.UUID) *InvitationDeleteOne {
	builder := c.Delete().Where(invitation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationDeleteOne{builder}
}

// Query returns a query builder for Invitation.
func (c *InvitationClient) Query() *InvitationQuery {
	return &InvitationQuery{
		config: c.config,
	}
}

// Get returns a Invitation entity by its id.
func (c *InvitationClient) Get(ctx context.Context, id uuid.UUID) (*Invitation, error) {
	return c.Query().Where(invitation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationClient) GetX(ctx context.Context, id uuid.UUID) *Invitation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Invitation.
func (c *InvitationClient) QueryUser(i *Invitation) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitation.UserTable, invitation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationUsers queries the invitation_users edge of a Invitation.
func (c *InvitationClient) QueryInvitationUsers(i *Invitation) *InvitationUserQuery {
	query := &InvitationUserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, id),
			sqlgraph.To(invitationuser.Table, invitationuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationUsersTable, invitation.InvitationUsersColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationFriendGroups queries the invitation_friend_groups edge of a Invitation.
func (c *InvitationClient) QueryInvitationFriendGroups(i *Invitation) *InvitationFriendGroupQuery {
	query := &InvitationFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, id),
			sqlgraph.To(invitationfriendgroup.Table, invitationfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationFriendGroupsTable, invitation.InvitationFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationAcceptances queries the invitation_acceptances edge of a Invitation.
func (c *InvitationClient) QueryInvitationAcceptances(i *Invitation) *InvitationAcceptanceQuery {
	query := &InvitationAcceptanceQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, id),
			sqlgraph.To(invitationacceptance.Table, invitationacceptance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationAcceptancesTable, invitation.InvitationAcceptancesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationDenials queries the invitation_denials edge of a Invitation.
func (c *InvitationClient) QueryInvitationDenials(i *Invitation) *InvitationDenialQuery {
	query := &InvitationDenialQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitation.Table, invitation.FieldID, id),
			sqlgraph.To(invitationdenial.Table, invitationdenial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, invitation.InvitationDenialsTable, invitation.InvitationDenialsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvitationClient) Hooks() []Hook {
	return c.hooks.Invitation
}

// InvitationAcceptanceClient is a client for the InvitationAcceptance schema.
type InvitationAcceptanceClient struct {
	config
}

// NewInvitationAcceptanceClient returns a client for the InvitationAcceptance from the given config.
func NewInvitationAcceptanceClient(c config) *InvitationAcceptanceClient {
	return &InvitationAcceptanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationacceptance.Hooks(f(g(h())))`.
func (c *InvitationAcceptanceClient) Use(hooks ...Hook) {
	c.hooks.InvitationAcceptance = append(c.hooks.InvitationAcceptance, hooks...)
}

// Create returns a builder for creating a InvitationAcceptance entity.
func (c *InvitationAcceptanceClient) Create() *InvitationAcceptanceCreate {
	mutation := newInvitationAcceptanceMutation(c.config, OpCreate)
	return &InvitationAcceptanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationAcceptance entities.
func (c *InvitationAcceptanceClient) CreateBulk(builders ...*InvitationAcceptanceCreate) *InvitationAcceptanceCreateBulk {
	return &InvitationAcceptanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationAcceptance.
func (c *InvitationAcceptanceClient) Update() *InvitationAcceptanceUpdate {
	mutation := newInvitationAcceptanceMutation(c.config, OpUpdate)
	return &InvitationAcceptanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationAcceptanceClient) UpdateOne(ia *InvitationAcceptance) *InvitationAcceptanceUpdateOne {
	mutation := newInvitationAcceptanceMutation(c.config, OpUpdateOne, withInvitationAcceptance(ia))
	return &InvitationAcceptanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationAcceptanceClient) UpdateOneID(id uuid.UUID) *InvitationAcceptanceUpdateOne {
	mutation := newInvitationAcceptanceMutation(c.config, OpUpdateOne, withInvitationAcceptanceID(id))
	return &InvitationAcceptanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationAcceptance.
func (c *InvitationAcceptanceClient) Delete() *InvitationAcceptanceDelete {
	mutation := newInvitationAcceptanceMutation(c.config, OpDelete)
	return &InvitationAcceptanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationAcceptanceClient) DeleteOne(ia *InvitationAcceptance) *InvitationAcceptanceDeleteOne {
	return c.DeleteOneID(ia.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvitationAcceptanceClient) DeleteOneID(id uuid.UUID) *InvitationAcceptanceDeleteOne {
	builder := c.Delete().Where(invitationacceptance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationAcceptanceDeleteOne{builder}
}

// Query returns a query builder for InvitationAcceptance.
func (c *InvitationAcceptanceClient) Query() *InvitationAcceptanceQuery {
	return &InvitationAcceptanceQuery{
		config: c.config,
	}
}

// Get returns a InvitationAcceptance entity by its id.
func (c *InvitationAcceptanceClient) Get(ctx context.Context, id uuid.UUID) (*InvitationAcceptance, error) {
	return c.Query().Where(invitationacceptance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationAcceptanceClient) GetX(ctx context.Context, id uuid.UUID) *InvitationAcceptance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a InvitationAcceptance.
func (c *InvitationAcceptanceClient) QueryUser(ia *InvitationAcceptance) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationacceptance.Table, invitationacceptance.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationacceptance.UserTable, invitationacceptance.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitation queries the invitation edge of a InvitationAcceptance.
func (c *InvitationAcceptanceClient) QueryInvitation(ia *InvitationAcceptance) *InvitationQuery {
	query := &InvitationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ia.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationacceptance.Table, invitationacceptance.FieldID, id),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationacceptance.InvitationTable, invitationacceptance.InvitationColumn),
		)
		fromV = sqlgraph.Neighbors(ia.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvitationAcceptanceClient) Hooks() []Hook {
	return c.hooks.InvitationAcceptance
}

// InvitationDenialClient is a client for the InvitationDenial schema.
type InvitationDenialClient struct {
	config
}

// NewInvitationDenialClient returns a client for the InvitationDenial from the given config.
func NewInvitationDenialClient(c config) *InvitationDenialClient {
	return &InvitationDenialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationdenial.Hooks(f(g(h())))`.
func (c *InvitationDenialClient) Use(hooks ...Hook) {
	c.hooks.InvitationDenial = append(c.hooks.InvitationDenial, hooks...)
}

// Create returns a builder for creating a InvitationDenial entity.
func (c *InvitationDenialClient) Create() *InvitationDenialCreate {
	mutation := newInvitationDenialMutation(c.config, OpCreate)
	return &InvitationDenialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationDenial entities.
func (c *InvitationDenialClient) CreateBulk(builders ...*InvitationDenialCreate) *InvitationDenialCreateBulk {
	return &InvitationDenialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationDenial.
func (c *InvitationDenialClient) Update() *InvitationDenialUpdate {
	mutation := newInvitationDenialMutation(c.config, OpUpdate)
	return &InvitationDenialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationDenialClient) UpdateOne(id *InvitationDenial) *InvitationDenialUpdateOne {
	mutation := newInvitationDenialMutation(c.config, OpUpdateOne, withInvitationDenial(id))
	return &InvitationDenialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationDenialClient) UpdateOneID(id uuid.UUID) *InvitationDenialUpdateOne {
	mutation := newInvitationDenialMutation(c.config, OpUpdateOne, withInvitationDenialID(id))
	return &InvitationDenialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationDenial.
func (c *InvitationDenialClient) Delete() *InvitationDenialDelete {
	mutation := newInvitationDenialMutation(c.config, OpDelete)
	return &InvitationDenialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationDenialClient) DeleteOne(id *InvitationDenial) *InvitationDenialDeleteOne {
	return c.DeleteOneID(id.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvitationDenialClient) DeleteOneID(id uuid.UUID) *InvitationDenialDeleteOne {
	builder := c.Delete().Where(invitationdenial.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationDenialDeleteOne{builder}
}

// Query returns a query builder for InvitationDenial.
func (c *InvitationDenialClient) Query() *InvitationDenialQuery {
	return &InvitationDenialQuery{
		config: c.config,
	}
}

// Get returns a InvitationDenial entity by its id.
func (c *InvitationDenialClient) Get(ctx context.Context, id uuid.UUID) (*InvitationDenial, error) {
	return c.Query().Where(invitationdenial.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationDenialClient) GetX(ctx context.Context, id uuid.UUID) *InvitationDenial {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a InvitationDenial.
func (c *InvitationDenialClient) QueryUser(node *InvitationDenial) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := node.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationdenial.Table, invitationdenial.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationdenial.UserTable, invitationdenial.UserColumn),
		)
		fromV = sqlgraph.Neighbors(node.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitation queries the invitation edge of a InvitationDenial.
func (c *InvitationDenialClient) QueryInvitation(node *InvitationDenial) *InvitationQuery {
	query := &InvitationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := node.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationdenial.Table, invitationdenial.FieldID, id),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationdenial.InvitationTable, invitationdenial.InvitationColumn),
		)
		fromV = sqlgraph.Neighbors(node.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvitationDenialClient) Hooks() []Hook {
	return c.hooks.InvitationDenial
}

// InvitationFriendGroupClient is a client for the InvitationFriendGroup schema.
type InvitationFriendGroupClient struct {
	config
}

// NewInvitationFriendGroupClient returns a client for the InvitationFriendGroup from the given config.
func NewInvitationFriendGroupClient(c config) *InvitationFriendGroupClient {
	return &InvitationFriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationfriendgroup.Hooks(f(g(h())))`.
func (c *InvitationFriendGroupClient) Use(hooks ...Hook) {
	c.hooks.InvitationFriendGroup = append(c.hooks.InvitationFriendGroup, hooks...)
}

// Create returns a builder for creating a InvitationFriendGroup entity.
func (c *InvitationFriendGroupClient) Create() *InvitationFriendGroupCreate {
	mutation := newInvitationFriendGroupMutation(c.config, OpCreate)
	return &InvitationFriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationFriendGroup entities.
func (c *InvitationFriendGroupClient) CreateBulk(builders ...*InvitationFriendGroupCreate) *InvitationFriendGroupCreateBulk {
	return &InvitationFriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationFriendGroup.
func (c *InvitationFriendGroupClient) Update() *InvitationFriendGroupUpdate {
	mutation := newInvitationFriendGroupMutation(c.config, OpUpdate)
	return &InvitationFriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationFriendGroupClient) UpdateOne(ifg *InvitationFriendGroup) *InvitationFriendGroupUpdateOne {
	mutation := newInvitationFriendGroupMutation(c.config, OpUpdateOne, withInvitationFriendGroup(ifg))
	return &InvitationFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationFriendGroupClient) UpdateOneID(id uuid.UUID) *InvitationFriendGroupUpdateOne {
	mutation := newInvitationFriendGroupMutation(c.config, OpUpdateOne, withInvitationFriendGroupID(id))
	return &InvitationFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationFriendGroup.
func (c *InvitationFriendGroupClient) Delete() *InvitationFriendGroupDelete {
	mutation := newInvitationFriendGroupMutation(c.config, OpDelete)
	return &InvitationFriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationFriendGroupClient) DeleteOne(ifg *InvitationFriendGroup) *InvitationFriendGroupDeleteOne {
	return c.DeleteOneID(ifg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvitationFriendGroupClient) DeleteOneID(id uuid.UUID) *InvitationFriendGroupDeleteOne {
	builder := c.Delete().Where(invitationfriendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationFriendGroupDeleteOne{builder}
}

// Query returns a query builder for InvitationFriendGroup.
func (c *InvitationFriendGroupClient) Query() *InvitationFriendGroupQuery {
	return &InvitationFriendGroupQuery{
		config: c.config,
	}
}

// Get returns a InvitationFriendGroup entity by its id.
func (c *InvitationFriendGroupClient) Get(ctx context.Context, id uuid.UUID) (*InvitationFriendGroup, error) {
	return c.Query().Where(invitationfriendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationFriendGroupClient) GetX(ctx context.Context, id uuid.UUID) *InvitationFriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvitation queries the invitation edge of a InvitationFriendGroup.
func (c *InvitationFriendGroupClient) QueryInvitation(ifg *InvitationFriendGroup) *InvitationQuery {
	query := &InvitationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ifg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationfriendgroup.Table, invitationfriendgroup.FieldID, id),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationfriendgroup.InvitationTable, invitationfriendgroup.InvitationColumn),
		)
		fromV = sqlgraph.Neighbors(ifg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroup queries the friend_group edge of a InvitationFriendGroup.
func (c *InvitationFriendGroupClient) QueryFriendGroup(ifg *InvitationFriendGroup) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ifg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationfriendgroup.Table, invitationfriendgroup.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationfriendgroup.FriendGroupTable, invitationfriendgroup.FriendGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ifg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvitationFriendGroupClient) Hooks() []Hook {
	return c.hooks.InvitationFriendGroup
}

// InvitationUserClient is a client for the InvitationUser schema.
type InvitationUserClient struct {
	config
}

// NewInvitationUserClient returns a client for the InvitationUser from the given config.
func NewInvitationUserClient(c config) *InvitationUserClient {
	return &InvitationUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitationuser.Hooks(f(g(h())))`.
func (c *InvitationUserClient) Use(hooks ...Hook) {
	c.hooks.InvitationUser = append(c.hooks.InvitationUser, hooks...)
}

// Create returns a builder for creating a InvitationUser entity.
func (c *InvitationUserClient) Create() *InvitationUserCreate {
	mutation := newInvitationUserMutation(c.config, OpCreate)
	return &InvitationUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvitationUser entities.
func (c *InvitationUserClient) CreateBulk(builders ...*InvitationUserCreate) *InvitationUserCreateBulk {
	return &InvitationUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvitationUser.
func (c *InvitationUserClient) Update() *InvitationUserUpdate {
	mutation := newInvitationUserMutation(c.config, OpUpdate)
	return &InvitationUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvitationUserClient) UpdateOne(iu *InvitationUser) *InvitationUserUpdateOne {
	mutation := newInvitationUserMutation(c.config, OpUpdateOne, withInvitationUser(iu))
	return &InvitationUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvitationUserClient) UpdateOneID(id uuid.UUID) *InvitationUserUpdateOne {
	mutation := newInvitationUserMutation(c.config, OpUpdateOne, withInvitationUserID(id))
	return &InvitationUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvitationUser.
func (c *InvitationUserClient) Delete() *InvitationUserDelete {
	mutation := newInvitationUserMutation(c.config, OpDelete)
	return &InvitationUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvitationUserClient) DeleteOne(iu *InvitationUser) *InvitationUserDeleteOne {
	return c.DeleteOneID(iu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvitationUserClient) DeleteOneID(id uuid.UUID) *InvitationUserDeleteOne {
	builder := c.Delete().Where(invitationuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvitationUserDeleteOne{builder}
}

// Query returns a query builder for InvitationUser.
func (c *InvitationUserClient) Query() *InvitationUserQuery {
	return &InvitationUserQuery{
		config: c.config,
	}
}

// Get returns a InvitationUser entity by its id.
func (c *InvitationUserClient) Get(ctx context.Context, id uuid.UUID) (*InvitationUser, error) {
	return c.Query().Where(invitationuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvitationUserClient) GetX(ctx context.Context, id uuid.UUID) *InvitationUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvitation queries the invitation edge of a InvitationUser.
func (c *InvitationUserClient) QueryInvitation(iu *InvitationUser) *InvitationQuery {
	query := &InvitationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationuser.Table, invitationuser.FieldID, id),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationuser.InvitationTable, invitationuser.InvitationColumn),
		)
		fromV = sqlgraph.Neighbors(iu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a InvitationUser.
func (c *InvitationUserClient) QueryUser(iu *InvitationUser) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationuser.Table, invitationuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationuser.UserTable, invitationuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(iu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvitationUserClient) Hooks() []Hook {
	return c.hooks.InvitationUser
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserProfile queries the user_profile edge of a User.
func (c *UserClient) QueryUserProfile(u *User) *UserProfileQuery {
	query := &UserProfileQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.UserProfileTable, user.UserProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendUsers queries the friend_users edge of a User.
func (c *UserClient) QueryFriendUsers(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FriendUsersTable, user.FriendUsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendGroups queries the friend_groups edge of a User.
func (c *UserClient) QueryFriendGroups(u *User) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendGroupsTable, user.FriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBelongingFriendGroups queries the belonging_friend_groups edge of a User.
func (c *UserClient) QueryBelongingFriendGroups(u *User) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.BelongingFriendGroupsTable, user.BelongingFriendGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationAcceptances queries the invitation_acceptances edge of a User.
func (c *UserClient) QueryInvitationAcceptances(u *User) *InvitationAcceptanceQuery {
	query := &InvitationAcceptanceQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(invitationacceptance.Table, invitationacceptance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InvitationAcceptancesTable, user.InvitationAcceptancesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvitationDenials queries the invitation_denials edge of a User.
func (c *UserClient) QueryInvitationDenials(u *User) *InvitationDenialQuery {
	query := &InvitationDenialQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(invitationdenial.Table, invitationdenial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InvitationDenialsTable, user.InvitationDenialsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFriendships queries the friendships edge of a User.
func (c *UserClient) QueryFriendships(u *User) *FriendshipQuery {
	query := &FriendshipQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendshipsTable, user.FriendshipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserFriendGroups queries the user_friend_groups edge of a User.
func (c *UserClient) QueryUserFriendGroups(u *User) *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserFriendGroupsTable, user.UserFriendGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserFriendGroupClient is a client for the UserFriendGroup schema.
type UserFriendGroupClient struct {
	config
}

// NewUserFriendGroupClient returns a client for the UserFriendGroup from the given config.
func NewUserFriendGroupClient(c config) *UserFriendGroupClient {
	return &UserFriendGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfriendgroup.Hooks(f(g(h())))`.
func (c *UserFriendGroupClient) Use(hooks ...Hook) {
	c.hooks.UserFriendGroup = append(c.hooks.UserFriendGroup, hooks...)
}

// Create returns a builder for creating a UserFriendGroup entity.
func (c *UserFriendGroupClient) Create() *UserFriendGroupCreate {
	mutation := newUserFriendGroupMutation(c.config, OpCreate)
	return &UserFriendGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFriendGroup entities.
func (c *UserFriendGroupClient) CreateBulk(builders ...*UserFriendGroupCreate) *UserFriendGroupCreateBulk {
	return &UserFriendGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFriendGroup.
func (c *UserFriendGroupClient) Update() *UserFriendGroupUpdate {
	mutation := newUserFriendGroupMutation(c.config, OpUpdate)
	return &UserFriendGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFriendGroupClient) UpdateOne(ufg *UserFriendGroup) *UserFriendGroupUpdateOne {
	mutation := newUserFriendGroupMutation(c.config, OpUpdateOne, withUserFriendGroup(ufg))
	return &UserFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFriendGroupClient) UpdateOneID(id uuid.UUID) *UserFriendGroupUpdateOne {
	mutation := newUserFriendGroupMutation(c.config, OpUpdateOne, withUserFriendGroupID(id))
	return &UserFriendGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFriendGroup.
func (c *UserFriendGroupClient) Delete() *UserFriendGroupDelete {
	mutation := newUserFriendGroupMutation(c.config, OpDelete)
	return &UserFriendGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFriendGroupClient) DeleteOne(ufg *UserFriendGroup) *UserFriendGroupDeleteOne {
	return c.DeleteOneID(ufg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFriendGroupClient) DeleteOneID(id uuid.UUID) *UserFriendGroupDeleteOne {
	builder := c.Delete().Where(userfriendgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFriendGroupDeleteOne{builder}
}

// Query returns a query builder for UserFriendGroup.
func (c *UserFriendGroupClient) Query() *UserFriendGroupQuery {
	return &UserFriendGroupQuery{
		config: c.config,
	}
}

// Get returns a UserFriendGroup entity by its id.
func (c *UserFriendGroupClient) Get(ctx context.Context, id uuid.UUID) (*UserFriendGroup, error) {
	return c.Query().Where(userfriendgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFriendGroupClient) GetX(ctx context.Context, id uuid.UUID) *UserFriendGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFriendGroup queries the friend_group edge of a UserFriendGroup.
func (c *UserFriendGroupClient) QueryFriendGroup(ufg *UserFriendGroup) *FriendGroupQuery {
	query := &FriendGroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfriendgroup.Table, userfriendgroup.FieldID, id),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfriendgroup.FriendGroupTable, userfriendgroup.FriendGroupColumn),
		)
		fromV = sqlgraph.Neighbors(ufg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserFriendGroup.
func (c *UserFriendGroupClient) QueryUser(ufg *UserFriendGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ufg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfriendgroup.Table, userfriendgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfriendgroup.UserTable, userfriendgroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ufg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserFriendGroupClient) Hooks() []Hook {
	return c.hooks.UserFriendGroup
}

// UserMuteClient is a client for the UserMute schema.
type UserMuteClient struct {
	config
}

// NewUserMuteClient returns a client for the UserMute from the given config.
func NewUserMuteClient(c config) *UserMuteClient {
	return &UserMuteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermute.Hooks(f(g(h())))`.
func (c *UserMuteClient) Use(hooks ...Hook) {
	c.hooks.UserMute = append(c.hooks.UserMute, hooks...)
}

// Create returns a builder for creating a UserMute entity.
func (c *UserMuteClient) Create() *UserMuteCreate {
	mutation := newUserMuteMutation(c.config, OpCreate)
	return &UserMuteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMute entities.
func (c *UserMuteClient) CreateBulk(builders ...*UserMuteCreate) *UserMuteCreateBulk {
	return &UserMuteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMute.
func (c *UserMuteClient) Update() *UserMuteUpdate {
	mutation := newUserMuteMutation(c.config, OpUpdate)
	return &UserMuteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMuteClient) UpdateOne(um *UserMute) *UserMuteUpdateOne {
	mutation := newUserMuteMutation(c.config, OpUpdateOne, withUserMute(um))
	return &UserMuteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMuteClient) UpdateOneID(id uuid.UUID) *UserMuteUpdateOne {
	mutation := newUserMuteMutation(c.config, OpUpdateOne, withUserMuteID(id))
	return &UserMuteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMute.
func (c *UserMuteClient) Delete() *UserMuteDelete {
	mutation := newUserMuteMutation(c.config, OpDelete)
	return &UserMuteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserMuteClient) DeleteOne(um *UserMute) *UserMuteDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserMuteClient) DeleteOneID(id uuid.UUID) *UserMuteDeleteOne {
	builder := c.Delete().Where(usermute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMuteDeleteOne{builder}
}

// Query returns a query builder for UserMute.
func (c *UserMuteClient) Query() *UserMuteQuery {
	return &UserMuteQuery{
		config: c.config,
	}
}

// Get returns a UserMute entity by its id.
func (c *UserMuteClient) Get(ctx context.Context, id uuid.UUID) (*UserMute, error) {
	return c.Query().Where(usermute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMuteClient) GetX(ctx context.Context, id uuid.UUID) *UserMute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserMute.
func (c *UserMuteClient) QueryUser(um *UserMute) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermute.Table, usermute.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usermute.UserTable, usermute.UserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMuteUser queries the mute_user edge of a UserMute.
func (c *UserMuteClient) QueryMuteUser(um *UserMute) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermute.Table, usermute.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usermute.MuteUserTable, usermute.MuteUserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMuteClient) Hooks() []Hook {
	return c.hooks.UserMute
}

// UserProfileClient is a client for the UserProfile schema.
type UserProfileClient struct {
	config
}

// NewUserProfileClient returns a client for the UserProfile from the given config.
func NewUserProfileClient(c config) *UserProfileClient {
	return &UserProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userprofile.Hooks(f(g(h())))`.
func (c *UserProfileClient) Use(hooks ...Hook) {
	c.hooks.UserProfile = append(c.hooks.UserProfile, hooks...)
}

// Create returns a builder for creating a UserProfile entity.
func (c *UserProfileClient) Create() *UserProfileCreate {
	mutation := newUserProfileMutation(c.config, OpCreate)
	return &UserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserProfile entities.
func (c *UserProfileClient) CreateBulk(builders ...*UserProfileCreate) *UserProfileCreateBulk {
	return &UserProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserProfile.
func (c *UserProfileClient) Update() *UserProfileUpdate {
	mutation := newUserProfileMutation(c.config, OpUpdate)
	return &UserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserProfileClient) UpdateOne(up *UserProfile) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfile(up))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserProfileClient) UpdateOneID(id uuid.UUID) *UserProfileUpdateOne {
	mutation := newUserProfileMutation(c.config, OpUpdateOne, withUserProfileID(id))
	return &UserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserProfile.
func (c *UserProfileClient) Delete() *UserProfileDelete {
	mutation := newUserProfileMutation(c.config, OpDelete)
	return &UserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserProfileClient) DeleteOne(up *UserProfile) *UserProfileDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserProfileClient) DeleteOneID(id uuid.UUID) *UserProfileDeleteOne {
	builder := c.Delete().Where(userprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserProfileDeleteOne{builder}
}

// Query returns a query builder for UserProfile.
func (c *UserProfileClient) Query() *UserProfileQuery {
	return &UserProfileQuery{
		config: c.config,
	}
}

// Get returns a UserProfile entity by its id.
func (c *UserProfileClient) Get(ctx context.Context, id uuid.UUID) (*UserProfile, error) {
	return c.Query().Where(userprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserProfileClient) GetX(ctx context.Context, id uuid.UUID) *UserProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserProfile.
func (c *UserProfileClient) QueryUser(up *UserProfile) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userprofile.Table, userprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userprofile.UserTable, userprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserProfileClient) Hooks() []Hook {
	return c.hooks.UserProfile
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/account"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// Status holds the value of the "status" field.
	Status user.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// UserProfile holds the value of the user_profile edge.
	UserProfile *UserProfile `json:"user_profile,omitempty"`
	// UserLocation holds the value of the user_location edge.
	UserLocation *UserLocation `json:"user_location,omitempty"`
	// FriendUsers holds the value of the friend_users edge.
	FriendUsers []*User `json:"friend_users,omitempty"`
	// PushNotificationTokens holds the value of the push_notification_tokens edge.
	PushNotificationTokens []*PushNotificationToken `json:"push_notification_tokens,omitempty"`
	// FriendGroups holds the value of the friend_groups edge.
	FriendGroups []*FriendGroup `json:"friend_groups,omitempty"`
	// BelongingFriendGroups holds the value of the belonging_friend_groups edge.
	BelongingFriendGroups []*FriendGroup `json:"belonging_friend_groups,omitempty"`
	// InvitationAcceptances holds the value of the invitation_acceptances edge.
	InvitationAcceptances []*InvitationAcceptance `json:"invitation_acceptances,omitempty"`
	// InvitationDenials holds the value of the invitation_denials edge.
	InvitationDenials []*InvitationDenial `json:"invitation_denials,omitempty"`
	// Friendships holds the value of the friendships edge.
	Friendships []*Friendship `json:"friendships,omitempty"`
	// UserFriendGroups holds the value of the user_friend_groups edge.
	UserFriendGroups []*UserFriendGroup `json:"user_friend_groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
	// totalCount holds the count of the edges above.
	totalCount [11]map[string]int

	namedFriendUsers            map[string][]*User
	namedPushNotificationTokens map[string][]*PushNotificationToken
	namedFriendGroups           map[string][]*FriendGroup
	namedBelongingFriendGroups  map[string][]*FriendGroup
	namedInvitationAcceptances  map[string][]*InvitationAcceptance
	namedInvitationDenials      map[string][]*InvitationDenial
	namedFriendships            map[string][]*Friendship
	namedUserFriendGroups       map[string][]*UserFriendGroup
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// UserProfileOrErr returns the UserProfile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserProfileOrErr() (*UserProfile, error) {
	if e.loadedTypes[1] {
		if e.UserProfile == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userprofile.Label}
		}
		return e.UserProfile, nil
	}
	return nil, &NotLoadedError{edge: "user_profile"}
}

// UserLocationOrErr returns the UserLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserLocationOrErr() (*UserLocation, error) {
	if e.loadedTypes[2] {
		if e.UserLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: userlocation.Label}
		}
		return e.UserLocation, nil
	}
	return nil, &NotLoadedError{edge: "user_location"}
}

// FriendUsersOrErr returns the FriendUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendUsersOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.FriendUsers, nil
	}
	return nil, &NotLoadedError{edge: "friend_users"}
}

// PushNotificationTokensOrErr returns the PushNotificationTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PushNotificationTokensOrErr() ([]*PushNotificationToken, error) {
	if e.loadedTypes[4] {
		return e.PushNotificationTokens, nil
	}
	return nil, &NotLoadedError{edge: "push_notification_tokens"}
}

// FriendGroupsOrErr returns the FriendGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendGroupsOrErr() ([]*FriendGroup, error) {
	if e.loadedTypes[5] {
		return e.FriendGroups, nil
	}
	return nil, &NotLoadedError{edge: "friend_groups"}
}

// BelongingFriendGroupsOrErr returns the BelongingFriendGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BelongingFriendGroupsOrErr() ([]*FriendGroup, error) {
	if e.loadedTypes[6] {
		return e.BelongingFriendGroups, nil
	}
	return nil, &NotLoadedError{edge: "belonging_friend_groups"}
}

// InvitationAcceptancesOrErr returns the InvitationAcceptances value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InvitationAcceptancesOrErr() ([]*InvitationAcceptance, error) {
	if e.loadedTypes[7] {
		return e.InvitationAcceptances, nil
	}
	return nil, &NotLoadedError{edge: "invitation_acceptances"}
}

// InvitationDenialsOrErr returns the InvitationDenials value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InvitationDenialsOrErr() ([]*InvitationDenial, error) {
	if e.loadedTypes[8] {
		return e.InvitationDenials, nil
	}
	return nil, &NotLoadedError{edge: "invitation_denials"}
}

// FriendshipsOrErr returns the Friendships value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendshipsOrErr() ([]*Friendship, error) {
	if e.loadedTypes[9] {
		return e.Friendships, nil
	}
	return nil, &NotLoadedError{edge: "friendships"}
}

// UserFriendGroupsOrErr returns the UserFriendGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserFriendGroupsOrErr() ([]*UserFriendGroup, error) {
	if e.loadedTypes[10] {
		return e.UserFriendGroups, nil
	}
	return nil, &NotLoadedError{edge: "user_friend_groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldStatus:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldAccountID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				u.AccountID = *value
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = user.Status(value.String)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the User entity.
func (u *User) QueryAccount() *AccountQuery {
	return (&UserClient{config: u.config}).QueryAccount(u)
}

// QueryUserProfile queries the "user_profile" edge of the User entity.
func (u *User) QueryUserProfile() *UserProfileQuery {
	return (&UserClient{config: u.config}).QueryUserProfile(u)
}

// QueryUserLocation queries the "user_location" edge of the User entity.
func (u *User) QueryUserLocation() *UserLocationQuery {
	return (&UserClient{config: u.config}).QueryUserLocation(u)
}

// QueryFriendUsers queries the "friend_users" edge of the User entity.
func (u *User) QueryFriendUsers() *UserQuery {
	return (&UserClient{config: u.config}).QueryFriendUsers(u)
}

// QueryPushNotificationTokens queries the "push_notification_tokens" edge of the User entity.
func (u *User) QueryPushNotificationTokens() *PushNotificationTokenQuery {
	return (&UserClient{config: u.config}).QueryPushNotificationTokens(u)
}

// QueryFriendGroups queries the "friend_groups" edge of the User entity.
func (u *User) QueryFriendGroups() *FriendGroupQuery {
	return (&UserClient{config: u.config}).QueryFriendGroups(u)
}

// QueryBelongingFriendGroups queries the "belonging_friend_groups" edge of the User entity.
func (u *User) QueryBelongingFriendGroups() *FriendGroupQuery {
	return (&UserClient{config: u.config}).QueryBelongingFriendGroups(u)
}

// QueryInvitationAcceptances queries the "invitation_acceptances" edge of the User entity.
func (u *User) QueryInvitationAcceptances() *InvitationAcceptanceQuery {
	return (&UserClient{config: u.config}).QueryInvitationAcceptances(u)
}

// QueryInvitationDenials queries the "invitation_denials" edge of the User entity.
func (u *User) QueryInvitationDenials() *InvitationDenialQuery {
	return (&UserClient{config: u.config}).QueryInvitationDenials(u)
}

// QueryFriendships queries the "friendships" edge of the User entity.
func (u *User) QueryFriendships() *FriendshipQuery {
	return (&UserClient{config: u.config}).QueryFriendships(u)
}

// QueryUserFriendGroups queries the "user_friend_groups" edge of the User entity.
func (u *User) QueryUserFriendGroups() *UserFriendGroupQuery {
	return (&UserClient{config: u.config}).QueryUserFriendGroups(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", u.AccountID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedFriendUsers returns the FriendUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedFriendUsers(name string) ([]*User, error) {
	if u.Edges.namedFriendUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedFriendUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedFriendUsers(name string, edges ...*User) {
	if u.Edges.namedFriendUsers == nil {
		u.Edges.namedFriendUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		u.Edges.namedFriendUsers[name] = []*User{}
	} else {
		u.Edges.namedFriendUsers[name] = append(u.Edges.namedFriendUsers[name], edges...)
	}
}

// NamedPushNotificationTokens returns the PushNotificationTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPushNotificationTokens(name string) ([]*PushNotificationToken, error) {
	if u.Edges.namedPushNotificationTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPushNotificationTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPushNotificationTokens(name string, edges ...*PushNotificationToken) {
	if u.Edges.namedPushNotificationTokens == nil {
		u.Edges.namedPushNotificationTokens = make(map[string][]*PushNotificationToken)
	}
	if len(edges) == 0 {
		u.Edges.namedPushNotificationTokens[name] = []*PushNotificationToken{}
	} else {
		u.Edges.namedPushNotificationTokens[name] = append(u.Edges.namedPushNotificationTokens[name], edges...)
	}
}

// NamedFriendGroups returns the FriendGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedFriendGroups(name string) ([]*FriendGroup, error) {
	if u.Edges.namedFriendGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedFriendGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedFriendGroups(name string, edges ...*FriendGroup) {
	if u.Edges.namedFriendGroups == nil {
		u.Edges.namedFriendGroups = make(map[string][]*FriendGroup)
	}
	if len(edges) == 0 {
		u.Edges.namedFriendGroups[name] = []*FriendGroup{}
	} else {
		u.Edges.namedFriendGroups[name] = append(u.Edges.namedFriendGroups[name], edges...)
	}
}

// NamedBelongingFriendGroups returns the BelongingFriendGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedBelongingFriendGroups(name string) ([]*FriendGroup, error) {
	if u.Edges.namedBelongingFriendGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedBelongingFriendGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedBelongingFriendGroups(name string, edges ...*FriendGroup) {
	if u.Edges.namedBelongingFriendGroups == nil {
		u.Edges.namedBelongingFriendGroups = make(map[string][]*FriendGroup)
	}
	if len(edges) == 0 {
		u.Edges.namedBelongingFriendGroups[name] = []*FriendGroup{}
	} else {
		u.Edges.namedBelongingFriendGroups[name] = append(u.Edges.namedBelongingFriendGroups[name], edges...)
	}
}

// NamedInvitationAcceptances returns the InvitationAcceptances named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedInvitationAcceptances(name string) ([]*InvitationAcceptance, error) {
	if u.Edges.namedInvitationAcceptances == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedInvitationAcceptances[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedInvitationAcceptances(name string, edges ...*InvitationAcceptance) {
	if u.Edges.namedInvitationAcceptances == nil {
		u.Edges.namedInvitationAcceptances = make(map[string][]*InvitationAcceptance)
	}
	if len(edges) == 0 {
		u.Edges.namedInvitationAcceptances[name] = []*InvitationAcceptance{}
	} else {
		u.Edges.namedInvitationAcceptances[name] = append(u.Edges.namedInvitationAcceptances[name], edges...)
	}
}

// NamedInvitationDenials returns the InvitationDenials named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedInvitationDenials(name string) ([]*InvitationDenial, error) {
	if u.Edges.namedInvitationDenials == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedInvitationDenials[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedInvitationDenials(name string, edges ...*InvitationDenial) {
	if u.Edges.namedInvitationDenials == nil {
		u.Edges.namedInvitationDenials = make(map[string][]*InvitationDenial)
	}
	if len(edges) == 0 {
		u.Edges.namedInvitationDenials[name] = []*InvitationDenial{}
	} else {
		u.Edges.namedInvitationDenials[name] = append(u.Edges.namedInvitationDenials[name], edges...)
	}
}

// NamedFriendships returns the Friendships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedFriendships(name string) ([]*Friendship, error) {
	if u.Edges.namedFriendships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedFriendships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedFriendships(name string, edges ...*Friendship) {
	if u.Edges.namedFriendships == nil {
		u.Edges.namedFriendships = make(map[string][]*Friendship)
	}
	if len(edges) == 0 {
		u.Edges.namedFriendships[name] = []*Friendship{}
	} else {
		u.Edges.namedFriendships[name] = append(u.Edges.namedFriendships[name], edges...)
	}
}

// NamedUserFriendGroups returns the UserFriendGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserFriendGroups(name string) ([]*UserFriendGroup, error) {
	if u.Edges.namedUserFriendGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserFriendGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserFriendGroups(name string, edges ...*UserFriendGroup) {
	if u.Edges.namedUserFriendGroups == nil {
		u.Edges.namedUserFriendGroups = make(map[string][]*UserFriendGroup)
	}
	if len(edges) == 0 {
		u.Edges.namedUserFriendGroups[name] = []*UserFriendGroup{}
	} else {
		u.Edges.namedUserFriendGroups[name] = append(u.Edges.namedUserFriendGroups[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}

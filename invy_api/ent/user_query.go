// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/account"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	limit                          *int
	offset                         *int
	unique                         *bool
	order                          []OrderFunc
	fields                         []string
	predicates                     []predicate.User
	withAccount                    *AccountQuery
	withUserProfile                *UserProfileQuery
	withFriendUsers                *UserQuery
	withFriendGroups               *FriendGroupQuery
	withBelongingFriendGroups      *FriendGroupQuery
	withInvitationAcceptances      *InvitationAcceptanceQuery
	withInvitationDenials          *InvitationDenialQuery
	withFriendships                *FriendshipQuery
	withUserFriendGroups           *UserFriendGroupQuery
	modifiers                      []func(*sql.Selector)
	loadTotal                      []func(context.Context, []*User) error
	withNamedFriendUsers           map[string]*UserQuery
	withNamedFriendGroups          map[string]*FriendGroupQuery
	withNamedBelongingFriendGroups map[string]*FriendGroupQuery
	withNamedInvitationAcceptances map[string]*InvitationAcceptanceQuery
	withNamedInvitationDenials     map[string]*InvitationDenialQuery
	withNamedFriendships           map[string]*FriendshipQuery
	withNamedUserFriendGroups      map[string]*UserFriendGroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit adds a limit step to the query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.limit = &limit
	return uq
}

// Offset adds an offset step to the query.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.unique = &unique
	return uq
}

// Order adds an order step to the query.
func (uq *UserQuery) Order(o ...OrderFunc) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryAccount chains the current query on the "account" edge.
func (uq *UserQuery) QueryAccount() *AccountQuery {
	query := &AccountQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.AccountTable, user.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserProfile chains the current query on the "user_profile" edge.
func (uq *UserQuery) QueryUserProfile() *UserProfileQuery {
	query := &UserProfileQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userprofile.Table, userprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.UserProfileTable, user.UserProfileColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendUsers chains the current query on the "friend_users" edge.
func (uq *UserQuery) QueryFriendUsers() *UserQuery {
	query := &UserQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FriendUsersTable, user.FriendUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendGroups chains the current query on the "friend_groups" edge.
func (uq *UserQuery) QueryFriendGroups() *FriendGroupQuery {
	query := &FriendGroupQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendGroupsTable, user.FriendGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBelongingFriendGroups chains the current query on the "belonging_friend_groups" edge.
func (uq *UserQuery) QueryBelongingFriendGroups() *FriendGroupQuery {
	query := &FriendGroupQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friendgroup.Table, friendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.BelongingFriendGroupsTable, user.BelongingFriendGroupsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationAcceptances chains the current query on the "invitation_acceptances" edge.
func (uq *UserQuery) QueryInvitationAcceptances() *InvitationAcceptanceQuery {
	query := &InvitationAcceptanceQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invitationacceptance.Table, invitationacceptance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InvitationAcceptancesTable, user.InvitationAcceptancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitationDenials chains the current query on the "invitation_denials" edge.
func (uq *UserQuery) QueryInvitationDenials() *InvitationDenialQuery {
	query := &InvitationDenialQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invitationdenial.Table, invitationdenial.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InvitationDenialsTable, user.InvitationDenialsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendships chains the current query on the "friendships" edge.
func (uq *UserQuery) QueryFriendships() *FriendshipQuery {
	query := &FriendshipQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friendship.Table, friendship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendshipsTable, user.FriendshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserFriendGroups chains the current query on the "user_friend_groups" edge.
func (uq *UserQuery) QueryUserFriendGroups() *UserFriendGroupQuery {
	query := &UserFriendGroupQuery{config: uq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfriendgroup.Table, userfriendgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserFriendGroupsTable, user.UserFriendGroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = uq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	if err := uq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                    uq.config,
		limit:                     uq.limit,
		offset:                    uq.offset,
		order:                     append([]OrderFunc{}, uq.order...),
		predicates:                append([]predicate.User{}, uq.predicates...),
		withAccount:               uq.withAccount.Clone(),
		withUserProfile:           uq.withUserProfile.Clone(),
		withFriendUsers:           uq.withFriendUsers.Clone(),
		withFriendGroups:          uq.withFriendGroups.Clone(),
		withBelongingFriendGroups: uq.withBelongingFriendGroups.Clone(),
		withInvitationAcceptances: uq.withInvitationAcceptances.Clone(),
		withInvitationDenials:     uq.withInvitationDenials.Clone(),
		withFriendships:           uq.withFriendships.Clone(),
		withUserFriendGroups:      uq.withUserFriendGroups.Clone(),
		// clone intermediate query.
		sql:    uq.sql.Clone(),
		path:   uq.path,
		unique: uq.unique,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithAccount(opts ...func(*AccountQuery)) *UserQuery {
	query := &AccountQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withAccount = query
	return uq
}

// WithUserProfile tells the query-builder to eager-load the nodes that are connected to
// the "user_profile" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserProfile(opts ...func(*UserProfileQuery)) *UserQuery {
	query := &UserProfileQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserProfile = query
	return uq
}

// WithFriendUsers tells the query-builder to eager-load the nodes that are connected to
// the "friend_users" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendUsers(opts ...func(*UserQuery)) *UserQuery {
	query := &UserQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendUsers = query
	return uq
}

// WithFriendGroups tells the query-builder to eager-load the nodes that are connected to
// the "friend_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendGroups(opts ...func(*FriendGroupQuery)) *UserQuery {
	query := &FriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendGroups = query
	return uq
}

// WithBelongingFriendGroups tells the query-builder to eager-load the nodes that are connected to
// the "belonging_friend_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBelongingFriendGroups(opts ...func(*FriendGroupQuery)) *UserQuery {
	query := &FriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withBelongingFriendGroups = query
	return uq
}

// WithInvitationAcceptances tells the query-builder to eager-load the nodes that are connected to
// the "invitation_acceptances" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInvitationAcceptances(opts ...func(*InvitationAcceptanceQuery)) *UserQuery {
	query := &InvitationAcceptanceQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withInvitationAcceptances = query
	return uq
}

// WithInvitationDenials tells the query-builder to eager-load the nodes that are connected to
// the "invitation_denials" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInvitationDenials(opts ...func(*InvitationDenialQuery)) *UserQuery {
	query := &InvitationDenialQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withInvitationDenials = query
	return uq
}

// WithFriendships tells the query-builder to eager-load the nodes that are connected to
// the "friendships" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendships(opts ...func(*FriendshipQuery)) *UserQuery {
	query := &FriendshipQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendships = query
	return uq
}

// WithUserFriendGroups tells the query-builder to eager-load the nodes that are connected to
// the "user_friend_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserFriendGroups(opts ...func(*UserFriendGroupQuery)) *UserQuery {
	query := &UserFriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserFriendGroups = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountID uuid.UUID `json:"account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldAccountID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	grbuild := &UserGroupBy{config: uq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uq.sqlQuery(ctx), nil
	}
	grbuild.label = user.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountID uuid.UUID `json:"account_id,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldAccountID).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.fields = append(uq.fields, fields...)
	selbuild := &UserSelect{UserQuery: uq}
	selbuild.label = user.Label
	selbuild.flds, selbuild.scan = &uq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range uq.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [9]bool{
			uq.withAccount != nil,
			uq.withUserProfile != nil,
			uq.withFriendUsers != nil,
			uq.withFriendGroups != nil,
			uq.withBelongingFriendGroups != nil,
			uq.withInvitationAcceptances != nil,
			uq.withInvitationDenials != nil,
			uq.withFriendships != nil,
			uq.withUserFriendGroups != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withAccount; query != nil {
		if err := uq.loadAccount(ctx, query, nodes, nil,
			func(n *User, e *Account) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserProfile; query != nil {
		if err := uq.loadUserProfile(ctx, query, nodes, nil,
			func(n *User, e *UserProfile) { n.Edges.UserProfile = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendUsers; query != nil {
		if err := uq.loadFriendUsers(ctx, query, nodes,
			func(n *User) { n.Edges.FriendUsers = []*User{} },
			func(n *User, e *User) { n.Edges.FriendUsers = append(n.Edges.FriendUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendGroups; query != nil {
		if err := uq.loadFriendGroups(ctx, query, nodes,
			func(n *User) { n.Edges.FriendGroups = []*FriendGroup{} },
			func(n *User, e *FriendGroup) { n.Edges.FriendGroups = append(n.Edges.FriendGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withBelongingFriendGroups; query != nil {
		if err := uq.loadBelongingFriendGroups(ctx, query, nodes,
			func(n *User) { n.Edges.BelongingFriendGroups = []*FriendGroup{} },
			func(n *User, e *FriendGroup) {
				n.Edges.BelongingFriendGroups = append(n.Edges.BelongingFriendGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withInvitationAcceptances; query != nil {
		if err := uq.loadInvitationAcceptances(ctx, query, nodes,
			func(n *User) { n.Edges.InvitationAcceptances = []*InvitationAcceptance{} },
			func(n *User, e *InvitationAcceptance) {
				n.Edges.InvitationAcceptances = append(n.Edges.InvitationAcceptances, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withInvitationDenials; query != nil {
		if err := uq.loadInvitationDenials(ctx, query, nodes,
			func(n *User) { n.Edges.InvitationDenials = []*InvitationDenial{} },
			func(n *User, e *InvitationDenial) { n.Edges.InvitationDenials = append(n.Edges.InvitationDenials, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendships; query != nil {
		if err := uq.loadFriendships(ctx, query, nodes,
			func(n *User) { n.Edges.Friendships = []*Friendship{} },
			func(n *User, e *Friendship) { n.Edges.Friendships = append(n.Edges.Friendships, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserFriendGroups; query != nil {
		if err := uq.loadUserFriendGroups(ctx, query, nodes,
			func(n *User) { n.Edges.UserFriendGroups = []*UserFriendGroup{} },
			func(n *User, e *UserFriendGroup) { n.Edges.UserFriendGroups = append(n.Edges.UserFriendGroups, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedFriendUsers {
		if err := uq.loadFriendUsers(ctx, query, nodes,
			func(n *User) { n.appendNamedFriendUsers(name) },
			func(n *User, e *User) { n.appendNamedFriendUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedFriendGroups {
		if err := uq.loadFriendGroups(ctx, query, nodes,
			func(n *User) { n.appendNamedFriendGroups(name) },
			func(n *User, e *FriendGroup) { n.appendNamedFriendGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedBelongingFriendGroups {
		if err := uq.loadBelongingFriendGroups(ctx, query, nodes,
			func(n *User) { n.appendNamedBelongingFriendGroups(name) },
			func(n *User, e *FriendGroup) { n.appendNamedBelongingFriendGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedInvitationAcceptances {
		if err := uq.loadInvitationAcceptances(ctx, query, nodes,
			func(n *User) { n.appendNamedInvitationAcceptances(name) },
			func(n *User, e *InvitationAcceptance) { n.appendNamedInvitationAcceptances(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedInvitationDenials {
		if err := uq.loadInvitationDenials(ctx, query, nodes,
			func(n *User) { n.appendNamedInvitationDenials(name) },
			func(n *User, e *InvitationDenial) { n.appendNamedInvitationDenials(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedFriendships {
		if err := uq.loadFriendships(ctx, query, nodes,
			func(n *User) { n.appendNamedFriendships(name) },
			func(n *User, e *Friendship) { n.appendNamedFriendships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedUserFriendGroups {
		if err := uq.loadUserFriendGroups(ctx, query, nodes,
			func(n *User) { n.appendNamedUserFriendGroups(name) },
			func(n *User, e *UserFriendGroup) { n.appendNamedUserFriendGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadAccount(ctx context.Context, query *AccountQuery, nodes []*User, init func(*User), assign func(*User, *Account)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*User)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uq *UserQuery) loadUserProfile(ctx context.Context, query *UserProfileQuery, nodes []*User, init func(*User), assign func(*User, *UserProfile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.UserProfile(func(s *sql.Selector) {
		s.Where(sql.InValues(user.UserProfileColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFriendUsers(ctx context.Context, query *UserQuery, nodes []*User, init func(*User), assign func(*User, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.FriendUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(user.FriendUsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.FriendUsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.FriendUsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "friend_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadFriendGroups(ctx context.Context, query *FriendGroupQuery, nodes []*User, init func(*User), assign func(*User, *FriendGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.FriendGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(user.FriendGroupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadBelongingFriendGroups(ctx context.Context, query *FriendGroupQuery, nodes []*User, init func(*User), assign func(*User, *FriendGroup)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*User)
	nids := make(map[uuid.UUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.BelongingFriendGroupsTable)
		s.Join(joinT).On(s.C(friendgroup.FieldID), joinT.C(user.BelongingFriendGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(user.BelongingFriendGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.BelongingFriendGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(uuid.UUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*uuid.UUID)
			inValue := *values[1].(*uuid.UUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "belonging_friend_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadInvitationAcceptances(ctx context.Context, query *InvitationAcceptanceQuery, nodes []*User, init func(*User), assign func(*User, *InvitationAcceptance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationAcceptance(func(s *sql.Selector) {
		s.Where(sql.InValues(user.InvitationAcceptancesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInvitationDenials(ctx context.Context, query *InvitationDenialQuery, nodes []*User, init func(*User), assign func(*User, *InvitationDenial)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.InvitationDenial(func(s *sql.Selector) {
		s.Where(sql.InValues(user.InvitationDenialsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFriendships(ctx context.Context, query *FriendshipQuery, nodes []*User, init func(*User), assign func(*User, *Friendship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Friendship(func(s *sql.Selector) {
		s.Where(sql.InValues(user.FriendshipsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserFriendGroups(ctx context.Context, query *UserFriendGroupQuery, nodes []*User, init func(*User), assign func(*User, *UserFriendGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.UserFriendGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(user.UserFriendGroupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.fields
	if len(uq.fields) > 0 {
		_spec.Unique = uq.unique != nil && *uq.unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		From:   uq.sql,
		Unique: true,
	}
	if unique := uq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.unique != nil && *uq.unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedFriendUsers tells the query-builder to eager-load the nodes that are connected to the "friend_users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedFriendUsers(name string, opts ...func(*UserQuery)) *UserQuery {
	query := &UserQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedFriendUsers == nil {
		uq.withNamedFriendUsers = make(map[string]*UserQuery)
	}
	uq.withNamedFriendUsers[name] = query
	return uq
}

// WithNamedFriendGroups tells the query-builder to eager-load the nodes that are connected to the "friend_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedFriendGroups(name string, opts ...func(*FriendGroupQuery)) *UserQuery {
	query := &FriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedFriendGroups == nil {
		uq.withNamedFriendGroups = make(map[string]*FriendGroupQuery)
	}
	uq.withNamedFriendGroups[name] = query
	return uq
}

// WithNamedBelongingFriendGroups tells the query-builder to eager-load the nodes that are connected to the "belonging_friend_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedBelongingFriendGroups(name string, opts ...func(*FriendGroupQuery)) *UserQuery {
	query := &FriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedBelongingFriendGroups == nil {
		uq.withNamedBelongingFriendGroups = make(map[string]*FriendGroupQuery)
	}
	uq.withNamedBelongingFriendGroups[name] = query
	return uq
}

// WithNamedInvitationAcceptances tells the query-builder to eager-load the nodes that are connected to the "invitation_acceptances"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedInvitationAcceptances(name string, opts ...func(*InvitationAcceptanceQuery)) *UserQuery {
	query := &InvitationAcceptanceQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedInvitationAcceptances == nil {
		uq.withNamedInvitationAcceptances = make(map[string]*InvitationAcceptanceQuery)
	}
	uq.withNamedInvitationAcceptances[name] = query
	return uq
}

// WithNamedInvitationDenials tells the query-builder to eager-load the nodes that are connected to the "invitation_denials"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedInvitationDenials(name string, opts ...func(*InvitationDenialQuery)) *UserQuery {
	query := &InvitationDenialQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedInvitationDenials == nil {
		uq.withNamedInvitationDenials = make(map[string]*InvitationDenialQuery)
	}
	uq.withNamedInvitationDenials[name] = query
	return uq
}

// WithNamedFriendships tells the query-builder to eager-load the nodes that are connected to the "friendships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedFriendships(name string, opts ...func(*FriendshipQuery)) *UserQuery {
	query := &FriendshipQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedFriendships == nil {
		uq.withNamedFriendships = make(map[string]*FriendshipQuery)
	}
	uq.withNamedFriendships[name] = query
	return uq
}

// WithNamedUserFriendGroups tells the query-builder to eager-load the nodes that are connected to the "user_friend_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedUserFriendGroups(name string, opts ...func(*UserFriendGroupQuery)) *UserQuery {
	query := &UserFriendGroupQuery{config: uq.config}
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedUserFriendGroups == nil {
		uq.withNamedUserFriendGroups = make(map[string]*UserFriendGroupQuery)
	}
	uq.withNamedUserFriendGroups[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the group-by query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ugb.path(ctx)
	if err != nil {
		return err
	}
	ugb.sql = query
	return ugb.sqlScan(ctx, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ugb.fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ugb *UserGroupBy) sqlQuery() *sql.Selector {
	selector := ugb.sql.Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ugb.fields)+len(ugb.fns))
		for _, f := range ugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ugb.fields...)...)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	us.sql = us.UserQuery.sqlQuery(ctx)
	return us.sqlScan(ctx, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(us.sql))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		us.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		us.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := us.sql.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/pushnotificationtoken"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUserProfileID sets the "user_profile" edge to the UserProfile entity by ID.
func (uu *UserUpdate) SetUserProfileID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetUserProfileID(id)
	return uu
}

// SetNillableUserProfileID sets the "user_profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUserProfileID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetUserProfileID(*id)
	}
	return uu
}

// SetUserProfile sets the "user_profile" edge to the UserProfile entity.
func (uu *UserUpdate) SetUserProfile(u *UserProfile) *UserUpdate {
	return uu.SetUserProfileID(u.ID)
}

// AddFriendUserIDs adds the "friend_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddFriendUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddFriendUserIDs(ids...)
	return uu
}

// AddFriendUsers adds the "friend_users" edges to the User entity.
func (uu *UserUpdate) AddFriendUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFriendUserIDs(ids...)
}

// AddPushNotificationTokenIDs adds the "push_notification_tokens" edge to the PushNotificationToken entity by IDs.
func (uu *UserUpdate) AddPushNotificationTokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPushNotificationTokenIDs(ids...)
	return uu
}

// AddPushNotificationTokens adds the "push_notification_tokens" edges to the PushNotificationToken entity.
func (uu *UserUpdate) AddPushNotificationTokens(p ...*PushNotificationToken) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPushNotificationTokenIDs(ids...)
}

// AddFriendGroupIDs adds the "friend_groups" edge to the FriendGroup entity by IDs.
func (uu *UserUpdate) AddFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddFriendGroupIDs(ids...)
	return uu
}

// AddFriendGroups adds the "friend_groups" edges to the FriendGroup entity.
func (uu *UserUpdate) AddFriendGroups(f ...*FriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFriendGroupIDs(ids...)
}

// AddBelongingFriendGroupIDs adds the "belonging_friend_groups" edge to the FriendGroup entity by IDs.
func (uu *UserUpdate) AddBelongingFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddBelongingFriendGroupIDs(ids...)
	return uu
}

// AddBelongingFriendGroups adds the "belonging_friend_groups" edges to the FriendGroup entity.
func (uu *UserUpdate) AddBelongingFriendGroups(f ...*FriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddBelongingFriendGroupIDs(ids...)
}

// AddInvitationAcceptanceIDs adds the "invitation_acceptances" edge to the InvitationAcceptance entity by IDs.
func (uu *UserUpdate) AddInvitationAcceptanceIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddInvitationAcceptanceIDs(ids...)
	return uu
}

// AddInvitationAcceptances adds the "invitation_acceptances" edges to the InvitationAcceptance entity.
func (uu *UserUpdate) AddInvitationAcceptances(i ...*InvitationAcceptance) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInvitationAcceptanceIDs(ids...)
}

// AddInvitationDenialIDs adds the "invitation_denials" edge to the InvitationDenial entity by IDs.
func (uu *UserUpdate) AddInvitationDenialIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddInvitationDenialIDs(ids...)
	return uu
}

// AddInvitationDenials adds the "invitation_denials" edges to the InvitationDenial entity.
func (uu *UserUpdate) AddInvitationDenials(i ...*InvitationDenial) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddInvitationDenialIDs(ids...)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (uu *UserUpdate) AddFriendshipIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddFriendshipIDs(ids...)
	return uu
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (uu *UserUpdate) AddFriendships(f ...*Friendship) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFriendshipIDs(ids...)
}

// AddUserFriendGroupIDs adds the "user_friend_groups" edge to the UserFriendGroup entity by IDs.
func (uu *UserUpdate) AddUserFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddUserFriendGroupIDs(ids...)
	return uu
}

// AddUserFriendGroups adds the "user_friend_groups" edges to the UserFriendGroup entity.
func (uu *UserUpdate) AddUserFriendGroups(u ...*UserFriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserFriendGroupIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserProfile clears the "user_profile" edge to the UserProfile entity.
func (uu *UserUpdate) ClearUserProfile() *UserUpdate {
	uu.mutation.ClearUserProfile()
	return uu
}

// ClearFriendUsers clears all "friend_users" edges to the User entity.
func (uu *UserUpdate) ClearFriendUsers() *UserUpdate {
	uu.mutation.ClearFriendUsers()
	return uu
}

// RemoveFriendUserIDs removes the "friend_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveFriendUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveFriendUserIDs(ids...)
	return uu
}

// RemoveFriendUsers removes "friend_users" edges to User entities.
func (uu *UserUpdate) RemoveFriendUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFriendUserIDs(ids...)
}

// ClearPushNotificationTokens clears all "push_notification_tokens" edges to the PushNotificationToken entity.
func (uu *UserUpdate) ClearPushNotificationTokens() *UserUpdate {
	uu.mutation.ClearPushNotificationTokens()
	return uu
}

// RemovePushNotificationTokenIDs removes the "push_notification_tokens" edge to PushNotificationToken entities by IDs.
func (uu *UserUpdate) RemovePushNotificationTokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePushNotificationTokenIDs(ids...)
	return uu
}

// RemovePushNotificationTokens removes "push_notification_tokens" edges to PushNotificationToken entities.
func (uu *UserUpdate) RemovePushNotificationTokens(p ...*PushNotificationToken) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePushNotificationTokenIDs(ids...)
}

// ClearFriendGroups clears all "friend_groups" edges to the FriendGroup entity.
func (uu *UserUpdate) ClearFriendGroups() *UserUpdate {
	uu.mutation.ClearFriendGroups()
	return uu
}

// RemoveFriendGroupIDs removes the "friend_groups" edge to FriendGroup entities by IDs.
func (uu *UserUpdate) RemoveFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveFriendGroupIDs(ids...)
	return uu
}

// RemoveFriendGroups removes "friend_groups" edges to FriendGroup entities.
func (uu *UserUpdate) RemoveFriendGroups(f ...*FriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFriendGroupIDs(ids...)
}

// ClearBelongingFriendGroups clears all "belonging_friend_groups" edges to the FriendGroup entity.
func (uu *UserUpdate) ClearBelongingFriendGroups() *UserUpdate {
	uu.mutation.ClearBelongingFriendGroups()
	return uu
}

// RemoveBelongingFriendGroupIDs removes the "belonging_friend_groups" edge to FriendGroup entities by IDs.
func (uu *UserUpdate) RemoveBelongingFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveBelongingFriendGroupIDs(ids...)
	return uu
}

// RemoveBelongingFriendGroups removes "belonging_friend_groups" edges to FriendGroup entities.
func (uu *UserUpdate) RemoveBelongingFriendGroups(f ...*FriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveBelongingFriendGroupIDs(ids...)
}

// ClearInvitationAcceptances clears all "invitation_acceptances" edges to the InvitationAcceptance entity.
func (uu *UserUpdate) ClearInvitationAcceptances() *UserUpdate {
	uu.mutation.ClearInvitationAcceptances()
	return uu
}

// RemoveInvitationAcceptanceIDs removes the "invitation_acceptances" edge to InvitationAcceptance entities by IDs.
func (uu *UserUpdate) RemoveInvitationAcceptanceIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveInvitationAcceptanceIDs(ids...)
	return uu
}

// RemoveInvitationAcceptances removes "invitation_acceptances" edges to InvitationAcceptance entities.
func (uu *UserUpdate) RemoveInvitationAcceptances(i ...*InvitationAcceptance) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInvitationAcceptanceIDs(ids...)
}

// ClearInvitationDenials clears all "invitation_denials" edges to the InvitationDenial entity.
func (uu *UserUpdate) ClearInvitationDenials() *UserUpdate {
	uu.mutation.ClearInvitationDenials()
	return uu
}

// RemoveInvitationDenialIDs removes the "invitation_denials" edge to InvitationDenial entities by IDs.
func (uu *UserUpdate) RemoveInvitationDenialIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveInvitationDenialIDs(ids...)
	return uu
}

// RemoveInvitationDenials removes "invitation_denials" edges to InvitationDenial entities.
func (uu *UserUpdate) RemoveInvitationDenials(i ...*InvitationDenial) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveInvitationDenialIDs(ids...)
}

// ClearFriendships clears all "friendships" edges to the Friendship entity.
func (uu *UserUpdate) ClearFriendships() *UserUpdate {
	uu.mutation.ClearFriendships()
	return uu
}

// RemoveFriendshipIDs removes the "friendships" edge to Friendship entities by IDs.
func (uu *UserUpdate) RemoveFriendshipIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveFriendshipIDs(ids...)
	return uu
}

// RemoveFriendships removes "friendships" edges to Friendship entities.
func (uu *UserUpdate) RemoveFriendships(f ...*Friendship) *UserUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFriendshipIDs(ids...)
}

// ClearUserFriendGroups clears all "user_friend_groups" edges to the UserFriendGroup entity.
func (uu *UserUpdate) ClearUserFriendGroups() *UserUpdate {
	uu.mutation.ClearUserFriendGroups()
	return uu
}

// RemoveUserFriendGroupIDs removes the "user_friend_groups" edge to UserFriendGroup entities by IDs.
func (uu *UserUpdate) RemoveUserFriendGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveUserFriendGroupIDs(ids...)
	return uu
}

// RemoveUserFriendGroups removes "user_friend_groups" edges to UserFriendGroup entities.
func (uu *UserUpdate) RemoveUserFriendGroups(u ...*UserFriendGroup) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserFriendGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if _, ok := uu.mutation.AccountID(); uu.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.account"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FriendUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &FriendshipCreate{config: uu.config, mutation: newFriendshipMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFriendUsersIDs(); len(nodes) > 0 && !uu.mutation.FriendUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: uu.config, mutation: newFriendshipMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FriendUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: uu.config, mutation: newFriendshipMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PushNotificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPushNotificationTokensIDs(); len(nodes) > 0 && !uu.mutation.PushNotificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PushNotificationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFriendGroupsIDs(); len(nodes) > 0 && !uu.mutation.FriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BelongingFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		createE := &UserFriendGroupCreate{config: uu.config, mutation: newUserFriendGroupMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBelongingFriendGroupsIDs(); len(nodes) > 0 && !uu.mutation.BelongingFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserFriendGroupCreate{config: uu.config, mutation: newUserFriendGroupMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BelongingFriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserFriendGroupCreate{config: uu.config, mutation: newUserFriendGroupMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InvitationAcceptancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInvitationAcceptancesIDs(); len(nodes) > 0 && !uu.mutation.InvitationAcceptancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InvitationAcceptancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.InvitationDenialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedInvitationDenialsIDs(); len(nodes) > 0 && !uu.mutation.InvitationDenialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.InvitationDenialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFriendshipsIDs(); len(nodes) > 0 && !uu.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserFriendGroupsIDs(); len(nodes) > 0 && !uu.mutation.UserFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserFriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUserProfileID sets the "user_profile" edge to the UserProfile entity by ID.
func (uuo *UserUpdateOne) SetUserProfileID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetUserProfileID(id)
	return uuo
}

// SetNillableUserProfileID sets the "user_profile" edge to the UserProfile entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserProfileID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUserProfileID(*id)
	}
	return uuo
}

// SetUserProfile sets the "user_profile" edge to the UserProfile entity.
func (uuo *UserUpdateOne) SetUserProfile(u *UserProfile) *UserUpdateOne {
	return uuo.SetUserProfileID(u.ID)
}

// AddFriendUserIDs adds the "friend_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddFriendUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddFriendUserIDs(ids...)
	return uuo
}

// AddFriendUsers adds the "friend_users" edges to the User entity.
func (uuo *UserUpdateOne) AddFriendUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFriendUserIDs(ids...)
}

// AddPushNotificationTokenIDs adds the "push_notification_tokens" edge to the PushNotificationToken entity by IDs.
func (uuo *UserUpdateOne) AddPushNotificationTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPushNotificationTokenIDs(ids...)
	return uuo
}

// AddPushNotificationTokens adds the "push_notification_tokens" edges to the PushNotificationToken entity.
func (uuo *UserUpdateOne) AddPushNotificationTokens(p ...*PushNotificationToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPushNotificationTokenIDs(ids...)
}

// AddFriendGroupIDs adds the "friend_groups" edge to the FriendGroup entity by IDs.
func (uuo *UserUpdateOne) AddFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddFriendGroupIDs(ids...)
	return uuo
}

// AddFriendGroups adds the "friend_groups" edges to the FriendGroup entity.
func (uuo *UserUpdateOne) AddFriendGroups(f ...*FriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFriendGroupIDs(ids...)
}

// AddBelongingFriendGroupIDs adds the "belonging_friend_groups" edge to the FriendGroup entity by IDs.
func (uuo *UserUpdateOne) AddBelongingFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddBelongingFriendGroupIDs(ids...)
	return uuo
}

// AddBelongingFriendGroups adds the "belonging_friend_groups" edges to the FriendGroup entity.
func (uuo *UserUpdateOne) AddBelongingFriendGroups(f ...*FriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddBelongingFriendGroupIDs(ids...)
}

// AddInvitationAcceptanceIDs adds the "invitation_acceptances" edge to the InvitationAcceptance entity by IDs.
func (uuo *UserUpdateOne) AddInvitationAcceptanceIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddInvitationAcceptanceIDs(ids...)
	return uuo
}

// AddInvitationAcceptances adds the "invitation_acceptances" edges to the InvitationAcceptance entity.
func (uuo *UserUpdateOne) AddInvitationAcceptances(i ...*InvitationAcceptance) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInvitationAcceptanceIDs(ids...)
}

// AddInvitationDenialIDs adds the "invitation_denials" edge to the InvitationDenial entity by IDs.
func (uuo *UserUpdateOne) AddInvitationDenialIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddInvitationDenialIDs(ids...)
	return uuo
}

// AddInvitationDenials adds the "invitation_denials" edges to the InvitationDenial entity.
func (uuo *UserUpdateOne) AddInvitationDenials(i ...*InvitationDenial) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddInvitationDenialIDs(ids...)
}

// AddFriendshipIDs adds the "friendships" edge to the Friendship entity by IDs.
func (uuo *UserUpdateOne) AddFriendshipIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddFriendshipIDs(ids...)
	return uuo
}

// AddFriendships adds the "friendships" edges to the Friendship entity.
func (uuo *UserUpdateOne) AddFriendships(f ...*Friendship) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFriendshipIDs(ids...)
}

// AddUserFriendGroupIDs adds the "user_friend_groups" edge to the UserFriendGroup entity by IDs.
func (uuo *UserUpdateOne) AddUserFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddUserFriendGroupIDs(ids...)
	return uuo
}

// AddUserFriendGroups adds the "user_friend_groups" edges to the UserFriendGroup entity.
func (uuo *UserUpdateOne) AddUserFriendGroups(u ...*UserFriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserFriendGroupIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserProfile clears the "user_profile" edge to the UserProfile entity.
func (uuo *UserUpdateOne) ClearUserProfile() *UserUpdateOne {
	uuo.mutation.ClearUserProfile()
	return uuo
}

// ClearFriendUsers clears all "friend_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearFriendUsers() *UserUpdateOne {
	uuo.mutation.ClearFriendUsers()
	return uuo
}

// RemoveFriendUserIDs removes the "friend_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveFriendUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveFriendUserIDs(ids...)
	return uuo
}

// RemoveFriendUsers removes "friend_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveFriendUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFriendUserIDs(ids...)
}

// ClearPushNotificationTokens clears all "push_notification_tokens" edges to the PushNotificationToken entity.
func (uuo *UserUpdateOne) ClearPushNotificationTokens() *UserUpdateOne {
	uuo.mutation.ClearPushNotificationTokens()
	return uuo
}

// RemovePushNotificationTokenIDs removes the "push_notification_tokens" edge to PushNotificationToken entities by IDs.
func (uuo *UserUpdateOne) RemovePushNotificationTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePushNotificationTokenIDs(ids...)
	return uuo
}

// RemovePushNotificationTokens removes "push_notification_tokens" edges to PushNotificationToken entities.
func (uuo *UserUpdateOne) RemovePushNotificationTokens(p ...*PushNotificationToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePushNotificationTokenIDs(ids...)
}

// ClearFriendGroups clears all "friend_groups" edges to the FriendGroup entity.
func (uuo *UserUpdateOne) ClearFriendGroups() *UserUpdateOne {
	uuo.mutation.ClearFriendGroups()
	return uuo
}

// RemoveFriendGroupIDs removes the "friend_groups" edge to FriendGroup entities by IDs.
func (uuo *UserUpdateOne) RemoveFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveFriendGroupIDs(ids...)
	return uuo
}

// RemoveFriendGroups removes "friend_groups" edges to FriendGroup entities.
func (uuo *UserUpdateOne) RemoveFriendGroups(f ...*FriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFriendGroupIDs(ids...)
}

// ClearBelongingFriendGroups clears all "belonging_friend_groups" edges to the FriendGroup entity.
func (uuo *UserUpdateOne) ClearBelongingFriendGroups() *UserUpdateOne {
	uuo.mutation.ClearBelongingFriendGroups()
	return uuo
}

// RemoveBelongingFriendGroupIDs removes the "belonging_friend_groups" edge to FriendGroup entities by IDs.
func (uuo *UserUpdateOne) RemoveBelongingFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveBelongingFriendGroupIDs(ids...)
	return uuo
}

// RemoveBelongingFriendGroups removes "belonging_friend_groups" edges to FriendGroup entities.
func (uuo *UserUpdateOne) RemoveBelongingFriendGroups(f ...*FriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveBelongingFriendGroupIDs(ids...)
}

// ClearInvitationAcceptances clears all "invitation_acceptances" edges to the InvitationAcceptance entity.
func (uuo *UserUpdateOne) ClearInvitationAcceptances() *UserUpdateOne {
	uuo.mutation.ClearInvitationAcceptances()
	return uuo
}

// RemoveInvitationAcceptanceIDs removes the "invitation_acceptances" edge to InvitationAcceptance entities by IDs.
func (uuo *UserUpdateOne) RemoveInvitationAcceptanceIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveInvitationAcceptanceIDs(ids...)
	return uuo
}

// RemoveInvitationAcceptances removes "invitation_acceptances" edges to InvitationAcceptance entities.
func (uuo *UserUpdateOne) RemoveInvitationAcceptances(i ...*InvitationAcceptance) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInvitationAcceptanceIDs(ids...)
}

// ClearInvitationDenials clears all "invitation_denials" edges to the InvitationDenial entity.
func (uuo *UserUpdateOne) ClearInvitationDenials() *UserUpdateOne {
	uuo.mutation.ClearInvitationDenials()
	return uuo
}

// RemoveInvitationDenialIDs removes the "invitation_denials" edge to InvitationDenial entities by IDs.
func (uuo *UserUpdateOne) RemoveInvitationDenialIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveInvitationDenialIDs(ids...)
	return uuo
}

// RemoveInvitationDenials removes "invitation_denials" edges to InvitationDenial entities.
func (uuo *UserUpdateOne) RemoveInvitationDenials(i ...*InvitationDenial) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveInvitationDenialIDs(ids...)
}

// ClearFriendships clears all "friendships" edges to the Friendship entity.
func (uuo *UserUpdateOne) ClearFriendships() *UserUpdateOne {
	uuo.mutation.ClearFriendships()
	return uuo
}

// RemoveFriendshipIDs removes the "friendships" edge to Friendship entities by IDs.
func (uuo *UserUpdateOne) RemoveFriendshipIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveFriendshipIDs(ids...)
	return uuo
}

// RemoveFriendships removes "friendships" edges to Friendship entities.
func (uuo *UserUpdateOne) RemoveFriendships(f ...*Friendship) *UserUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFriendshipIDs(ids...)
}

// ClearUserFriendGroups clears all "user_friend_groups" edges to the UserFriendGroup entity.
func (uuo *UserUpdateOne) ClearUserFriendGroups() *UserUpdateOne {
	uuo.mutation.ClearUserFriendGroups()
	return uuo
}

// RemoveUserFriendGroupIDs removes the "user_friend_groups" edge to UserFriendGroup entities by IDs.
func (uuo *UserUpdateOne) RemoveUserFriendGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveUserFriendGroupIDs(ids...)
	return uuo
}

// RemoveUserFriendGroups removes "user_friend_groups" edges to UserFriendGroup entities.
func (uuo *UserUpdateOne) RemoveUserFriendGroups(u ...*UserFriendGroup) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserFriendGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if _, ok := uuo.mutation.AccountID(); uuo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.account"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.UserProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userprofile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UserProfileTable,
			Columns: []string{user.UserProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userprofile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FriendUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		createE := &FriendshipCreate{config: uuo.config, mutation: newFriendshipMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFriendUsersIDs(); len(nodes) > 0 && !uuo.mutation.FriendUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: uuo.config, mutation: newFriendshipMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FriendUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendUsersTable,
			Columns: user.FriendUsersPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FriendshipCreate{config: uuo.config, mutation: newFriendshipMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PushNotificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPushNotificationTokensIDs(); len(nodes) > 0 && !uuo.mutation.PushNotificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PushNotificationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PushNotificationTokensTable,
			Columns: []string{user.PushNotificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pushnotificationtoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFriendGroupsIDs(); len(nodes) > 0 && !uuo.mutation.FriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendGroupsTable,
			Columns: []string{user.FriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BelongingFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		createE := &UserFriendGroupCreate{config: uuo.config, mutation: newUserFriendGroupMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBelongingFriendGroupsIDs(); len(nodes) > 0 && !uuo.mutation.BelongingFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserFriendGroupCreate{config: uuo.config, mutation: newUserFriendGroupMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BelongingFriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.BelongingFriendGroupsTable,
			Columns: user.BelongingFriendGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserFriendGroupCreate{config: uuo.config, mutation: newUserFriendGroupMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InvitationAcceptancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInvitationAcceptancesIDs(); len(nodes) > 0 && !uuo.mutation.InvitationAcceptancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InvitationAcceptancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationAcceptancesTable,
			Columns: []string{user.InvitationAcceptancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationacceptance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.InvitationDenialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedInvitationDenialsIDs(); len(nodes) > 0 && !uuo.mutation.InvitationDenialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.InvitationDenialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.InvitationDenialsTable,
			Columns: []string{user.InvitationDenialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: invitationdenial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFriendshipsIDs(); len(nodes) > 0 && !uuo.mutation.FriendshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FriendshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.FriendshipsTable,
			Columns: []string{user.FriendshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: friendship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserFriendGroupsIDs(); len(nodes) > 0 && !uuo.mutation.UserFriendGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserFriendGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserFriendGroupsTable,
			Columns: []string{user.UserFriendGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userfriendgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

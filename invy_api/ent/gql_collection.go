// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/k-yomo/invy/invy_api/ent/account"
	"github.com/k-yomo/invy/invy_api/ent/friendgroup"
	"github.com/k-yomo/invy/invy_api/ent/friendship"
	"github.com/k-yomo/invy/invy_api/ent/friendshiprequest"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/invitationdenial"
	"github.com/k-yomo/invy/invy_api/ent/invitationuser"
	"github.com/k-yomo/invy/invy_api/ent/pushnotificationtoken"
	"github.com/k-yomo/invy/invy_api/ent/user"
	"github.com/k-yomo/invy/invy_api/ent/userblock"
	"github.com/k-yomo/invy/invy_api/ent/userfriendgroup"
	"github.com/k-yomo/invy/invy_api/ent/userlocation"
	"github.com/k-yomo/invy/invy_api/ent/userlocationhistory"
	"github.com/k-yomo/invy/invy_api/ent/usermute"
	"github.com/k-yomo/invy/invy_api/ent/userprofile"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AccountQuery) CollectFields(ctx context.Context, satisfies ...string) (*AccountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AccountQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(account.Columns))
		selectedFields = []string{account.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.WithNamedUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "authID":
			if _, ok := fieldSeen[account.FieldAuthID]; !ok {
				selectedFields = append(selectedFields, account.FieldAuthID)
				fieldSeen[account.FieldAuthID] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[account.FieldEmail]; !ok {
				selectedFields = append(selectedFields, account.FieldEmail)
				fieldSeen[account.FieldEmail] = struct{}{}
			}
		case "phoneNumber":
			if _, ok := fieldSeen[account.FieldPhoneNumber]; !ok {
				selectedFields = append(selectedFields, account.FieldPhoneNumber)
				fieldSeen[account.FieldPhoneNumber] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[account.FieldStatus]; !ok {
				selectedFields = append(selectedFields, account.FieldStatus)
				fieldSeen[account.FieldStatus] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[account.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, account.FieldCreatedAt)
				fieldSeen[account.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type accountPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AccountPaginateOption
}

func newAccountPaginateArgs(rv map[string]interface{}) *accountPaginateArgs {
	args := &accountPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fg *FriendGroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*FriendGroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return fg, nil
	}
	if err := fg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return fg, nil
}

func (fg *FriendGroupQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(friendgroup.Columns))
		selectedFields = []string{friendgroup.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fg.withUser = query
			if _, ok := fieldSeen[friendgroup.FieldUserID]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldUserID)
				fieldSeen[friendgroup.FieldUserID] = struct{}{}
			}
		case "friendUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fg.WithNamedFriendUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "userFriendGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserFriendGroupClient{config: fg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fg.WithNamedUserFriendGroups(alias, func(wq *UserFriendGroupQuery) {
				*wq = *query
			})
		case "userID":
			if _, ok := fieldSeen[friendgroup.FieldUserID]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldUserID)
				fieldSeen[friendgroup.FieldUserID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[friendgroup.FieldName]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldName)
				fieldSeen[friendgroup.FieldName] = struct{}{}
			}
		case "totalCount":
			if _, ok := fieldSeen[friendgroup.FieldTotalCount]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldTotalCount)
				fieldSeen[friendgroup.FieldTotalCount] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[friendgroup.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldCreatedAt)
				fieldSeen[friendgroup.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[friendgroup.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, friendgroup.FieldUpdatedAt)
				fieldSeen[friendgroup.FieldUpdatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		fg.Select(selectedFields...)
	}
	return nil
}

type friendgroupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FriendGroupPaginateOption
}

func newFriendGroupPaginateArgs(rv map[string]interface{}) *friendgroupPaginateArgs {
	args := &friendgroupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (f *FriendshipQuery) CollectFields(ctx context.Context, satisfies ...string) (*FriendshipQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return f, nil
	}
	if err := f.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return f, nil
}

func (f *FriendshipQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(friendship.Columns))
		selectedFields = []string{friendship.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: f.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			f.withUser = query
			if _, ok := fieldSeen[friendship.FieldUserID]; !ok {
				selectedFields = append(selectedFields, friendship.FieldUserID)
				fieldSeen[friendship.FieldUserID] = struct{}{}
			}
		case "friendUser":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: f.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			f.withFriendUser = query
			if _, ok := fieldSeen[friendship.FieldFriendUserID]; !ok {
				selectedFields = append(selectedFields, friendship.FieldFriendUserID)
				fieldSeen[friendship.FieldFriendUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[friendship.FieldUserID]; !ok {
				selectedFields = append(selectedFields, friendship.FieldUserID)
				fieldSeen[friendship.FieldUserID] = struct{}{}
			}
		case "friendUserID":
			if _, ok := fieldSeen[friendship.FieldFriendUserID]; !ok {
				selectedFields = append(selectedFields, friendship.FieldFriendUserID)
				fieldSeen[friendship.FieldFriendUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[friendship.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, friendship.FieldCreatedAt)
				fieldSeen[friendship.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		f.Select(selectedFields...)
	}
	return nil
}

type friendshipPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FriendshipPaginateOption
}

func newFriendshipPaginateArgs(rv map[string]interface{}) *friendshipPaginateArgs {
	args := &friendshipPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fr *FriendshipRequestQuery) CollectFields(ctx context.Context, satisfies ...string) (*FriendshipRequestQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return fr, nil
	}
	if err := fr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return fr, nil
}

func (fr *FriendshipRequestQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(friendshiprequest.Columns))
		selectedFields = []string{friendshiprequest.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "fromUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fr.withFromUsers = query
			if _, ok := fieldSeen[friendshiprequest.FieldFromUserID]; !ok {
				selectedFields = append(selectedFields, friendshiprequest.FieldFromUserID)
				fieldSeen[friendshiprequest.FieldFromUserID] = struct{}{}
			}
		case "toUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fr.withToUsers = query
			if _, ok := fieldSeen[friendshiprequest.FieldToUserID]; !ok {
				selectedFields = append(selectedFields, friendshiprequest.FieldToUserID)
				fieldSeen[friendshiprequest.FieldToUserID] = struct{}{}
			}
		case "fromUserID":
			if _, ok := fieldSeen[friendshiprequest.FieldFromUserID]; !ok {
				selectedFields = append(selectedFields, friendshiprequest.FieldFromUserID)
				fieldSeen[friendshiprequest.FieldFromUserID] = struct{}{}
			}
		case "toUserID":
			if _, ok := fieldSeen[friendshiprequest.FieldToUserID]; !ok {
				selectedFields = append(selectedFields, friendshiprequest.FieldToUserID)
				fieldSeen[friendshiprequest.FieldToUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[friendshiprequest.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, friendshiprequest.FieldCreatedAt)
				fieldSeen[friendshiprequest.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		fr.Select(selectedFields...)
	}
	return nil
}

type friendshiprequestPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FriendshipRequestPaginateOption
}

func newFriendshipRequestPaginateArgs(rv map[string]interface{}) *friendshiprequestPaginateArgs {
	args := &friendshiprequestPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *InvitationQuery) CollectFields(ctx context.Context, satisfies ...string) (*InvitationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return i, nil
	}
	if err := i.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return i, nil
}

func (i *InvitationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(invitation.Columns))
		selectedFields = []string{invitation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.withUser = query
			if _, ok := fieldSeen[invitation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitation.FieldUserID)
				fieldSeen[invitation.FieldUserID] = struct{}{}
			}
		case "invitationUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationUserClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedInvitationUsers(alias, func(wq *InvitationUserQuery) {
				*wq = *query
			})
		case "invitationAcceptances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationAcceptanceClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedInvitationAcceptances(alias, func(wq *InvitationAcceptanceQuery) {
				*wq = *query
			})
		case "invitationDenials":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationDenialClient{config: i.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			i.WithNamedInvitationDenials(alias, func(wq *InvitationDenialQuery) {
				*wq = *query
			})
		case "userID":
			if _, ok := fieldSeen[invitation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitation.FieldUserID)
				fieldSeen[invitation.FieldUserID] = struct{}{}
			}
		case "location":
			if _, ok := fieldSeen[invitation.FieldLocation]; !ok {
				selectedFields = append(selectedFields, invitation.FieldLocation)
				fieldSeen[invitation.FieldLocation] = struct{}{}
			}
		case "coordinate":
			if _, ok := fieldSeen[invitation.FieldCoordinate]; !ok {
				selectedFields = append(selectedFields, invitation.FieldCoordinate)
				fieldSeen[invitation.FieldCoordinate] = struct{}{}
			}
		case "comment":
			if _, ok := fieldSeen[invitation.FieldComment]; !ok {
				selectedFields = append(selectedFields, invitation.FieldComment)
				fieldSeen[invitation.FieldComment] = struct{}{}
			}
		case "startsAt":
			if _, ok := fieldSeen[invitation.FieldStartsAt]; !ok {
				selectedFields = append(selectedFields, invitation.FieldStartsAt)
				fieldSeen[invitation.FieldStartsAt] = struct{}{}
			}
		case "chatRoomID":
			if _, ok := fieldSeen[invitation.FieldChatRoomID]; !ok {
				selectedFields = append(selectedFields, invitation.FieldChatRoomID)
				fieldSeen[invitation.FieldChatRoomID] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[invitation.FieldStatus]; !ok {
				selectedFields = append(selectedFields, invitation.FieldStatus)
				fieldSeen[invitation.FieldStatus] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[invitation.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, invitation.FieldCreatedAt)
				fieldSeen[invitation.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[invitation.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, invitation.FieldUpdatedAt)
				fieldSeen[invitation.FieldUpdatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		i.Select(selectedFields...)
	}
	return nil
}

type invitationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InvitationPaginateOption
}

func newInvitationPaginateArgs(rv map[string]interface{}) *invitationPaginateArgs {
	args := &invitationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ia *InvitationAcceptanceQuery) CollectFields(ctx context.Context, satisfies ...string) (*InvitationAcceptanceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ia, nil
	}
	if err := ia.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ia, nil
}

func (ia *InvitationAcceptanceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(invitationacceptance.Columns))
		selectedFields = []string{invitationacceptance.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ia.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ia.withUser = query
			if _, ok := fieldSeen[invitationacceptance.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationacceptance.FieldUserID)
				fieldSeen[invitationacceptance.FieldUserID] = struct{}{}
			}
		case "invitation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationClient{config: ia.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ia.withInvitation = query
			if _, ok := fieldSeen[invitationacceptance.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationacceptance.FieldInvitationID)
				fieldSeen[invitationacceptance.FieldInvitationID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[invitationacceptance.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationacceptance.FieldUserID)
				fieldSeen[invitationacceptance.FieldUserID] = struct{}{}
			}
		case "invitationID":
			if _, ok := fieldSeen[invitationacceptance.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationacceptance.FieldInvitationID)
				fieldSeen[invitationacceptance.FieldInvitationID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[invitationacceptance.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, invitationacceptance.FieldCreatedAt)
				fieldSeen[invitationacceptance.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ia.Select(selectedFields...)
	}
	return nil
}

type invitationacceptancePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InvitationAcceptancePaginateOption
}

func newInvitationAcceptancePaginateArgs(rv map[string]interface{}) *invitationacceptancePaginateArgs {
	args := &invitationacceptancePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (id *InvitationDenialQuery) CollectFields(ctx context.Context, satisfies ...string) (*InvitationDenialQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return id, nil
	}
	if err := id.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return id, nil
}

func (id *InvitationDenialQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(invitationdenial.Columns))
		selectedFields = []string{invitationdenial.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: id.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			id.withUser = query
			if _, ok := fieldSeen[invitationdenial.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationdenial.FieldUserID)
				fieldSeen[invitationdenial.FieldUserID] = struct{}{}
			}
		case "invitation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationClient{config: id.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			id.withInvitation = query
			if _, ok := fieldSeen[invitationdenial.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationdenial.FieldInvitationID)
				fieldSeen[invitationdenial.FieldInvitationID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[invitationdenial.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationdenial.FieldUserID)
				fieldSeen[invitationdenial.FieldUserID] = struct{}{}
			}
		case "invitationID":
			if _, ok := fieldSeen[invitationdenial.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationdenial.FieldInvitationID)
				fieldSeen[invitationdenial.FieldInvitationID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[invitationdenial.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, invitationdenial.FieldCreatedAt)
				fieldSeen[invitationdenial.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		id.Select(selectedFields...)
	}
	return nil
}

type invitationdenialPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InvitationDenialPaginateOption
}

func newInvitationDenialPaginateArgs(rv map[string]interface{}) *invitationdenialPaginateArgs {
	args := &invitationdenialPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (iu *InvitationUserQuery) CollectFields(ctx context.Context, satisfies ...string) (*InvitationUserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return iu, nil
	}
	if err := iu.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return iu, nil
}

func (iu *InvitationUserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(invitationuser.Columns))
		selectedFields = []string{invitationuser.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "invitation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationClient{config: iu.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			iu.withInvitation = query
			if _, ok := fieldSeen[invitationuser.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationuser.FieldInvitationID)
				fieldSeen[invitationuser.FieldInvitationID] = struct{}{}
			}
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: iu.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			iu.withUser = query
			if _, ok := fieldSeen[invitationuser.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationuser.FieldUserID)
				fieldSeen[invitationuser.FieldUserID] = struct{}{}
			}
		case "invitationID":
			if _, ok := fieldSeen[invitationuser.FieldInvitationID]; !ok {
				selectedFields = append(selectedFields, invitationuser.FieldInvitationID)
				fieldSeen[invitationuser.FieldInvitationID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[invitationuser.FieldUserID]; !ok {
				selectedFields = append(selectedFields, invitationuser.FieldUserID)
				fieldSeen[invitationuser.FieldUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[invitationuser.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, invitationuser.FieldCreatedAt)
				fieldSeen[invitationuser.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		iu.Select(selectedFields...)
	}
	return nil
}

type invitationuserPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []InvitationUserPaginateOption
}

func newInvitationUserPaginateArgs(rv map[string]interface{}) *invitationuserPaginateArgs {
	args := &invitationuserPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pnt *PushNotificationTokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*PushNotificationTokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pnt, nil
	}
	if err := pnt.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pnt, nil
}

func (pnt *PushNotificationTokenQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(pushnotificationtoken.Columns))
		selectedFields = []string{pushnotificationtoken.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: pnt.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			pnt.withUser = query
			if _, ok := fieldSeen[pushnotificationtoken.FieldUserID]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldUserID)
				fieldSeen[pushnotificationtoken.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[pushnotificationtoken.FieldUserID]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldUserID)
				fieldSeen[pushnotificationtoken.FieldUserID] = struct{}{}
			}
		case "deviceID":
			if _, ok := fieldSeen[pushnotificationtoken.FieldDeviceID]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldDeviceID)
				fieldSeen[pushnotificationtoken.FieldDeviceID] = struct{}{}
			}
		case "fcmToken":
			if _, ok := fieldSeen[pushnotificationtoken.FieldFcmToken]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldFcmToken)
				fieldSeen[pushnotificationtoken.FieldFcmToken] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[pushnotificationtoken.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldCreatedAt)
				fieldSeen[pushnotificationtoken.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[pushnotificationtoken.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, pushnotificationtoken.FieldUpdatedAt)
				fieldSeen[pushnotificationtoken.FieldUpdatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pnt.Select(selectedFields...)
	}
	return nil
}

type pushnotificationtokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PushNotificationTokenPaginateOption
}

func newPushNotificationTokenPaginateArgs(rv map[string]interface{}) *pushnotificationtokenPaginateArgs {
	args := &pushnotificationtokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "account":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AccountClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withAccount = query
			if _, ok := fieldSeen[user.FieldAccountID]; !ok {
				selectedFields = append(selectedFields, user.FieldAccountID)
				fieldSeen[user.FieldAccountID] = struct{}{}
			}
		case "userProfile":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserProfileClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withUserProfile = query
		case "userLocation":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserLocationClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withUserLocation = query
		case "friendUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFriendUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "pushNotificationTokens":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PushNotificationTokenClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedPushNotificationTokens(alias, func(wq *PushNotificationTokenQuery) {
				*wq = *query
			})
		case "friendGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FriendGroupClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFriendGroups(alias, func(wq *FriendGroupQuery) {
				*wq = *query
			})
		case "belongingFriendGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FriendGroupClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedBelongingFriendGroups(alias, func(wq *FriendGroupQuery) {
				*wq = *query
			})
		case "invitationAcceptances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationAcceptanceClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedInvitationAcceptances(alias, func(wq *InvitationAcceptanceQuery) {
				*wq = *query
			})
		case "invitationDenials":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&InvitationDenialClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedInvitationDenials(alias, func(wq *InvitationDenialQuery) {
				*wq = *query
			})
		case "friendships":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FriendshipClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFriendships(alias, func(wq *FriendshipQuery) {
				*wq = *query
			})
		case "userFriendGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserFriendGroupClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedUserFriendGroups(alias, func(wq *UserFriendGroupQuery) {
				*wq = *query
			})
		case "accountID":
			if _, ok := fieldSeen[user.FieldAccountID]; !ok {
				selectedFields = append(selectedFields, user.FieldAccountID)
				fieldSeen[user.FieldAccountID] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[user.FieldStatus]; !ok {
				selectedFields = append(selectedFields, user.FieldStatus)
				fieldSeen[user.FieldStatus] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ub *UserBlockQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserBlockQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ub, nil
	}
	if err := ub.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ub, nil
}

func (ub *UserBlockQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userblock.Columns))
		selectedFields = []string{userblock.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ub.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ub.withUser = query
			if _, ok := fieldSeen[userblock.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userblock.FieldUserID)
				fieldSeen[userblock.FieldUserID] = struct{}{}
			}
		case "blockUser":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ub.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ub.withBlockUser = query
			if _, ok := fieldSeen[userblock.FieldBlockUserID]; !ok {
				selectedFields = append(selectedFields, userblock.FieldBlockUserID)
				fieldSeen[userblock.FieldBlockUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[userblock.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userblock.FieldUserID)
				fieldSeen[userblock.FieldUserID] = struct{}{}
			}
		case "blockUserID":
			if _, ok := fieldSeen[userblock.FieldBlockUserID]; !ok {
				selectedFields = append(selectedFields, userblock.FieldBlockUserID)
				fieldSeen[userblock.FieldBlockUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[userblock.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, userblock.FieldCreatedAt)
				fieldSeen[userblock.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ub.Select(selectedFields...)
	}
	return nil
}

type userblockPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserBlockPaginateOption
}

func newUserBlockPaginateArgs(rv map[string]interface{}) *userblockPaginateArgs {
	args := &userblockPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ufg *UserFriendGroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserFriendGroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ufg, nil
	}
	if err := ufg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ufg, nil
}

func (ufg *UserFriendGroupQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userfriendgroup.Columns))
		selectedFields = []string{userfriendgroup.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "friendGroup":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FriendGroupClient{config: ufg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ufg.withFriendGroup = query
			if _, ok := fieldSeen[userfriendgroup.FieldFriendGroupID]; !ok {
				selectedFields = append(selectedFields, userfriendgroup.FieldFriendGroupID)
				fieldSeen[userfriendgroup.FieldFriendGroupID] = struct{}{}
			}
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ufg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ufg.withUser = query
			if _, ok := fieldSeen[userfriendgroup.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userfriendgroup.FieldUserID)
				fieldSeen[userfriendgroup.FieldUserID] = struct{}{}
			}
		case "friendGroupID":
			if _, ok := fieldSeen[userfriendgroup.FieldFriendGroupID]; !ok {
				selectedFields = append(selectedFields, userfriendgroup.FieldFriendGroupID)
				fieldSeen[userfriendgroup.FieldFriendGroupID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[userfriendgroup.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userfriendgroup.FieldUserID)
				fieldSeen[userfriendgroup.FieldUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[userfriendgroup.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, userfriendgroup.FieldCreatedAt)
				fieldSeen[userfriendgroup.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ufg.Select(selectedFields...)
	}
	return nil
}

type userfriendgroupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserFriendGroupPaginateOption
}

func newUserFriendGroupPaginateArgs(rv map[string]interface{}) *userfriendgroupPaginateArgs {
	args := &userfriendgroupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ul *UserLocationQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserLocationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ul, nil
	}
	if err := ul.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ul, nil
}

func (ul *UserLocationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userlocation.Columns))
		selectedFields = []string{userlocation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ul.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ul.withUser = query
			if _, ok := fieldSeen[userlocation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userlocation.FieldUserID)
				fieldSeen[userlocation.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[userlocation.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userlocation.FieldUserID)
				fieldSeen[userlocation.FieldUserID] = struct{}{}
			}
		case "coordinate":
			if _, ok := fieldSeen[userlocation.FieldCoordinate]; !ok {
				selectedFields = append(selectedFields, userlocation.FieldCoordinate)
				fieldSeen[userlocation.FieldCoordinate] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[userlocation.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, userlocation.FieldUpdatedAt)
				fieldSeen[userlocation.FieldUpdatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ul.Select(selectedFields...)
	}
	return nil
}

type userlocationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserLocationPaginateOption
}

func newUserLocationPaginateArgs(rv map[string]interface{}) *userlocationPaginateArgs {
	args := &userlocationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ulh *UserLocationHistoryQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserLocationHistoryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ulh, nil
	}
	if err := ulh.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ulh, nil
}

func (ulh *UserLocationHistoryQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userlocationhistory.Columns))
		selectedFields = []string{userlocationhistory.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: ulh.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ulh.withUser = query
			if _, ok := fieldSeen[userlocationhistory.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userlocationhistory.FieldUserID)
				fieldSeen[userlocationhistory.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[userlocationhistory.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userlocationhistory.FieldUserID)
				fieldSeen[userlocationhistory.FieldUserID] = struct{}{}
			}
		case "coordinate":
			if _, ok := fieldSeen[userlocationhistory.FieldCoordinate]; !ok {
				selectedFields = append(selectedFields, userlocationhistory.FieldCoordinate)
				fieldSeen[userlocationhistory.FieldCoordinate] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[userlocationhistory.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, userlocationhistory.FieldCreatedAt)
				fieldSeen[userlocationhistory.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ulh.Select(selectedFields...)
	}
	return nil
}

type userlocationhistoryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserLocationHistoryPaginateOption
}

func newUserLocationHistoryPaginateArgs(rv map[string]interface{}) *userlocationhistoryPaginateArgs {
	args := &userlocationhistoryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (um *UserMuteQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserMuteQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return um, nil
	}
	if err := um.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return um, nil
}

func (um *UserMuteQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(usermute.Columns))
		selectedFields = []string{usermute.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: um.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			um.withUser = query
			if _, ok := fieldSeen[usermute.FieldUserID]; !ok {
				selectedFields = append(selectedFields, usermute.FieldUserID)
				fieldSeen[usermute.FieldUserID] = struct{}{}
			}
		case "muteUser":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: um.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			um.withMuteUser = query
			if _, ok := fieldSeen[usermute.FieldMuteUserID]; !ok {
				selectedFields = append(selectedFields, usermute.FieldMuteUserID)
				fieldSeen[usermute.FieldMuteUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[usermute.FieldUserID]; !ok {
				selectedFields = append(selectedFields, usermute.FieldUserID)
				fieldSeen[usermute.FieldUserID] = struct{}{}
			}
		case "muteUserID":
			if _, ok := fieldSeen[usermute.FieldMuteUserID]; !ok {
				selectedFields = append(selectedFields, usermute.FieldMuteUserID)
				fieldSeen[usermute.FieldMuteUserID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[usermute.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, usermute.FieldCreatedAt)
				fieldSeen[usermute.FieldCreatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		um.Select(selectedFields...)
	}
	return nil
}

type usermutePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserMutePaginateOption
}

func newUserMutePaginateArgs(rv map[string]interface{}) *usermutePaginateArgs {
	args := &usermutePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (up *UserProfileQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserProfileQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return up, nil
	}
	if err := up.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return up, nil
}

func (up *UserProfileQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(userprofile.Columns))
		selectedFields = []string{userprofile.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "user":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: up.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			up.withUser = query
			if _, ok := fieldSeen[userprofile.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldUserID)
				fieldSeen[userprofile.FieldUserID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[userprofile.FieldUserID]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldUserID)
				fieldSeen[userprofile.FieldUserID] = struct{}{}
			}
		case "screenID":
			if _, ok := fieldSeen[userprofile.FieldScreenID]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldScreenID)
				fieldSeen[userprofile.FieldScreenID] = struct{}{}
			}
		case "nickname":
			if _, ok := fieldSeen[userprofile.FieldNickname]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldNickname)
				fieldSeen[userprofile.FieldNickname] = struct{}{}
			}
		case "avatarURL":
			if _, ok := fieldSeen[userprofile.FieldAvatarURL]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldAvatarURL)
				fieldSeen[userprofile.FieldAvatarURL] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[userprofile.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldCreatedAt)
				fieldSeen[userprofile.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[userprofile.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, userprofile.FieldUpdatedAt)
				fieldSeen[userprofile.FieldUpdatedAt] = struct{}{}
			}
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		up.Select(selectedFields...)
	}
	return nil
}

type userprofilePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserProfilePaginateOption
}

func newUserProfilePaginateArgs(rv map[string]interface{}) *userprofilePaginateArgs {
	args := &userprofilePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

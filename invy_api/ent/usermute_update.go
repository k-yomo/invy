// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/usermute"
)

// UserMuteUpdate is the builder for updating UserMute entities.
type UserMuteUpdate struct {
	config
	hooks    []Hook
	mutation *UserMuteMutation
}

// Where appends a list predicates to the UserMuteUpdate builder.
func (umu *UserMuteUpdate) Where(ps ...predicate.UserMute) *UserMuteUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// Mutation returns the UserMuteMutation object of the builder.
func (umu *UserMuteUpdate) Mutation() *UserMuteMutation {
	return umu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMuteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMuteMutation](ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMuteUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMuteUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMuteUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMuteUpdate) check() error {
	if _, ok := umu.mutation.UserID(); umu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMute.user"`)
	}
	if _, ok := umu.mutation.MuteUserID(); umu.mutation.MuteUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMute.mute_user"`)
	}
	return nil
}

func (umu *UserMuteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermute.Table,
			Columns: usermute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermute.FieldID,
			},
		},
	}
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UserMuteUpdateOne is the builder for updating a single UserMute entity.
type UserMuteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMuteMutation
}

// Mutation returns the UserMuteMutation object of the builder.
func (umuo *UserMuteUpdateOne) Mutation() *UserMuteMutation {
	return umuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMuteUpdateOne) Select(field string, fields ...string) *UserMuteUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMute entity.
func (umuo *UserMuteUpdateOne) Save(ctx context.Context) (*UserMute, error) {
	return withHooks[*UserMute, UserMuteMutation](ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMuteUpdateOne) SaveX(ctx context.Context) *UserMute {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMuteUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMuteUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMuteUpdateOne) check() error {
	if _, ok := umuo.mutation.UserID(); umuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMute.user"`)
	}
	if _, ok := umuo.mutation.MuteUserID(); umuo.mutation.MuteUserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMute.mute_user"`)
	}
	return nil
}

func (umuo *UserMuteUpdateOne) sqlSave(ctx context.Context) (_node *UserMute, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermute.Table,
			Columns: usermute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermute.FieldID,
			},
		},
	}
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermute.FieldID)
		for _, f := range fields {
			if !usermute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &UserMute{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}

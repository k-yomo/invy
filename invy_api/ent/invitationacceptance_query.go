// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/invitation"
	"github.com/k-yomo/invy/invy_api/ent/invitationacceptance"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
	"github.com/k-yomo/invy/invy_api/ent/user"
)

// InvitationAcceptanceQuery is the builder for querying InvitationAcceptance entities.
type InvitationAcceptanceQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	inters         []Interceptor
	predicates     []predicate.InvitationAcceptance
	withUser       *UserQuery
	withInvitation *InvitationQuery
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*InvitationAcceptance) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvitationAcceptanceQuery builder.
func (iaq *InvitationAcceptanceQuery) Where(ps ...predicate.InvitationAcceptance) *InvitationAcceptanceQuery {
	iaq.predicates = append(iaq.predicates, ps...)
	return iaq
}

// Limit the number of records to be returned by this query.
func (iaq *InvitationAcceptanceQuery) Limit(limit int) *InvitationAcceptanceQuery {
	iaq.limit = &limit
	return iaq
}

// Offset to start from.
func (iaq *InvitationAcceptanceQuery) Offset(offset int) *InvitationAcceptanceQuery {
	iaq.offset = &offset
	return iaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iaq *InvitationAcceptanceQuery) Unique(unique bool) *InvitationAcceptanceQuery {
	iaq.unique = &unique
	return iaq
}

// Order specifies how the records should be ordered.
func (iaq *InvitationAcceptanceQuery) Order(o ...OrderFunc) *InvitationAcceptanceQuery {
	iaq.order = append(iaq.order, o...)
	return iaq
}

// QueryUser chains the current query on the "user" edge.
func (iaq *InvitationAcceptanceQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: iaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationacceptance.Table, invitationacceptance.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationacceptance.UserTable, invitationacceptance.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(iaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitation chains the current query on the "invitation" edge.
func (iaq *InvitationAcceptanceQuery) QueryInvitation() *InvitationQuery {
	query := (&InvitationClient{config: iaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invitationacceptance.Table, invitationacceptance.FieldID, selector),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invitationacceptance.InvitationTable, invitationacceptance.InvitationColumn),
		)
		fromU = sqlgraph.SetNeighbors(iaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InvitationAcceptance entity from the query.
// Returns a *NotFoundError when no InvitationAcceptance was found.
func (iaq *InvitationAcceptanceQuery) First(ctx context.Context) (*InvitationAcceptance, error) {
	nodes, err := iaq.Limit(1).All(newQueryContext(ctx, TypeInvitationAcceptance, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{invitationacceptance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) FirstX(ctx context.Context) *InvitationAcceptance {
	node, err := iaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InvitationAcceptance ID from the query.
// Returns a *NotFoundError when no InvitationAcceptance ID was found.
func (iaq *InvitationAcceptanceQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iaq.Limit(1).IDs(newQueryContext(ctx, TypeInvitationAcceptance, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{invitationacceptance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InvitationAcceptance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InvitationAcceptance entity is found.
// Returns a *NotFoundError when no InvitationAcceptance entities are found.
func (iaq *InvitationAcceptanceQuery) Only(ctx context.Context) (*InvitationAcceptance, error) {
	nodes, err := iaq.Limit(2).All(newQueryContext(ctx, TypeInvitationAcceptance, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{invitationacceptance.Label}
	default:
		return nil, &NotSingularError{invitationacceptance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) OnlyX(ctx context.Context) *InvitationAcceptance {
	node, err := iaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InvitationAcceptance ID in the query.
// Returns a *NotSingularError when more than one InvitationAcceptance ID is found.
// Returns a *NotFoundError when no entities are found.
func (iaq *InvitationAcceptanceQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iaq.Limit(2).IDs(newQueryContext(ctx, TypeInvitationAcceptance, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{invitationacceptance.Label}
	default:
		err = &NotSingularError{invitationacceptance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InvitationAcceptances.
func (iaq *InvitationAcceptanceQuery) All(ctx context.Context) ([]*InvitationAcceptance, error) {
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "All")
	if err := iaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InvitationAcceptance, *InvitationAcceptanceQuery]()
	return withInterceptors[[]*InvitationAcceptance](ctx, iaq, qr, iaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) AllX(ctx context.Context) []*InvitationAcceptance {
	nodes, err := iaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InvitationAcceptance IDs.
func (iaq *InvitationAcceptanceQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "IDs")
	if err := iaq.Select(invitationacceptance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iaq *InvitationAcceptanceQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "Count")
	if err := iaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iaq, querierCount[*InvitationAcceptanceQuery](), iaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) CountX(ctx context.Context) int {
	count, err := iaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iaq *InvitationAcceptanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "Exist")
	switch _, err := iaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iaq *InvitationAcceptanceQuery) ExistX(ctx context.Context) bool {
	exist, err := iaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvitationAcceptanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iaq *InvitationAcceptanceQuery) Clone() *InvitationAcceptanceQuery {
	if iaq == nil {
		return nil
	}
	return &InvitationAcceptanceQuery{
		config:         iaq.config,
		limit:          iaq.limit,
		offset:         iaq.offset,
		order:          append([]OrderFunc{}, iaq.order...),
		inters:         append([]Interceptor{}, iaq.inters...),
		predicates:     append([]predicate.InvitationAcceptance{}, iaq.predicates...),
		withUser:       iaq.withUser.Clone(),
		withInvitation: iaq.withInvitation.Clone(),
		// clone intermediate query.
		sql:    iaq.sql.Clone(),
		path:   iaq.path,
		unique: iaq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (iaq *InvitationAcceptanceQuery) WithUser(opts ...func(*UserQuery)) *InvitationAcceptanceQuery {
	query := (&UserClient{config: iaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iaq.withUser = query
	return iaq
}

// WithInvitation tells the query-builder to eager-load the nodes that are connected to
// the "invitation" edge. The optional arguments are used to configure the query builder of the edge.
func (iaq *InvitationAcceptanceQuery) WithInvitation(opts ...func(*InvitationQuery)) *InvitationAcceptanceQuery {
	query := (&InvitationClient{config: iaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iaq.withInvitation = query
	return iaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InvitationAcceptance.Query().
//		GroupBy(invitationacceptance.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iaq *InvitationAcceptanceQuery) GroupBy(field string, fields ...string) *InvitationAcceptanceGroupBy {
	iaq.fields = append([]string{field}, fields...)
	grbuild := &InvitationAcceptanceGroupBy{build: iaq}
	grbuild.flds = &iaq.fields
	grbuild.label = invitationacceptance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.InvitationAcceptance.Query().
//		Select(invitationacceptance.FieldUserID).
//		Scan(ctx, &v)
func (iaq *InvitationAcceptanceQuery) Select(fields ...string) *InvitationAcceptanceSelect {
	iaq.fields = append(iaq.fields, fields...)
	sbuild := &InvitationAcceptanceSelect{InvitationAcceptanceQuery: iaq}
	sbuild.label = invitationacceptance.Label
	sbuild.flds, sbuild.scan = &iaq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InvitationAcceptanceSelect configured with the given aggregations.
func (iaq *InvitationAcceptanceQuery) Aggregate(fns ...AggregateFunc) *InvitationAcceptanceSelect {
	return iaq.Select().Aggregate(fns...)
}

func (iaq *InvitationAcceptanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iaq); err != nil {
				return err
			}
		}
	}
	for _, f := range iaq.fields {
		if !invitationacceptance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iaq.path != nil {
		prev, err := iaq.path(ctx)
		if err != nil {
			return err
		}
		iaq.sql = prev
	}
	return nil
}

func (iaq *InvitationAcceptanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InvitationAcceptance, error) {
	var (
		nodes       = []*InvitationAcceptance{}
		_spec       = iaq.querySpec()
		loadedTypes = [2]bool{
			iaq.withUser != nil,
			iaq.withInvitation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InvitationAcceptance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InvitationAcceptance{config: iaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(iaq.modifiers) > 0 {
		_spec.Modifiers = iaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iaq.withUser; query != nil {
		if err := iaq.loadUser(ctx, query, nodes, nil,
			func(n *InvitationAcceptance, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := iaq.withInvitation; query != nil {
		if err := iaq.loadInvitation(ctx, query, nodes, nil,
			func(n *InvitationAcceptance, e *Invitation) { n.Edges.Invitation = e }); err != nil {
			return nil, err
		}
	}
	for i := range iaq.loadTotal {
		if err := iaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iaq *InvitationAcceptanceQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*InvitationAcceptance, init func(*InvitationAcceptance), assign func(*InvitationAcceptance, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*InvitationAcceptance)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iaq *InvitationAcceptanceQuery) loadInvitation(ctx context.Context, query *InvitationQuery, nodes []*InvitationAcceptance, init func(*InvitationAcceptance), assign func(*InvitationAcceptance, *Invitation)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*InvitationAcceptance)
	for i := range nodes {
		fk := nodes[i].InvitationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(invitation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invitation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iaq *InvitationAcceptanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iaq.querySpec()
	if len(iaq.modifiers) > 0 {
		_spec.Modifiers = iaq.modifiers
	}
	_spec.Node.Columns = iaq.fields
	if len(iaq.fields) > 0 {
		_spec.Unique = iaq.unique != nil && *iaq.unique
	}
	return sqlgraph.CountNodes(ctx, iaq.driver, _spec)
}

func (iaq *InvitationAcceptanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitationacceptance.Table,
			Columns: invitationacceptance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationacceptance.FieldID,
			},
		},
		From:   iaq.sql,
		Unique: true,
	}
	if unique := iaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := iaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitationacceptance.FieldID)
		for i := range fields {
			if fields[i] != invitationacceptance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iaq *InvitationAcceptanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iaq.driver.Dialect())
	t1 := builder.Table(invitationacceptance.Table)
	columns := iaq.fields
	if len(columns) == 0 {
		columns = invitationacceptance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iaq.sql != nil {
		selector = iaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iaq.unique != nil && *iaq.unique {
		selector.Distinct()
	}
	for _, p := range iaq.predicates {
		p(selector)
	}
	for _, p := range iaq.order {
		p(selector)
	}
	if offset := iaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InvitationAcceptanceGroupBy is the group-by builder for InvitationAcceptance entities.
type InvitationAcceptanceGroupBy struct {
	selector
	build *InvitationAcceptanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iagb *InvitationAcceptanceGroupBy) Aggregate(fns ...AggregateFunc) *InvitationAcceptanceGroupBy {
	iagb.fns = append(iagb.fns, fns...)
	return iagb
}

// Scan applies the selector query and scans the result into the given value.
func (iagb *InvitationAcceptanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "GroupBy")
	if err := iagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvitationAcceptanceQuery, *InvitationAcceptanceGroupBy](ctx, iagb.build, iagb, iagb.build.inters, v)
}

func (iagb *InvitationAcceptanceGroupBy) sqlScan(ctx context.Context, root *InvitationAcceptanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iagb.fns))
	for _, fn := range iagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iagb.flds)+len(iagb.fns))
		for _, f := range *iagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InvitationAcceptanceSelect is the builder for selecting fields of InvitationAcceptance entities.
type InvitationAcceptanceSelect struct {
	*InvitationAcceptanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ias *InvitationAcceptanceSelect) Aggregate(fns ...AggregateFunc) *InvitationAcceptanceSelect {
	ias.fns = append(ias.fns, fns...)
	return ias
}

// Scan applies the selector query and scans the result into the given value.
func (ias *InvitationAcceptanceSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeInvitationAcceptance, "Select")
	if err := ias.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvitationAcceptanceQuery, *InvitationAcceptanceSelect](ctx, ias.InvitationAcceptanceQuery, ias, ias.inters, v)
}

func (ias *InvitationAcceptanceSelect) sqlScan(ctx context.Context, root *InvitationAcceptanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ias.fns))
	for _, fn := range ias.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ias.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ias.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

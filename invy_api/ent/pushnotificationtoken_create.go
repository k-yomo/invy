// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/k-yomo/invy/invy_api/ent/pushnotificationtoken"
	"github.com/k-yomo/invy/invy_api/ent/user"
)

// PushNotificationTokenCreate is the builder for creating a PushNotificationToken entity.
type PushNotificationTokenCreate struct {
	config
	mutation *PushNotificationTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (pntc *PushNotificationTokenCreate) SetUserID(u uuid.UUID) *PushNotificationTokenCreate {
	pntc.mutation.SetUserID(u)
	return pntc
}

// SetDeviceID sets the "device_id" field.
func (pntc *PushNotificationTokenCreate) SetDeviceID(s string) *PushNotificationTokenCreate {
	pntc.mutation.SetDeviceID(s)
	return pntc
}

// SetFcmToken sets the "fcm_token" field.
func (pntc *PushNotificationTokenCreate) SetFcmToken(s string) *PushNotificationTokenCreate {
	pntc.mutation.SetFcmToken(s)
	return pntc
}

// SetCreatedAt sets the "created_at" field.
func (pntc *PushNotificationTokenCreate) SetCreatedAt(t time.Time) *PushNotificationTokenCreate {
	pntc.mutation.SetCreatedAt(t)
	return pntc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pntc *PushNotificationTokenCreate) SetNillableCreatedAt(t *time.Time) *PushNotificationTokenCreate {
	if t != nil {
		pntc.SetCreatedAt(*t)
	}
	return pntc
}

// SetUpdatedAt sets the "updated_at" field.
func (pntc *PushNotificationTokenCreate) SetUpdatedAt(t time.Time) *PushNotificationTokenCreate {
	pntc.mutation.SetUpdatedAt(t)
	return pntc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pntc *PushNotificationTokenCreate) SetNillableUpdatedAt(t *time.Time) *PushNotificationTokenCreate {
	if t != nil {
		pntc.SetUpdatedAt(*t)
	}
	return pntc
}

// SetID sets the "id" field.
func (pntc *PushNotificationTokenCreate) SetID(u uuid.UUID) *PushNotificationTokenCreate {
	pntc.mutation.SetID(u)
	return pntc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pntc *PushNotificationTokenCreate) SetNillableID(u *uuid.UUID) *PushNotificationTokenCreate {
	if u != nil {
		pntc.SetID(*u)
	}
	return pntc
}

// SetUser sets the "user" edge to the User entity.
func (pntc *PushNotificationTokenCreate) SetUser(u *User) *PushNotificationTokenCreate {
	return pntc.SetUserID(u.ID)
}

// Mutation returns the PushNotificationTokenMutation object of the builder.
func (pntc *PushNotificationTokenCreate) Mutation() *PushNotificationTokenMutation {
	return pntc.mutation
}

// Save creates the PushNotificationToken in the database.
func (pntc *PushNotificationTokenCreate) Save(ctx context.Context) (*PushNotificationToken, error) {
	pntc.defaults()
	return withHooks[*PushNotificationToken, PushNotificationTokenMutation](ctx, pntc.sqlSave, pntc.mutation, pntc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pntc *PushNotificationTokenCreate) SaveX(ctx context.Context) *PushNotificationToken {
	v, err := pntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pntc *PushNotificationTokenCreate) Exec(ctx context.Context) error {
	_, err := pntc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pntc *PushNotificationTokenCreate) ExecX(ctx context.Context) {
	if err := pntc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pntc *PushNotificationTokenCreate) defaults() {
	if _, ok := pntc.mutation.CreatedAt(); !ok {
		v := pushnotificationtoken.DefaultCreatedAt()
		pntc.mutation.SetCreatedAt(v)
	}
	if _, ok := pntc.mutation.UpdatedAt(); !ok {
		v := pushnotificationtoken.DefaultUpdatedAt()
		pntc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pntc.mutation.ID(); !ok {
		v := pushnotificationtoken.DefaultID()
		pntc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pntc *PushNotificationTokenCreate) check() error {
	if _, ok := pntc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "PushNotificationToken.user_id"`)}
	}
	if _, ok := pntc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "PushNotificationToken.device_id"`)}
	}
	if _, ok := pntc.mutation.FcmToken(); !ok {
		return &ValidationError{Name: "fcm_token", err: errors.New(`ent: missing required field "PushNotificationToken.fcm_token"`)}
	}
	if _, ok := pntc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PushNotificationToken.created_at"`)}
	}
	if _, ok := pntc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PushNotificationToken.updated_at"`)}
	}
	if _, ok := pntc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PushNotificationToken.user"`)}
	}
	return nil
}

func (pntc *PushNotificationTokenCreate) sqlSave(ctx context.Context) (*PushNotificationToken, error) {
	if err := pntc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pntc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pntc.mutation.id = &_node.ID
	pntc.mutation.done = true
	return _node, nil
}

func (pntc *PushNotificationTokenCreate) createSpec() (*PushNotificationToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PushNotificationToken{config: pntc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pushnotificationtoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pushnotificationtoken.FieldID,
			},
		}
	)
	_spec.OnConflict = pntc.conflict
	if id, ok := pntc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pntc.mutation.DeviceID(); ok {
		_spec.SetField(pushnotificationtoken.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := pntc.mutation.FcmToken(); ok {
		_spec.SetField(pushnotificationtoken.FieldFcmToken, field.TypeString, value)
		_node.FcmToken = value
	}
	if value, ok := pntc.mutation.CreatedAt(); ok {
		_spec.SetField(pushnotificationtoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pntc.mutation.UpdatedAt(); ok {
		_spec.SetField(pushnotificationtoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pntc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pushnotificationtoken.UserTable,
			Columns: []string{pushnotificationtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PushNotificationToken.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PushNotificationTokenUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (pntc *PushNotificationTokenCreate) OnConflict(opts ...sql.ConflictOption) *PushNotificationTokenUpsertOne {
	pntc.conflict = opts
	return &PushNotificationTokenUpsertOne{
		create: pntc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pntc *PushNotificationTokenCreate) OnConflictColumns(columns ...string) *PushNotificationTokenUpsertOne {
	pntc.conflict = append(pntc.conflict, sql.ConflictColumns(columns...))
	return &PushNotificationTokenUpsertOne{
		create: pntc,
	}
}

type (
	// PushNotificationTokenUpsertOne is the builder for "upsert"-ing
	//  one PushNotificationToken node.
	PushNotificationTokenUpsertOne struct {
		create *PushNotificationTokenCreate
	}

	// PushNotificationTokenUpsert is the "OnConflict" setter.
	PushNotificationTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *PushNotificationTokenUpsert) SetUserID(v uuid.UUID) *PushNotificationTokenUpsert {
	u.Set(pushnotificationtoken.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PushNotificationTokenUpsert) UpdateUserID() *PushNotificationTokenUpsert {
	u.SetExcluded(pushnotificationtoken.FieldUserID)
	return u
}

// SetFcmToken sets the "fcm_token" field.
func (u *PushNotificationTokenUpsert) SetFcmToken(v string) *PushNotificationTokenUpsert {
	u.Set(pushnotificationtoken.FieldFcmToken, v)
	return u
}

// UpdateFcmToken sets the "fcm_token" field to the value that was provided on create.
func (u *PushNotificationTokenUpsert) UpdateFcmToken() *PushNotificationTokenUpsert {
	u.SetExcluded(pushnotificationtoken.FieldFcmToken)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PushNotificationTokenUpsert) SetUpdatedAt(v time.Time) *PushNotificationTokenUpsert {
	u.Set(pushnotificationtoken.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushNotificationTokenUpsert) UpdateUpdatedAt() *PushNotificationTokenUpsert {
	u.SetExcluded(pushnotificationtoken.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pushnotificationtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PushNotificationTokenUpsertOne) UpdateNewValues() *PushNotificationTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pushnotificationtoken.FieldID)
		}
		if _, exists := u.create.mutation.DeviceID(); exists {
			s.SetIgnore(pushnotificationtoken.FieldDeviceID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pushnotificationtoken.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PushNotificationTokenUpsertOne) Ignore() *PushNotificationTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PushNotificationTokenUpsertOne) DoNothing() *PushNotificationTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PushNotificationTokenCreate.OnConflict
// documentation for more info.
func (u *PushNotificationTokenUpsertOne) Update(set func(*PushNotificationTokenUpsert)) *PushNotificationTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PushNotificationTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PushNotificationTokenUpsertOne) SetUserID(v uuid.UUID) *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertOne) UpdateUserID() *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetFcmToken sets the "fcm_token" field.
func (u *PushNotificationTokenUpsertOne) SetFcmToken(v string) *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetFcmToken(v)
	})
}

// UpdateFcmToken sets the "fcm_token" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertOne) UpdateFcmToken() *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateFcmToken()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PushNotificationTokenUpsertOne) SetUpdatedAt(v time.Time) *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertOne) UpdateUpdatedAt() *PushNotificationTokenUpsertOne {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PushNotificationTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PushNotificationTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PushNotificationTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PushNotificationTokenUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PushNotificationTokenUpsertOne.ID is not supported by MySQL driver. Use PushNotificationTokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PushNotificationTokenUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PushNotificationTokenCreateBulk is the builder for creating many PushNotificationToken entities in bulk.
type PushNotificationTokenCreateBulk struct {
	config
	builders []*PushNotificationTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the PushNotificationToken entities in the database.
func (pntcb *PushNotificationTokenCreateBulk) Save(ctx context.Context) ([]*PushNotificationToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pntcb.builders))
	nodes := make([]*PushNotificationToken, len(pntcb.builders))
	mutators := make([]Mutator, len(pntcb.builders))
	for i := range pntcb.builders {
		func(i int, root context.Context) {
			builder := pntcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PushNotificationTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pntcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pntcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pntcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pntcb *PushNotificationTokenCreateBulk) SaveX(ctx context.Context) []*PushNotificationToken {
	v, err := pntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pntcb *PushNotificationTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := pntcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pntcb *PushNotificationTokenCreateBulk) ExecX(ctx context.Context) {
	if err := pntcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PushNotificationToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PushNotificationTokenUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (pntcb *PushNotificationTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *PushNotificationTokenUpsertBulk {
	pntcb.conflict = opts
	return &PushNotificationTokenUpsertBulk{
		create: pntcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pntcb *PushNotificationTokenCreateBulk) OnConflictColumns(columns ...string) *PushNotificationTokenUpsertBulk {
	pntcb.conflict = append(pntcb.conflict, sql.ConflictColumns(columns...))
	return &PushNotificationTokenUpsertBulk{
		create: pntcb,
	}
}

// PushNotificationTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of PushNotificationToken nodes.
type PushNotificationTokenUpsertBulk struct {
	create *PushNotificationTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pushnotificationtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PushNotificationTokenUpsertBulk) UpdateNewValues() *PushNotificationTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pushnotificationtoken.FieldID)
			}
			if _, exists := b.mutation.DeviceID(); exists {
				s.SetIgnore(pushnotificationtoken.FieldDeviceID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pushnotificationtoken.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PushNotificationToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PushNotificationTokenUpsertBulk) Ignore() *PushNotificationTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PushNotificationTokenUpsertBulk) DoNothing() *PushNotificationTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PushNotificationTokenCreateBulk.OnConflict
// documentation for more info.
func (u *PushNotificationTokenUpsertBulk) Update(set func(*PushNotificationTokenUpsert)) *PushNotificationTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PushNotificationTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *PushNotificationTokenUpsertBulk) SetUserID(v uuid.UUID) *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertBulk) UpdateUserID() *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateUserID()
	})
}

// SetFcmToken sets the "fcm_token" field.
func (u *PushNotificationTokenUpsertBulk) SetFcmToken(v string) *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetFcmToken(v)
	})
}

// UpdateFcmToken sets the "fcm_token" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertBulk) UpdateFcmToken() *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateFcmToken()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PushNotificationTokenUpsertBulk) SetUpdatedAt(v time.Time) *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushNotificationTokenUpsertBulk) UpdateUpdatedAt() *PushNotificationTokenUpsertBulk {
	return u.Update(func(s *PushNotificationTokenUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PushNotificationTokenUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PushNotificationTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PushNotificationTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PushNotificationTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

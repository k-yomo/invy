// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/k-yomo/invy/invy_api/ent/invitationuser"
	"github.com/k-yomo/invy/invy_api/ent/predicate"
)

// InvitationUserUpdate is the builder for updating InvitationUser entities.
type InvitationUserUpdate struct {
	config
	hooks    []Hook
	mutation *InvitationUserMutation
}

// Where appends a list predicates to the InvitationUserUpdate builder.
func (iuu *InvitationUserUpdate) Where(ps ...predicate.InvitationUser) *InvitationUserUpdate {
	iuu.mutation.Where(ps...)
	return iuu
}

// Mutation returns the InvitationUserMutation object of the builder.
func (iuu *InvitationUserUpdate) Mutation() *InvitationUserMutation {
	return iuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iuu *InvitationUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, InvitationUserMutation](ctx, iuu.sqlSave, iuu.mutation, iuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuu *InvitationUserUpdate) SaveX(ctx context.Context) int {
	affected, err := iuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iuu *InvitationUserUpdate) Exec(ctx context.Context) error {
	_, err := iuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuu *InvitationUserUpdate) ExecX(ctx context.Context) {
	if err := iuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuu *InvitationUserUpdate) check() error {
	if _, ok := iuu.mutation.InvitationID(); iuu.mutation.InvitationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationUser.invitation"`)
	}
	if _, ok := iuu.mutation.UserID(); iuu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationUser.user"`)
	}
	return nil
}

func (iuu *InvitationUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iuu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitationuser.Table,
			Columns: invitationuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationuser.FieldID,
			},
		},
	}
	if ps := iuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iuu.mutation.done = true
	return n, nil
}

// InvitationUserUpdateOne is the builder for updating a single InvitationUser entity.
type InvitationUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvitationUserMutation
}

// Mutation returns the InvitationUserMutation object of the builder.
func (iuuo *InvitationUserUpdateOne) Mutation() *InvitationUserMutation {
	return iuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuuo *InvitationUserUpdateOne) Select(field string, fields ...string) *InvitationUserUpdateOne {
	iuuo.fields = append([]string{field}, fields...)
	return iuuo
}

// Save executes the query and returns the updated InvitationUser entity.
func (iuuo *InvitationUserUpdateOne) Save(ctx context.Context) (*InvitationUser, error) {
	return withHooks[*InvitationUser, InvitationUserMutation](ctx, iuuo.sqlSave, iuuo.mutation, iuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuuo *InvitationUserUpdateOne) SaveX(ctx context.Context) *InvitationUser {
	node, err := iuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuuo *InvitationUserUpdateOne) Exec(ctx context.Context) error {
	_, err := iuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuuo *InvitationUserUpdateOne) ExecX(ctx context.Context) {
	if err := iuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuuo *InvitationUserUpdateOne) check() error {
	if _, ok := iuuo.mutation.InvitationID(); iuuo.mutation.InvitationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationUser.invitation"`)
	}
	if _, ok := iuuo.mutation.UserID(); iuuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvitationUser.user"`)
	}
	return nil
}

func (iuuo *InvitationUserUpdateOne) sqlSave(ctx context.Context) (_node *InvitationUser, err error) {
	if err := iuuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   invitationuser.Table,
			Columns: invitationuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: invitationuser.FieldID,
			},
		},
	}
	id, ok := iuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvitationUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitationuser.FieldID)
		for _, f := range fields {
			if !invitationuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitationuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &InvitationUser{config: iuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitationuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuuo.mutation.done = true
	return _node, nil
}

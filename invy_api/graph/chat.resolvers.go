package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"

	cerrors "github.com/cockroachdb/errors"
	"github.com/k-yomo/invy/invy_api/graph/gqlmodel"
	"github.com/k-yomo/invy/invy_api/internal/auth"
	"github.com/k-yomo/invy/invy_api/internal/xerrors"
	"github.com/k-yomo/invy/pkg/sliceutil"
)

// SendChatMessageText is the resolver for the SendChatMessageText field.
func (r *mutationResolver) SendChatMessageText(ctx context.Context, input *gqlmodel.SendChatMessageTextInput) (*gqlmodel.SendChatMessageTextPayload, error) {
	authUserID := auth.GetCurrentUserID(ctx)

	participantUserIDs, err := r.ChatService.GetChatRoomParticipantUserIDs(ctx, input.ChatRoomID)
	if err != nil {
		return nil, err
	}
	if !sliceutil.Includes(participantUserIDs, authUserID) {
		return nil, xerrors.NewErrNotFound(fmt.Errorf("chat room %q not found", input.ChatRoomID))
	}

	chatMessage, err := r.ChatService.CreateChatMessageText(ctx, input.ID, input.ChatRoomID, input.Text)
	if err != nil {
		return nil, err
	}

	return &gqlmodel.SendChatMessageTextPayload{
		ChatMessage: chatMessage,
	}, nil
}

// SendChatMessageImage is the resolver for the SendChatMessageImage field.
func (r *mutationResolver) SendChatMessageImage(ctx context.Context, input *gqlmodel.SendChatMessageImageInput) (*gqlmodel.SendChatMessageImagePayload, error) {
	authUserID := auth.GetCurrentUserID(ctx)

	participantUserIDs, err := r.ChatService.GetChatRoomParticipantUserIDs(ctx, input.ChatRoomID)
	if err != nil {
		return nil, cerrors.Wrap(err, "get chatroom participant user ids")
	}
	if !sliceutil.Includes(participantUserIDs, authUserID) {
		return nil, xerrors.NewErrNotFound(fmt.Errorf("chat room %q not found", input.ChatRoomID))
	}

	chatMessage, err := r.ChatService.CreateChatMessageImage(ctx, input.ID, input.ChatRoomID, input.Image.File)
	if err != nil {
		return nil, cerrors.Wrap(err, "create chat message image")
	}

	return &gqlmodel.SendChatMessageImagePayload{
		ChatMessage: chatMessage,
	}, nil
}

// UpdateChatLastReadAt is the resolver for the updateChatLastReadAt field.
func (r *mutationResolver) UpdateChatLastReadAt(ctx context.Context, input gqlmodel.UpdateChatLastReadAtInput) (*gqlmodel.UpdateChatLastReadAtPayload, error) {
	authUserID := auth.GetCurrentUserID(ctx)
	// client sends UTC time, but to align with the other data, converting to local here
	err := r.ChatService.UpdateLastReadAt(ctx, input.ChatRoomID, authUserID, input.LastReadAt.Local())
	if err != nil {
		return nil, cerrors.Wrap(err, "update last read at")
	}

	return &gqlmodel.UpdateChatLastReadAtPayload{ChatRoomID: input.ChatRoomID}, nil
}

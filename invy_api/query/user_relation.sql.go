// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_relation.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getNotBlockedFriendUserIDs = `-- name: GetNotBlockedFriendUserIDs :many
SELECT
    u.id
FROM users u
    JOIN friendships f ON f.user_id = u.id AND f.friend_user_id = $1
WHERE
    (
        u.id = ANY($2::uuid[])
        OR u.id IN (
            SELECT
                user_id
            FROM
                user_friend_groups
            WHERE
                friend_group_id = ANY($3::uuid[])
        )
    )
    AND u.id NOT IN (
        SELECT user_id
        FROM user_blocks
        WHERE
            block_user_id = $1
    )
`

type GetNotBlockedFriendUserIDsParams struct {
	UserID         uuid.UUID
	FriendUserIds  []uuid.UUID
	FriendGroupIds []uuid.UUID
}

func (q *Queries) GetNotBlockedFriendUserIDs(ctx context.Context, arg GetNotBlockedFriendUserIDsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getNotBlockedFriendUserIDs, arg.UserID, pq.Array(arg.FriendUserIds), pq.Array(arg.FriendGroupIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

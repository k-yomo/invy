schema { 
  query: Query 
  mutation: Mutation   
}

directive @authRequired on FIELD_DEFINITION

directive @constraint(min: Int, max: Int, pattern: String, format: ConstraintFormat) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type AcceptFriendshipRequestPayload {
  acceptedFriendshipRequestId: UUID!
}

type AcceptInvitationPayload {
  invitation: Invitation!
}

type BlockUserPayload {
  blockedUserId: UUID!
}

type CancelFriendshipRequestPayload {
  canceledFriendshipRequestId: UUID!
}

enum ConstraintFormat {
  EMAIL
  URL
}

type Coordinate {
  latitude: Float!
  longitude: Float!
}

input CreateFriendGroupInput {
  name: String!
  friendUserIds: [UUID!]!
}

type CreateFriendGroupPayload {
  friendGroup: FriendGroup!
}

input CreateUserInput {
  nickname: String!
  avatarUrl: String
}

type CreateUserPayload {
  viewer: Viewer!
}

scalar Cursor

type DeleteFriendGroupPayload {
  deletedFriendGroupId: UUID!
}

type DenyFriendshipRequestPayload {
  deniedFriendshipRequestId: UUID!
}

type DenyInvitationPayload {
  invitation: Invitation!
}

enum ErrorCode {
  INVALID_ARGUMENT
  UNAUTHENTICATED
  FORBIDDEN
  NOT_FOUND
  ALREADY_EXISTS
  INTERNAL
}

type FriendGroup implements Node {
  id: UUID!
  userId: UUID!
  name: String!
  totalCount: Int!
  friendUsers: [User!]!
}

type FriendshipRequest implements Node {
  id: UUID!
  fromUserId: UUID!
  fromUser: User!
  toUserId: UUID!
  toUser: User!
  createdAt: Time!
}

type Invitation implements Node {
  id: UUID!
  userId: UUID!
  user: User!
  location: String!
  coordinate: Coordinate!
  comment: String!
  startsAt: Time!
  expiresAt: Time!
  acceptedUsers: [User!]!
}

type Mutation {
  signUp(input: SignUpInput!): SignUpPayload!
  signOut: SignOutPayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  switchUser(userId: UUID!): SwitchUserPayload!
  createFriendGroup(input: CreateFriendGroupInput!): CreateFriendGroupPayload!
  updateFriendGroup(input: UpdateFriendGroupInput!): UpdateFriendGroupPayload!
  deleteFriendGroup(friendGroupId: UUID!): DeleteFriendGroupPayload!
  sendInvitation(input: SendInvitationInput): SendInvitationPayload!
  acceptInvitation(invitationId: UUID!): AcceptInvitationPayload!
  denyInvitation(invitationId: UUID!): DenyInvitationPayload!
  registerPushNotificationToken(input: RegisterPushNotificationTokenInput): RegisterPushNotificationTokenPayload!
  updateLocation(latitude: Float!, longitude: Float!): UpdateLocationPayload!
  requestFriendship(friendUserId: UUID!): RequestFriendshipPayload!
  cancelFriendshipRequest(friendshipRequestId: UUID!): CancelFriendshipRequestPayload!
  acceptFriendshipRequest(friendshipRequestId: UUID!): AcceptFriendshipRequestPayload!
  denyFriendshipRequest(friendshipRequestId: UUID!): DenyFriendshipRequestPayload!
  muteUser(userId: UUID!): MuteUserPayload!
  unmuteUser(userId: UUID!): UnmuteUserPayload!
  blockUser(userId: UUID!): BlockUserPayload!
  unblockUser(userId: UUID!): UnblockUserPayload!
  updateAvatar(avatar: Upload!): UpdateAvatarPayload!
  updateNickname(nickname: String!): UpdateNicknamePayload!
  updateScreenId(screenId: String!): UpdateScreenIdPayload!
}

type MuteUserPayload {
  mutedUserId: UUID!
}

interface Node {
  id: UUID!
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""PushNotificationType is included in the push notification payload"""
enum PushNotificationType {
  FRIENDSHIP_REQUEST_RECEIVED
  FRIENDSHIP_REQUEST_ACCEPTED
  INVITATION_RECEIVED
  INVITATION_ACCEPTED
}

type Query {
  viewer: Viewer!
  user(userId: UUID!): User!

  """fetch user by screen id"""
  userByScreenId(screenId: String!): User!
}

input RegisterPushNotificationTokenInput {
  deviceId: String!
  fcmToken: String!
}

type RegisterPushNotificationTokenPayload {
  registeredPushNotificationTokenId: UUID!
}

type RequestFriendshipPayload {
  friendShipRequest: FriendshipRequest!
}

input SendInvitationInput {
  targetFriendGroupIds: [UUID!]!
  targetFriendUserIds: [UUID!]!
  expiresAt: Time!
  startsAt: Time!
  location: String!
  latitude: Float!
  longitude: Float!
  comment: String!
}

type SendInvitationPayload {
  invitation: Invitation!
}

type SignOutPayload {
  signedOutUserId: UUID!
}

input SignUpInput {
  email: String
  nickname: String!
  avatarUrl: String
}

type SignUpPayload {
  viewer: Viewer!
}

type SwitchUserPayload {
  viewer: Viewer!
}

scalar Time

type UnblockUserPayload {
  unblockedUserId: UUID!
}

type UnmuteUserPayload {
  unmutedUserId: UUID!
}

type UpdateAvatarPayload {
  viewer: Viewer!
}

input UpdateFriendGroupInput {
  id: UUID!
  name: String!
  friendUserIds: [UUID!]!
}

type UpdateFriendGroupPayload {
  friendGroup: FriendGroup!
}

type UpdateLocationPayload {
  updatedUserLocationId: UUID!
}

type UpdateNicknamePayload {
  viewer: Viewer!
}

type UpdateScreenIdPayload {
  viewer: Viewer!
}

scalar Upload

"""
User is a public interface for a user
User MUST NOT have private information such as email
"""
type User implements Node {
  id: UUID!
  screenId: String!
  nickname: String!
  avatarUrl: String!
  isMuted: Boolean!
  isBlocked: Boolean!
  isFriend: Boolean!
  isRequestingFriendship: Boolean!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  node: User!
  cursor: Cursor!
}

scalar UUID

"""Currently logged in user"""
type Viewer implements Node {
  id: UUID!
  screenId: String!
  nickname: String!
  avatarUrl: String!
  friends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection!
  blockedFriends(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection!

  """fetch friend ship requests need to be approved by the logged in user"""
  pendingFriendshipRequests: [FriendshipRequest!]!

  """fetch friend ship requests sent by the logged in user"""
  requestingFriendshipRequests: [FriendshipRequest!]!

  """
  fetch friend group
  Other user's group can't be fetched
  """
  friendGroup(friendGroupId: UUID!): FriendGroup!

  """fetch friend groups of the logged in user"""
  friendGroups: [FriendGroup!]!
  sentInvitations: [Invitation!]!
  pendingInvitations: [Invitation!]!
  acceptedInvitations: [Invitation!]!
}
